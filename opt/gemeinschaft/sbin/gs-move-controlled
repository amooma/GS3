#!/usr/bin/php -q
<?php
/*******************************************************************\
*            Gemeinschaft - asterisk cluster gemeinschaft
* 
* $Revision$
* 
* Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
* http://www.amooma.de/
* Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
* Philipp Kempgen <philipp.kempgen@amooma.de>
* Peter Kozak <peter.kozak@amooma.de>
* Soeren Sprenger <soeren.sprenger@amooma.de>
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA 02110-1301, USA.
\*******************************************************************/

define( 'GS_VALID', true );  /// this is a parent file

#echo "This script is not ready to use at the moment.\nSorry.\n";
#exit(1);

require_once( dirName(__FILE__) .'/../inc/conf.php' );
include_once( GS_DIR .'lib/getopt.php' );
include_once( GS_DIR .'inc/gs-lib.php' );
include_once( GS_DIR .'inc/gs_topology_lib.php' );
include_once( GS_DIR .'inc/quote_shell_arg.php' );

if (gs_get_conf('GS_INSTALLATION_TYPE_SINGLE')) {
	echo "Not allowed on single server systems.\n";
	exit(1);
}

/***********************************************************
*    the shell parameters
***********************************************************/
$usage =
'Script to move Gemeinschaft from one environment to another.'."\n".
'All configuration has to be done in /etc/gemeinschaft/topology.php.'."\n\n".
'Usage: '. baseName(__FILE__) .' (--test=yes | --force=yes)';

$opts = @getOptsNoMultiples( '',
	array(
		'force=',
		'test='
	),
	$usage
);

$only_run_tests = false;
if (isSet($opts['test'])) {
	if ($opts['test'] !== 'yes') gs_script_invalid_usage( $usage );
	$only_run_tests = true;
}
else {
	if (! isSet($opts['force'])
	||  $opts['force'] !== 'yes') gs_script_invalid_usage( $usage );
}


$conf = '/etc/gemeinschaft/topology.php';
if (! file_exists($conf)) {
	trigger_error( "Config file \"$conf\" not found!\n", E_USER_ERROR );
	exit(1);
} else {
	if ((@include($conf)) === false) {
		// () around the include are important!
		trigger_error( "Could not include config file \"$conf\"!\n", E_USER_ERROR );
		exit(1);
	}
}


# array of the machines
$servers = array(
	# Database Server in RZ A
	'DB_MASTER_SERVER1'  => array('host' => $DB_MASTER_SERVER1  , 'con'=>null, 'desc' => "Database Server in EDPC A" ),
	# Database Server in RZ B
	'DB_MASTER_SERVER2'  => array('host' => $DB_MASTER_SERVER2  , 'con'=>null, 'desc' => "Database Server in EDPC B" ),
	
	# Web/Provisioning Server in RZ A
	'WEB_MASTER_SERVER1' => array('host' => $WEB_MASTER_SERVER1 , 'con'=>null, 'desc' => "Web/Provisioning Server in EDPC A" ),
	# Web/Provisioning Server in RZ B
	'WEB_MASTER_SERVER2' => array('host' => $WEB_MASTER_SERVER2 , 'con'=>null, 'desc' => "Web/Provisioning Server in EDPC B" ),
	
	# Telephony Server in RZ A
	'TE_MASTER_SERVER1'  => array('host' => $TE_MASTER_SERVER1  , 'con'=>null, 'desc' => "Telephony Server in EDPC A (Master)" ),
	'TE_MASTER_BACKUP1'  => array('host' => $TE_MASTER_BACKUP1  , 'con'=>null, 'desc' => "Telephony Server in EDPC A (Backup)" ),
	# Telephony Server in EDPC B
	'TE_MASTER_SERVER2'  => array('host' => $TE_MASTER_SERVER2  , 'con'=>null, 'desc' => "Telephony Server in EDPC B (Master)" ),
	'TE_MASTER_BACKUP2'  => array('host' => $TE_MASTER_BACKUP2  , 'con'=>null, 'desc' => "Telephony Server in EDPC B (Backup)" )
);

_run_topology_tests($servers);

if ($only_run_tests) {
	echo "\nDone.\n";
	exit(0);
}

echo "\n\nTests Done.\n";




# are we root? do we have to sudo?
#
$uid = @posix_geteuid();
$uinfo = @posix_getPwUid($uid);
$uname = @$uinfo['name'];
$sudo = ($uname==='root') ? '' : 'sudo ';


## Stage 1: Migrate Master
#
echo "\n\n Migrate the Database Master server:\n\n";

$new_master = null;
$old_master = null;

if ($CUR_RZ === 'A') {
	$old_master = $DB_MASTER_SERVER1_SERVICE_IP;
	$new_master = $DB_MASTER_SERVER2_SERVICE_IP;
}
elseif ($CUR_RZ === 'B') {
	$old_master = $DB_MASTER_SERVER2_SERVICE_IP;
	$new_master = $DB_MASTER_SERVER1_SERVICE_IP;
}
else {
	echo "\nError.\n";
	exit(1);
}

$ok = gs_db_master_migration( $old_master, $new_master, $SUPER_MYSQL_USER, $SUPER_MYSQL_PASS );
if (isGsError($ok)) {
	echo "ERROR: ", $ok->getMsg() ,"\n";
	exit(1);
} elseif (! $ok) {
	echo "ERROR.\n";
	exit(1);
}

echo "\n\nMigration done.\n";

echo "\n\n====================\n\n";


## Stage 2: Resync Slaves
#
echo "Resyncing all Slaves with the new Master.\n";

foreach ($servers as $key => $host) {
	if ($key === 'DB_MASTER_SERVER1'
	||  $key === 'DB_MASTER_SERVER2')
		continue;
	echo $host['desc'] ,"...\n ";
	if ($CUR_RZ === 'B' && $host['host'] === $DB_MASTER_SERVER1_SERVICE_IP) {
		echo "Skipping, because it's the same host as DB_MASTER_SERVER1_SERVICE_IP.\n";
		echo "This host does not need to be a slave to himself.\n";
		continue;
	}
	if ($CUR_RZ === 'A' && $host['host'] === $DB_MASTER_SERVER2_SERVICE_IP) {
		echo "Skipping, because it's the same host as DB_MASTER_SERVER2_SERVICE_IP.\n";
		echo "This host does not need to be a slave to himself.\n";
		continue;
	}
	
	$ok = gs_db_setup_replication( $new_master, $host['host'], $SUPER_MYSQL_USER, $SUPER_MYSQL_PASS );
	if (isGsError($ok)) {
		echo "ERROR: ", $ok->getMsg() ,"\n";
		exit(1);
	} elseif (! $ok) {
		echo "ERROR.\n";
		exit(1);
	}
} // foreach ($servers as $key => $host)

echo "\n\n====================\n\n";

## Stage 3: Move Service IP addresses of the Web Services
#
echo "Move Service IP addresses of the Web Services.\n";
$up_ifc      = null;
$down_ifc    = null;
$up_server   = null;
$down_server = null;

if ($CUR_RZ === 'A') {
	$down_ifc    = $WEB_MASTER_SERVER1_VIRT_IFC;
	$down_server = $WEB_MASTER_SERVER1;
	$up_ifc      = $WEB_MASTER_SERVER2_VIRT_IFC;
	$up_server   = $WEB_MASTER_SERVER2;
}
else { # $CUR_RZ === 'B'
	$down_ifc    = $WEB_MASTER_SERVER2_VIRT_IFC;
	$down_server = $WEB_MASTER_SERVER2;
	$up_ifc      = $WEB_MASTER_SERVER1_VIRT_IFC;
	$up_server   = $WEB_MASTER_SERVER1;
}

$cmd = 'ifdown '.qsa($down_ifc);
$cmd = 'ssh -o StrictHostKeyChecking=no -o BatchMode=yes '. qsa('root@'.$down_server) .' '. qsa($cmd);
$err=0; $out=array();
@exec( $sudo . $cmd, $out, $err );
if ($err != 0) {
	echo 'Could not bring down ', $down_ifc ,' via SSH on ', $down_server ,"\n";
}

$cmd = 'ifup '.qsa($up_ifc);
$cmd = 'ssh -o StrictHostKeyChecking=no -o BatchMode=yes '. qsa('root@'.$up_server) .' '. qsa($cmd);
$err=0; $out=array();
@exec( $sudo . $cmd, $out, $err );
if ($err != 0) {
	echo 'Could not bring up ', $up_ifc ,' via SSH on ', $up_server ,"\n";
}


echo "\n\n====================\n\n";
## Stage 4: Edit gemeinschaft.php on each server
#
echo "Edit gemeinschaft.php on each server\n";

foreach ($servers as $key => $host) {
	echo $host['desc'] ,"...\n ";
	$ok = _change_etc_gemeinschaft_php( $host['host'], $new_master );
	if (isGsError($ok)) {
		echo "ERROR: ", $ok->getMsg() ,"\n";
		exit(1);
	} elseif (! $ok) {
		echo "ERROR.\n";
		exit(1);
	}
}

echo "\n\n====================\n\n";

## Stage 5: Set $CUR_RZ to the new one
#
echo "Edit topology.php on each server\n";

if($CUR_RZ == 'A')
	$CUR_RZ = 'B';
else 
	$CUR_RZ = 'A';

foreach ($servers as $key => $host) {
	echo $host['desc'] ,"...\n ";
	$ok = _change_etc_topology_php( $host['host'], $CUR_RZ );
	if (isGsError($ok)) {
		echo "ERROR: ", $ok->getMsg() ,"\n";
		exit(1);
	} elseif (! $ok) {
		echo "ERROR.\n";
		exit(1);
	}
}

## Stage 6: Re-Run Tests
#
_run_topology_tests($servers);


echo "\nDone.\n";
echo "The Current Operating EDPC (de: RZ) is now: ". $CUR_RZ."\n";
echo "\n";

