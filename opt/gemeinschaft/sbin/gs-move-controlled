#!/usr/bin/php
<?php
/*******************************************************************\
*            Gemeinschaft - asterisk cluster gemeinschaft
* 
* $Revision$
* 
* Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
* http://www.amooma.de/
* Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
* Philipp Kempgen <philipp.kempgen@amooma.de>
* Peter Kozak <peter.kozak@amooma.de>
* Soeren Sprenger <soeren.sprenger@amooma.de>
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA 02110-1301, USA.
\*******************************************************************/

define( 'GS_VALID', true );  /// this is a parent file

echo "This Skript is not ready to use at the moment.\nSorry.\n";
exit(1);

require_once( dirName(__FILE__) .'/../inc/conf.php' );
include_once( GS_DIR .'lib/getopt.php' );
include_once( GS_DIR .'inc/gs-lib.php' );
include_once( GS_DIR .'inc/gs_topology_lib.php' );

//Local Functions




/***********************************************************
*    the shell parameters
***********************************************************/
$usage = "This Skript will move Gemeinschaft from one environment to an other.\nAll configurations have to be done in a config-file (topologie.php)\n\nUsage: ". baseName(__FILE__) .' --test=yes | --force=yes';

$opts = @getOptsNoMultiples( '',
	array(
		'force=',
		'test='
	),
	$usage
);

$only_run_tests=false;
if(isSet($opts['test']))
  $only_run_tests=true;
else if (!isSet($opts['force']) || ($opts['force'] != "yes")
 ) {
	gs_script_invalid_usage( $usage );
}


$conf = '/etc/gemeinschaft/topology.php';
if (! file_exists( $conf )) {
	trigger_error( "Config file \"$conf\" not found!\n", E_USER_ERROR );
	exit(1);
} else {
	if ((@include( $conf )) === false) {
		// () around the include are important!
		trigger_error( "Could not include config file \"$conf\"!\n", E_USER_ERROR );
		exit(1);
	}
}


//make an Array of the machines
$hosts = array(
	//Database Server in RZ A
	"DB_MASTER_SERVER1" => array("host" => $DB_MASTER_SERVER1, "con" => null, "desc" => "Database Server in RZ A"),
	//Database Server in RZ B
	"DB_MASTER_SERVER2" => array("host" => $DB_MASTER_SERVER2, "con" => null, "desc" => "Database Server in RZ B"),
	//Web/Provisioning Server in RZ A
	"WEB_MASTER_SERVER1" => array("host" => $WEB_MASTER_SERVER1, "con" => null, "desc" => "Web/Provisioning Server in RZ A"),
	//Web/Provisioning Server in RZ B
	"WEB_MASTER_SERVER2" => array("host" => $WEB_MASTER_SERVER2, "con" => null, "desc" => "Web/Provisioning Server in RZ B"),
	//Telephony Server in RZ A
	"TE_MASTER_SERVER1" => array("host" => $TE_MASTER_SERVER1, "con" => null, "desc" => "Telephony Server in RZ A (MASTER)"),
	"TE_MASTER_BACKUP1" => array("host" => $TE_MASTER_BACKUP1, "con" => null, "desc" => "Telephony Server in RZ A (BACKUP)"),
	//Telephony Server in RZ B
	"TE_MASTER_SERVER2" => array("host" => $TE_MASTER_SERVER2, "con" => null, "desc" => "Telephony Server in RZ B (MASTER)"),
	"TE_MASTER_BACKUP2" => array("host" => $TE_MASTER_BACKUP2, "con" => null, "desc" => "Telephony Server in RZ B (BACKUP)")
	);


_run_topology_tests($hosts);

if($only_run_tests) {
	echo "\nDone.\n";
	exit(1);
}

echo "\n\nTests Done.\n";

## Stage 1 Migrate Master
#
echo "\n\n Migrate the Master Server:\n\n";

$new_master=null;
$old_master=null;

if($CUR_RZ == 'A') {
	$old_master=$DB_MASTER_SERVER1_SERVICE_IP;
	$new_master=$DB_MASTER_SERVER2_SERVICE_IP;
}
else {
	$old_master=$DB_MASTER_SERVER2_SERVICE_IP;
	$new_master=$DB_MASTER_SERVER1_SERVICE_IP;
}

$ok = gs_db_master_migration($old_master, $new_master, $SUPER_MYSQL_USER, $SUPER_MYSQL_PASS);
if (isGsError( $ok )) {
	echo "ERROR:" .$ok->getMsg();
	exit(1);
	}

echo "\n\nMigration done.\n";
echo "\n\n====================\n\n";
## Stage 2 Resync Slaves
#
echo "Resyncing all Slaves with the new Master.\n";

foreach ( $hosts as $key => $host) {
	if($key == 'DB_MASTER_SERVER1' || $key == 'DB_MASTER_SERVER2') 
		continue; //One Master ist Still resynced and the other is Still the master
	echo $host['desc']."...\n ";
	if($CUR_RZ=='B' && $host['host'] == $DB_MASTER_SERVER1_SERVICE_IP) {
		echo "Skipping, cause' it's the same host of \$DB_MASTER_SERVER1_SERVICE_IP. This host dont need to be a slave of hisself";
		continue;
	}
	if($CUR_RZ=='A' && $host['host'] == $DB_MASTER_SERVER2_SERVICE_IP) {
		echo "Skipping, cause' it's the same host of \$DB_MASTER_SERVER2_SERVICE_IP This host dont need to be a slave of hisself\n";
		continue;
		}
		
	gs_db_setup_replication( $new_master, $host['host'], $SUPER_MYSQL_USER, $SUPER_MYSQL_PASS);
	if (isGsError( $ok )) {
		echo "ERROR:" .$ok->getMsg();
		exit(1);
	}
} // foreach ( $hosts as $key => $host)



## Stage 3 Move Service IPs of the Web-Services
#

## Stage 4 Edit gemeinschaft.php of each Host
#

foreach ($hosts as $key => $host) {
	$ok = _change_etc_gemeinschaft_php( $host['host'], $new_master );
	if (isGsError($ok)) {
		echo "ERROR: ", $ok->getMsg() ,"\n";
		exit(1);
	}
}

## Stage 5 Set $CUR_RZ to the new one
#


## Stage 6 Re-Run tests again
#

echo "\nDone.\n";
echo "The Current Operating RZ is: ". $CUR_RZ."\n";


?>


