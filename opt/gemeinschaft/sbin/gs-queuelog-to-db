#!/usr/bin/php -q
<?php
/*******************************************************************\
*            Gemeinschaft - asterisk cluster gemeinschaft
* 
* $Revision$
* 
* Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
* http://www.amooma.de/
* Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
* Philipp Kempgen <philipp.kempgen@amooma.de>
* Peter Kozak <peter.kozak@amooma.de>
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA 02110-1301, USA.
\*******************************************************************/


#####################################################################
#  Inserts Asterisk's queue log into the database.
#  Needs to be called by cron every minute or so.
#####################################################################

define( 'GS_VALID', true );  /// this is a parent file
require_once( dirName(__FILE__) .'/../inc/conf.php' );
include_once( GS_DIR .'inc/log.php' );
include_once( GS_DIR .'inc/db_connect.php' );
include_once( GS_DIR .'inc/find_executable.php' );
require_once( GS_DIR .'inc/quote_shell_arg.php' );


$lockfile = gs_get_conf('GS_LOCK_DIR').'gs-queuelog.lock';


function remove_lockfile()
{
	global $lockfile;
	
	if (@is_file($lockfile) && @is_writable($lockfile)) {
		@unlink($lockfile);
		@exec( 'rm -f '. qsa($lockfile) );
	}
}

if (! defined('E_STRICT')) define('E_STRICT', 2048);

function _err_handler( $type, $msg, $file, $line )
{
	switch ($type) {
		case E_NOTICE:
		case E_USER_NOTICE:
			if (error_reporting() != 0) {  # suppressed by @
				gs_log( GS_LOG_NOTICE, 'PHP: '. $msg .' in '. $file .' on line '. $line );
			}
			break;
		case E_STRICT:
			if (error_reporting() != 0) {
				gs_log( GS_LOG_DEBUG, 'PHP (Strict): '. $msg .' in '. $file .' on line '. $line );
			} else {  # suppressed by @
				gs_log( GS_LOG_DEBUG, 'PHP (strict): '. $msg .' in '. $file .' on line '. $line );
			}
			break;
		default:
			gs_log( GS_LOG_FATAL  , 'PHP: '. $msg .' in '. $file .' on line '. $line );
			remove_lockfile();
			exit(1);
	}
}

function process_log( $file )
{
	global $DB, $last_timestamp;
	
	$fh = fOpen( $file, 'rb' );
	if (! is_resource( $fh )) return false;
	
	while ($line = fGetS( $fh, 1000 )) {
		
		$r = log_line_to_db_entry( $line );
		if (! $r) continue;
		
		# don't insert the old entries again:
		if ((int)$r['ts'] < $last_timestamp) continue;
				
		//print_r($r);
		$query =
'INSERT INTO `queue_log` (
	`queue_id`,
	`timestamp`,
	`event`,
	`reason`,
	`ast_call_id`,
	`user_id`,
	`caller`,
	`pos`,
	`origpos`,
	`waittime`,
	`logindur`,
	`calldur`,
	`info`
) VALUES (
	'.   db_int_or_null($r['qid'     ]) .',
	'.             (int)$r['ts'      ]  .',
	\''.    $DB->escape($r['evt'     ]) .'\',
	'. db_quote_or_null($r['reason'  ]) .',
	'. db_quote_or_null($r['callid'  ]) .',
	'.   db_int_or_null($r['uid'     ]) .',
	'. db_quote_or_null($r['cid'     ]) .',
	'.   db_int_or_null($r['pos'     ]) .',
	'.   db_int_or_null($r['opos'    ]) .',
	'.   db_int_or_null($r['waittime']) .',
	'.   db_int_or_null($r['logindur']) .',
	'.   db_int_or_null($r['calldur' ]) .',
	'. db_quote_or_null($r['info'    ]) .'
)'
		;
		//gs_log(GS_LOG_DEBUG, $query);
		$DB->execute($query);
	}
	
	# remove the log file
	exec( 'rm -f '. qsa($file) .' >>/dev/null 2>>/dev/null' );
	return true;
}


function db_quote_or_null( $val )
{
	global $DB;
	
	return $val ? ('\''. $DB->escape($val) .'\'') : 'NULL';
}

function db_int_or_null( $val )
{
	global $DB;
	
	return $val ? (int)$val : 'NULL';
}

function log_line_to_db_entry( $line )
{
	$line = trim($line);
	if ($line=='') return false;
	
	$entry = explode('|', $line);
	@list( $ts, $callid, $queue, $iface, $evt, $d1, $d2, $d3, $d4 ) = $entry;
	if ($callid==='NONE' || $callid==='NULL') $callid = false;
	
	# get user id:
	$agent_ext = iface_to_agent_ext( $iface );
	$user_id = $agent_ext ? (int)user_ext_to_id( $agent_ext ) : false;
	
	# get queue id:
	$queue_id = queue_name_to_id( $queue );
	
	$row = array(
		'ts'    => $ts,
		'callid'=> $callid,
		'qid'   => $queue_id,
		'uid'   => $user_id,
		'evt'   => $evt,
		'reason'  => null,
		'cid'     => null,
		'pos'     => null,
		'opos'    => null,
		'waittime'=> null,
		'calldur' => null,
		'logindur'=> null,
		'info'    => null
	);
	
	switch ($evt) {
		case 'ENTERQUEUE':
			$row['evt'     ] = '_ENTER';
			$row['cid'     ] = $d2;
			break;
		case 'ABANDON':
			$row['evt'     ] = '_EXIT';
			$row['reason'  ] = 'ABANDON';
			$row['pos'     ] = $d1;
			$row['opos'    ] = $d2;
			$row['waittime'] = $d3;
			break;
		case 'CONNECT':
			$row['evt'     ] = '_CONNECT';
			$row['waittime'] = $d1;
			break;
		case 'COMPLETEAGENT':
			$row['evt'     ] = '_COMPLETE';
			$row['reason'  ] = 'AGENT';
			$row['waittime'] = $d1;
			$row['calldur' ] = $d2;
			$row['opos'    ] = $d3;
			break;
		case 'COMPLETECALLER':
			$row['evt'     ] = '_COMPLETE';
			$row['reason'  ] = 'CALLER';
			$row['waittime'] = $d1;
			$row['calldur' ] = $d2;
			$row['opos'    ] = $d3;
			break;
		case 'RINGNOANSWER':
			$row['evt'     ] = '_RINGNOANSWER';
			break;
		case 'AGENTDUMP':
			$row['evt'     ] = '_EXIT';
			$row['reason'  ] = 'DUMPED';
			break;
		case 'CONFIGRELOAD':
			# happens for asterisk -rx 'logger reload'
			# (right after rotating queue_log)
			$row['evt'     ] = '_CONFIGRELOAD';
			break;
		case 'AGENTLOGIN':
		case 'AGENTCALLBACKLOGIN':
			$row['evt'     ] = '_AGENTLOGIN';
			break;
		/*
		case 'ADDMEMBER':
			# cause by AddQueueMember() in the dialplan, by the
			# manager interface or by the CLI
			$row['evt'     ] = '_AGENTLOGIN';
			break;
		*/
		case 'AGENTLOGOFF':
			$row['evt'     ] = '_AGENTLOGOFF';
			$row['logindur'] = $d2;
			break;
		case 'AGENTCALLBACKLOGOFF':
			$row['evt'     ] = '_AGENTLOGOFF';
			$row['logindur'] = $d2;
			$row['reason'  ] = $d3;
			break;
		/*
		case 'REMOVEMEMBER':
			# cause by RemoveQueueMember() in the dialplan, by the
			# manager interface or by the CLI
			$row['evt'     ] = '_AGENTLOGOFF';
			break;
		*/
		case 'EXITWITHKEY':
			$row['evt'     ] = '_EXIT';
			$row['reason'  ] = 'KEY';
			$row['pos'     ] = $d2;
			break;
		case 'EXITEMPTY':
			$row['evt'     ] = '_EXIT';
			$row['reason'  ] = 'EMPTY';
			$row['pos'     ] = $d1;
			$row['opos'    ] = $d2;
			$row['waittime'] = $d3;
			break;
		case 'EXITWITHTIMEOUT':
			$row['evt'     ] = '_EXIT';
			$row['reason'  ] = 'TIMEOUT';
			$row['pos'     ] = $d1;
			break;
		case '_EXITFULL':  # a custom event
			$row['evt'     ] = '_EXIT';
			$row['reason'  ] = 'FULL';
			break;
		case 'SYSCOMPAT':
			$row['evt'     ] = '_COMPLETE';
			$row['reason'  ] = 'INCOMPAT';
			break;
		case 'TRANSFER':
			$row['evt'     ] = '_COMPLETE';
			$row['reason'  ] = 'TRANSFER';
			$row['waittime'] = $d3;
			$row['calldur' ] = $d4;
			$row['info'    ] = $d1.'@'.$d2;
			break;
		case 'QUEUESTART':
			$row['evt'     ] = '_QUEUESTART';
			break;
		/*
		default:
			# insert event name as is
			break;
		*/
	}
	
	return $row;
}

function queue_name_to_id( $name )
{
	global $DB;
	static $queues;
	
	if ($name==='NONE' || $name==='NULL') return false;
	if (! isSet( $queues[$name] )) {
		$id = (int)$DB->executeGetOne( 'SELECT `_id` FROM `ast_queues` WHERE `name`=\''. $DB->escape($name) .'\'' );
		$queues[$name] = ($id > 0) ? $id : false;
	}
	return $queues[$name];
}

function user_ext_to_id( $ext )
{
	global $DB;
	static $users;
	
	if (! isSet( $users[$ext] )) {
		$id = (int)$DB->executeGetOne( 'SELECT `_user_id` FROM `ast_sipfriends` WHERE `name`=\''. $DB->escape($ext) .'\'' );
		$users[$ext] = ($id > 0) ? $id : false;
	}
	return $users[$ext];
}

function iface_to_agent_ext( $interface )
{
	if (preg_match( '/^[^\/]*\/([\da-zA-Z]+)/', trim($interface), $m ))
		return $m[1];
	return false;
}





set_error_handler('_err_handler');

$current_euid = posix_geteuid();
if ($current_euid !== 0) {
	gs_log( GS_LOG_WARNING, "Must be run as root (you are $current_euid)." );
	echo "Must be run as root (you are $current_euid). Bye bye.\n";
	exit(1);
}
if (@file_exists($lockfile)) {
	$mtime = @fileMTime($lockfile);
	if ($mtime === false || $mtime > time()-(10*60)) {
		gs_log( GS_LOG_NOTICE, "\"$lockfile\" exists. Exit." );
		echo "\"$lockfile\" exists. Exit.\n";
		exit();
	}
	# else assume the file is just a leftover from a previous run
}
$lockdir = dirName($lockfile).'/';
if (! @is_dir($lockdir)) {
	gs_log( GS_LOG_WARNING, "\"$lockdir\" does not exist." );
	echo "\"$lockdir\" does not exist.\n";
	exit(1);
}
unset($lockdir);
if (! @touch($lockfile)) {
	gs_log( GS_LOG_WARNING, "Could not touch \"$lockfile\"." );
	echo "Could not touch \"$lockfile\". Exit.\n";
	exit(1);
}

$logrotate = find_executable( 'logrotate', array(
	'/usr/sbin/', '/usr/bin/', '/sbin/', '/bin/', '/usr/local/sbin/', '/usr/local/bin/'
));
if (! $logrotate) {
	gs_log( GS_LOG_WARNING, "Could not find logrotate" );
	echo "Could not find logrotate\n";
	exit(1);
}


$DB = gs_db_master_connect();
if (! $DB) {
	gs_log( GS_LOG_WARNING, "Could not connect to master database" );
	exit(1);
}

$last_timestamp = (int)$DB->executeGetOne( 'SELECT MAX(`timestamp`) FROM `queue_log`' );

# rotate the log file and tell asterisk to reopen the log file
$err=0; $out=array();
exec( escapeShellCmd($logrotate) .' -s /dev/null '. escapeShellArg(GS_DIR .'etc/logrotate-queues.conf') .' >>/dev/null 2>>/dev/null', $out, $err );

$files = glob('/var/log/asterisk/queue_log.*');
foreach ($files as $file) {
	process_log( $file );
}

@$DB->execute( 'ANALYZE TABLE `queue_log`' );

remove_lockfile();


?>