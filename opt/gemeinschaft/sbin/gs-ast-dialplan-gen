#!/usr/bin/php -q
<?php
/*******************************************************************\
*            Gemeinschaft - asterisk cluster gemeinschaft
* 
* $Revision$
* 
* Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
* http://www.amooma.de/
* Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
* Philipp Kempgen <philipp.kempgen@amooma.de>
* Peter Kozak <peter.kozak@amooma.de>
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA 02110-1301, USA.
\*******************************************************************/

define( 'GS_VALID', true );  /// this is a parent file
require_once( dirName(__FILE__) .'/../inc/conf.php' );
include_once( GS_DIR .'lib/getopt.php' );
//require_once( GS_DIR .'inc/remote-exec.php' );
require_once( GS_DIR .'inc/quote_shell_arg.php' );
//require_once( GS_DIR .'inc/find_executable.php' );
include_once( GS_DIR .'inc/log.php' );


$etc_asterisk = GS_DIR .'etc/asterisk/';
$gs_extensions_ael_filename = 'gs-extensions.ael';



$usage = 'Usage: '. baseName(__FILE__) .'';

$opts = @getOptsNoMultiples( '',
	array(
	),
	$usage
);

$only_dialplan = true;



function ael_file_realname( $file )
{
	global $etc_asterisk;
	return (@$file{0} === '/') ? $file : ($etc_asterisk . $file);
}

function ael_get_file_content( $file )
{
	if (! @file_exists( $file )) {
		gs_log( GS_LOG_WARNING, "File \"$file\" does not exist!" );
		return false;
	}
	if (! @is_readable( $file )) {
		gs_log( GS_LOG_WARNING, "File \"$file\" not readable!" );
		return false;
	}
	$content = @file_get_contents( $file );
	if (! is_string($content)) {
		gs_log( GS_LOG_WARNING, "Failed to read file \"$file\"!" );
		return false;
	}
	return $content;
}

$ael_include_stack = array();

function ael_get_log_indent( $level_adjust=0 )
{
	global $ael_include_stack;
	
	return str_repeat('| ', max( count($ael_include_stack)-2+$level_adjust, 0 ) ) /*.'+-'*/;
}

// evaluates and replaces "#include"s and "#exec"s in the
// content and returns the whole content
function ael_eval_includes( $content )
{
	global $ael_include_stack;
	
	$pattern = '/^[ \t]*#(include|exec)[ \t]+([^\n\r]*)/miS';
	$content = preg_replace_callback( $pattern, 'ael_eval_callback', $content );
	return $content;
}

function ael_eval_callback( $m )
{
	global $ael_include_stack;
	static $eval_cache = array();
	
	$directive = strToLower($m[1]);
	$filename = ael_file_realname( trim( $m[2], '"\'<>`´' ) );
	
	gs_log( GS_LOG_DEBUG, ael_get_log_indent(1) ./*"In ".*/ /*baseName(@$ael_include_stack[count($ael_include_stack)-1]) .": ".*/ "#$directive ". baseName($filename) ." ..." );
	
	$ret = '';
	
	$max_include_depth = 10;
	if (count($ael_include_stack) > $max_include_depth) {
		$reason_msg = "Not going to eval #$directive $filename. Max. include depth ($max_include_depth) reached!";
		echo "WARNING: $reason_msg"."\n";
		gs_log( GS_LOG_WARNING, ael_get_log_indent(1) ."$reason_msg" );
		$ret = "\n"."// WARNING: $reason_msg"."\n\n";
	}
	
	array_push( $ael_include_stack, $filename );
	
	if ($directive === 'include') {
		
		//gs_log( GS_LOG_DEBUG, ael_get_log_indent(0) ."Loading ".baseName($filename)." ..." );
		
		$content = ael_get_file_content( $filename );
		if (is_string($content)) {
			$ret = ael_eval_includes( $content );
		} else {
			if (! @file_exists($filename))
				$reason_msg = 'file not found';
			elseif (! @is_readable($filename))
				$reason_msg = 'file not readable';
			else
				$reason_msg = 'unknown error';
			
			$reason_msg = "Could not read included file \"$filename\" ($reason_msg)!";
			echo "WARNING: $reason_msg"."\n";
			gs_log( GS_LOG_WARNING, ael_get_log_indent(0) ."$reason_msg" );
			$ret = "\n"."// WARNING: $reason_msg"."\n\n";
		}
		
	} elseif ($directive === 'exec') {
		
		//gs_log( GS_LOG_DEBUG, ael_get_log_indent(0) ."Evaluating ".baseName($filename)." ..." );
		
		$cached = false;
		# cache lookup
		if (array_key_exists($filename, $eval_cache)) {
			//gs_log( GS_LOG_DEBUG, ael_get_log_indent(0) ."Loading #$directive ".baseName($filename)." (cached)" );
			$ret = $eval_cache[$filename];
			$cached = true;
		}
		
		if (! $cached) {
			$err=0; $out=array();
			@exec( escapeShellCmd($filename) .' 2>&1', $out, $err );
			if ($err === 0 && is_array($out)) {
				$ret = implode("\n", $out);
				$ret = ael_eval_includes( $ret );
				
				if (baseName($filename) === 'e-lang.ael.php') {
					# cache e-lang.ael.php because it will be loaded
					# another 5 times
					$eval_cache[$filename] = $ret;
				}
			} else {
				if ($err === 127 || ! file_exists($filename))
					$reason_msg = 'file not found';
				elseif (! is_readable($filename))
					$reason_msg = 'file not readable';
				elseif (! is_executable($filename))
					$reason_msg = 'file not executable';
				else
					$reason_msg = 'exit '.$err /*.' - '. implode(' - ',$out)*/;
				
				$reason_msg = "Could not exec included script \"$filename\" ($reason_msg)!";
				echo "WARNING: $reason_msg"."\n";
				gs_log( GS_LOG_WARNING, ael_get_log_indent(0) ."$reason_msg" );
				$ret = "\n"."// WARNING: $reason_msg"."\n\n";
			}
		}
		
	}
	
	array_pop( $ael_include_stack );
	return $ret;
}



echo "Generating extensions.ael ...\n";

$gs_extensions_ael_filename = ael_file_realname( $gs_extensions_ael_filename );
array_push( $ael_include_stack, $gs_extensions_ael_filename );
$content = ael_get_file_content( $gs_extensions_ael_filename );
$content = ael_eval_includes( $content );

$extensions_ael_filename = $etc_asterisk .'extensions.ael';



$f = @fOpen($extensions_ael_filename, 'wb');
if (! $f) {
	echo "ERROR: Could not open $extensions_ael_filename for writing!\n";
	exit(1);
}

$content =
"//------------------------------------------------------------------//\n".
"// ". str_pad('WRITTEN BY /opt/gemeinschaft/sbin/'. baseName(__FILE__), 64, ' ', STR_PAD_BOTH) ." //\n".
"// ". str_pad('DO NOT MAKE ANY CHANGES HERE!', 64, ' ', STR_PAD_BOTH) ." //\n".
"//------------------------------------------------------------------//\n".
"\n". $content;
@fWrite($f, $content, strLen($content));
@fClose($f);
echo "extensions.ael written.\n";


?>