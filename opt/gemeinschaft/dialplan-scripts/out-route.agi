#!/usr/bin/php -q
<?php
/*******************************************************************\
*            Gemeinschaft - asterisk cluster gemeinschaft
* 
* $Revision$
* 
* Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
* http://www.amooma.de/
* Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
* Philipp Kempgen <philipp.kempgen@amooma.de>
* Peter Kozak <peter.kozak@amooma.de>
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA 02110-1301, USA.
\*******************************************************************/

define( 'GS_VALID', true );  /// this is a parent file

ini_set('implicit_flush', 1);
ob_implicit_flush(1);

error_reporting(0);


function _no_more_routes( $idx=1 )
{
	echo 'SET VARIABLE r_'.$idx.'_dial' ."\n";
	die();
}

function _agi_str_esc( $str )
{
	return str_replace(
		array( "\n" , "\r" , "\t" , ' '   ),
		array( '\\ ', '\\ ', '\\ ', '\\ ' ),
		$str );
}

function _agi_verbose( $str, $level=1 )
{
	echo 'VERBOSE '. _agi_str_esc($str) .' '. (int)$level ."\n";
}


$number = ($argc > 1) ? trim($argv[1]) : '';
if ($number == '') {
	_agi_verbose("### Empty number");
	echo "HANGUP\n";
	_no_more_routes();
}
$is_sub_system = ($argc > 2) ? strToLower(trim($argv[2])) : '';
$is_sub_system = ($is_sub_system=='1' || $is_sub_system=='yes');


require_once( dirName(__FILE__) .'/../inc/conf.php' );
include_once( GS_DIR .'inc/db_connect.php' );


if (gs_get_conf('GS_CANONIZE_OUTBOUND')) {
	
	include_once( GS_DIR .'inc/canonization.php' );
	$canonical = new CanonicalPhoneNumber( $number );
	
	if (@$canonical->is_call_by_call) {
		_agi_verbose("### $number has a call-by-call prefix");
		echo "HANGUP\n";
		_no_more_routes();
	}
	elseif (@$canonical->in_prv_branch) {
		if ($is_sub_system) {
			# allow to go to the outside
			_agi_verbose("### $number is in private branch but we are a sub-system");
			$number_dial = trim( @$canonical->dial );
		} else {
			_agi_verbose("### $number is in private branch and we are not a sub-system");
			/*
			# don't dial to the outside
			echo "HANGUP\n";
			_no_more_routes();
			*/
			# dial our extension
			$exten = trim( @$canonical->extn );
			if ($exten != '') {
				echo "SET VARIABLE __is_from_gateway 1\n";
				$idx = 1;
				echo 'SET VARIABLE r_'.$idx.'_dial Local/'. $exten .'@to-internal-users' ."\n";
				_no_more_routes(++$idx);
			} else {
				_agi_verbose("### Empty number");
				echo "HANGUP\n";
				_no_more_routes();
			}
		}
	}
	else {
		$number_dial = trim( @$canonical->dial );
	}
	
	if ($number_dial == '') {
		_agi_verbose("### Empty number");
		echo "HANGUP\n";
		_no_more_routes();
	}
	
} else {
	$number_dial = $number;
}


$db = gs_db_slave_connect();
if (! $db) die(1);

$t = time();
$wd = strToLower(subStr(date('D', $t),0,2));
$hm = date('H:i', $t);

$rs = $db->execute(
'SELECT
	`pattern` `pat`,
	`gw_grp_id_1` `gg1`, `gw_grp_id_2` `gg2`, `gw_grp_id_3` `gg3`,
	`lcrprfx`
FROM `routes` USE INDEX(`active_'.$wd.'`)
WHERE
	`active`=1 AND `d_'.$wd.'`=1 AND
	`h_from`<=\''.$hm.'\' AND `h_to`>=\''.$hm.'\'
ORDER BY `ord`'
);
// we can't use MySQL's REGEXP comparison because it does not understand
// all of PCRE syntax
$have_match = false;
$lcr_prefix = '';
while ($route = $rs->fetchRow()) {
	if (@preg_match( '/'.$route['pat'].'/', $number_dial )) {
		$have_match = true;
		$lcr_prefix = $route['lcrprfx'];
		break;
	}
}
if (! $have_match) _no_more_routes();

$gate_grps = array();
if ($route['gg1'] != 0) $gate_grps[] = (int)$route['gg1'];
if ($route['gg2'] != 0) $gate_grps[] = (int)$route['gg2'];
if ($route['gg3'] != 0) $gate_grps[] = (int)$route['gg3'];
unset($route);
if (count($gate_grps) < 1) _no_more_routes();

$gates = array();
$idx = 1;
foreach ($gate_grps as $ggrp_id) {
	//$rs = $db->execute( 'SELECT * FROM `gate_grps` WHERE `id`='. $ggrp_id );
	
	$rs = $db->execute(
'SELECT `type`, `name`, `title`, `dialstr`
FROM `gates`
WHERE `grp_id`='. $ggrp_id .' AND `allow_out`=1
ORDER BY RAND()
LIMIT 8'
	);
	//while ($gate = $rs->fetchRow()) $gates[] = $gate;
	while ($gate = $rs->fetchRow()) {
		if ($lcr_prefix != '') {
			if (strToLower($gate['type']) === 'zap') {
				_agi_verbose("### LCR prefix: $lcr_prefix for gateway ". $gate['name'] );
				$number_final = $lcr_prefix . $number_dial;
			} else {
				_agi_verbose("### LCR prefix $lcr_prefix ignored for non-Zap gateway ". $gate['name'] );
				$number_final = $number_dial;
			}
		} else {
			$number_final = $number_dial;
		}
		$dialstr = str_replace(
			array( '{number}'  , '{peer}'      ),
			array( $number_final, $gate['name'] ),
			$gate['dialstr']
		);
		$dialstr = preg_replace('/[^\x21-\x7E]/', '', $dialstr);
		echo 'SET VARIABLE r_'.$idx.'_dial '.$dialstr ."\n";
		++$idx;
	}
}
_no_more_routes($idx);


?>