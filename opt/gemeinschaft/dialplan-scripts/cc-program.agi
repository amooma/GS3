#!/usr/bin/php -q
<?php
/*******************************************************************\
*            Gemeinschaft - asterisk cluster gemeinschaft
* 
* $Revision$
* 
* Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
* http://www.amooma.de/
* Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
* Philipp Kempgen <philipp.kempgen@amooma.de>
* Peter Kozak <peter.kozak@amooma.de>
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA 02110-1301, USA.
\*******************************************************************/

define( 'GS_VALID', true );  /// this is a parent file
require_once( dirName(__FILE__) .'/../inc/conf.php' );
require_once( GS_DIR .'inc/agi-fns.php' );

ini_set('implicit_flush', 1);
ob_implicit_flush(1);


$from_ext = trim(@$argv[1]);
$to_ext   = trim(@$argv[2]);

if (! $from_ext || ! preg_match('/^\d+$/', $from_ext)) {  // is not just digits
	gs_agi_set_variable( 'cc_programmed', '0' );
	exit();
}
if (! $to_ext || ! preg_match('/^\d+$/', $to_ext)) {  // is not just digits
	gs_agi_set_variable( 'cc_programmed', '0' );
	exit();
}
if ($from_ext == $to_ext) {
	gs_agi_set_variable( 'cc_programmed', '0' );
	exit();
}


include_once( GS_DIR .'inc/db_connect.php' );
include_once( GS_DIR .'inc/extension-state.php' );
include_once( GS_DIR .'inc/log.php' );


$db = gs_db_master_connect();
if (! $db) {
	gs_agi_set_variable( 'cc_programmed', '0' );
	exit();
}

$rs = $db->execute(
'SELECT `u`.`id`, `u`.`host_id`, `h`.`host`
FROM
	`ast_sipfriends` `s` JOIN
	`users` `u` ON (`u`.`id`=`s`.`_user_id`) JOIN
	`hosts` `h` ON (`h`.`id`=`u`.`host_id`)
WHERE `s`.`name`=\''. $db->escape($from_ext) .'\''
);
if (! ($from_user = $rs->fetchRow())) {
	gs_agi_set_variable( 'cc_programmed', '0' );
	gs_log( GS_LOG_WARNING, 'Failed to program CC - extension "'. $from_ext .'" unknown.' );
	exit();
}

$state = @ gs_extstate( $from_user['host'], $from_ext );
if (! gs_ast_extstate_offer_cc( $state )) {
	//gs_agi_verbose( "State: $state" );
	gs_agi_set_variable( 'cc_programmed', '0' );
	gs_log( GS_LOG_WARNING, 'Failed to program CC - extension "'. $from_ext .'" is in unknown state.' );
	exit();
}


$rs = $db->execute(
'SELECT `u`.`id`, `u`.`host_id`, `h`.`host`
FROM
	`ast_sipfriends` `s` JOIN
	`users` `u` ON (`u`.`id`=`s`.`_user_id`) JOIN
	`hosts` `h` ON (`h`.`id`=`u`.`host_id`)
WHERE `s`.`name`=\''. $db->escape($to_ext) .'\''
);
if (! ($to_user = $rs->fetchRow())) {
	gs_agi_set_variable( 'cc_programmed', '0' );
	gs_log( GS_LOG_WARNING, 'Failed to program CC - extension "'. $to_ext .'" unknown.' );
	exit();
}

$state = @ gs_extstate( $to_user['host'], $to_ext );
if (! @gs_ast_extstate_offer_cc( $state )) {
	gs_agi_set_variable( 'cc_programmed', '0' );
	gs_log( GS_LOG_WARNING, 'Failed to program CC - extension "'. $to_ext .'" is in unknown state.' );
	exit();
}


$ok = @ $db->execute( 'REPLACE INTO `call_completion_waiting` (`from_ext`, `from_host_id`, `from_user_id`, `to_ext`, `to_host_id`, `to_user_id`, `t_init`) VALUES (\''. $db->escape($from_ext) .'\', '. (int)$from_user['host_id'] .', '. (int)$from_user['id'] .', \''. $db->escape($to_ext) .'\', '. (int)$to_user['host_id'] .', '. (int)$to_user['id'] .', '. time() .')' );
if (! $ok) {
	gs_agi_set_variable( 'cc_programmed', '0' );
	gs_log( GS_LOG_WARNING, 'Failed to program CC - DB error.' );
	exit();
}

gs_agi_set_variable( 'cc_programmed', '1' );
gs_log( GS_LOG_DEBUG, 'CC programmed from "'. $from_ext .'" to "'. $to_ext .'"' );


?>