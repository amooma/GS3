#!/usr/bin/php -q
<?php
/*******************************************************************\
*            Gemeinschaft - asterisk cluster gemeinschaft
* 
* $Revision$
* 
* Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
* http://www.amooma.de/
* Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
* Philipp Kempgen <philipp.kempgen@amooma.de>
* Peter Kozak <peter.kozak@amooma.de>
* 
* Author: Henning Holtschneider <henning@loca.net>
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA 02110-1301, USA.
\*******************************************************************/

define( 'GS_VALID', true );  /// this is a parent file
require_once( dirName(__FILE__) .'/../inc/conf.php' );
include_once( GS_DIR .'lib/getopt.php' );
include_once( GS_DIR .'inc/gs-lib.php' );
include_once( GS_DIR .'inc/quote_shell_arg.php' );
include_once( GS_DIR .'inc/gs-fns/gs_ami_events.php' );

/***********************************************************
*    the shell parameters
***********************************************************/
$usage = 'Usage: '. baseName(__FILE__) .' --agent=<regex>|--queue=<queue>';

$opts = @getOptsNoMultiples( '',
	array(
		'agent=',
		'queue='
	),
	$usage
);
if ( (!isSet($opts['agent'])) && (!isSet($opts['queue'])) ) {
	gs_script_invalid_usage( $usage );
}

# connect to db
#
$db = gs_db_master_connect();
if (! $db) {
	echo "Could not connect to database.\n";
	exit(1);
}

if (isSet($opts['agent'])) {

	# remove agents provided on command line from all queues
	#
	
	$rs = $db->execute( 'SELECT `agents`.`number` AS `number`, `agents`.`user_id` AS `user_id`, `ast_sipfriends`.`name` AS `user_name` FROM `agents`, `ast_sipfriends` WHERE `number` LIKE \'' . $opts['agent'] . '\' AND `agents`.`user_id` = `ast_sipfriends`.`_user_id`');
	if (! $rs) {
		echo "Agent(s) not found.\n";
		exit(1);
	}
	
	if ($rs->numRows() > 0) {
		while ($r = $rs->fetchRow()) {
			if (! $db->execute( 'DELETE FROM `ast_queue_members` WHERE `_user_id` = ' . $r['user_id'] ) ) {
				echo "Error!\n";
				exit(1);
			}
			
			if (! $db->execute( 'UPDATE `agents` SET `user_id` = 0 WHERE `number` = \'' . $r['number'] . '\'' ) ) {
				echo "Error!\n";
				exit(1);
			}
			gs_queue_logoff_ui( $r['user_name'], '*' );
			gs_agent_logoff_ui( $r['number'] );
		}
	}
	
	echo $rs->numRows() . ' agent' . ($rs->numRows() != 1 ? 's' : '') . ' logged off' . "\n";
	exit(0);

} else {
	
	# remove all agents from the queues provided on command line
	#
	
	$rs = $db->execute( 'SELECT `ast_queue_members`.`_user_id` AS `user_id`, `ast_sipfriends`.`name` AS `user_name`, `agents`.`number` FROM `ast_queue_members`, `ast_sipfriends`, `agents` WHERE `queue_name` = \'' . $opts['queue'] . '\' AND `ast_queue_members`.`_user_id` = `ast_sipfriends`.`_user_id` AND `ast_queue_members`.`_user_id` = `agents`.`user_id`');
	if (! $rs) {
		echo "No agents found in queue(s).\n";
		exit(1);
	}
	
	if ($rs->numRows() > 0) {
		while ($r = $rs->fetchRow()) {
			if (! $db->execute( 'DELETE FROM `ast_queue_members` WHERE `_user_id` = ' . $r['user_id'] ) ) {
				echo "Error!\n";
				exit(1);
			}
			
			if (! $db->execute( 'UPDATE `agents` SET `user_id` = 0 WHERE `number` = \'' . $r['number'] . '\'' ) ) {
				echo "Error!\n";
				exit(1);
			}
			gs_queue_logoff_ui( $r['user_name'], '*' );
			gs_agent_logoff_ui( $r['number'] );
		}
	}
	
	echo $rs->numRows() . ' agent' . ($rs->numRows() != 1 ? 's' : '') . ' logged off' . "\n";
	exit(0);
	
}
?>