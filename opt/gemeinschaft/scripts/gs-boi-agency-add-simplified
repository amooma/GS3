#!/usr/bin/php -q
<?php
/*******************************************************************\
*            Gemeinschaft - asterisk cluster gemeinschaft
* 
* $Revision$
* 
* Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
* http://www.amooma.de/
* Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
* Philipp Kempgen <philipp.kempgen@amooma.de>
* Peter Kozak <peter.kozak@amooma.de>
* Soeren Sprenger <soeren.sprenger@amooma.de>
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA 02110-1301, USA.
\*******************************************************************/

define( 'GS_VALID', true );  /// this is a parent file

require_once( dirName(__FILE__) .'/../inc/conf.php' );
include_once( GS_DIR .'lib/getopt.php' );
include_once( GS_DIR .'inc/gs-lib.php' );
include_once( GS_DIR .'inc/gs-fns/gs_host_foreign_add.php' );
include_once( GS_DIR .'inc/gs-fns/gs_ldap_user_search.php' );
include_once( GS_DIR .'inc/gs-fns/gs_user_add.php' );

/***********************************************************
*    the shell parameters
***********************************************************/
//$usage = 'Usage: '. baseName(__FILE__) .' --host=<ip|dns_name> --comment=<host_comment> --prefix=<prefix> --group=<user_group_id> --user=<username> --exten=<exten> [--is-admin]';
$usage = 'Usage: '. baseName(__FILE__) .' --host=<ip|dns_name> --comment=<host_comment> --prefix=<prefix> --user=<username> --exten=<exten> --group=0|<user_group_id> [--is-admin]';

$opts = @getOptsNoMultiples( '',
	array(
		'host=',
		'comment=',
		'prefix=',
		'user=',
		'exten=',
		'group=',
		'is-admin'
	),
	$usage
);
if (! isSet($opts['host'])
 || ! isSet($opts['comment'])
 || ! isSet($opts['prefix'])
 || ! isSet($opts['user'])
 || ! isSet($opts['exten'])
 || ! isSet($opts['group'])
 ) {
	gs_script_invalid_usage( $usage );
}

$opts['is-admin'] = array_key_exists('is-admin', $opts);

if (! array_key_exists('group', $opts)) {
	$opts['group'] = null;
} else {
	$opts['group'] = (int)$opts['group'];
	if ($opts['group'] < 1)
		$opts['group'] = null;
}


if (! gs_get_conf('GS_BOI_ENABLED')) {
	echo 'Branch office integration not enabled.' ,"\n";
	exit(1);
}


/***********************************************************
*    connect to database
***********************************************************/

$db = gs_db_master_connect();
if (! $db) {
	echo 'Could not connect to database.' ,"\n";
	exit(1);
}


/***********************************************************
*    resolve hostname if necessary
***********************************************************/

$opts['host'] = normalizeIPs($opts['host']);
if (! preg_match('/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/', $opts['host'])) {
	# not an IP address. => resolve hostname
	$addresses = @gethostbynamel($opts['host']);
	
	if (count($addresses) < 1) {
		echo 'Could not resolve hostname: ', $opts['host'] ,"\n";
		exit(1);
	} elseif (count($addresses) > 1) {
		echo 'Hostname ', $opts['host'] ,' cannot be used because it\'s resolved to more than one IP addr.' ,"\n";
		exit(1);
	} elseif (count($addresses) == 1) {
		if (strlen($addresses[0]) == 0) {
			echo 'Could not resolve hostname: ', $opts['host'] ,"\n";
			exit(1);
		}
		$opts['host'] = $addresses[0];
	}
}


/***********************************************************
*    check if host exists
***********************************************************/

$rs = $db->execute( 'SELECT `id`, `is_foreign` FROM `hosts` WHERE `host`=\''. $db->escape($opts['host']) .'\'' );
if (! $rs) {
	echo "DB error.\n";
	exit(1);
}
if ($host_info = $rs->getRow()) {
	if (! $host_info['is_foreign']) {
		echo "Host found but it's not a foreign host.\n";
		exit(1);
	}
	echo "Host already exist. Continuing ...\n";
	$host_id = (int)$host_info['id'];
	unset($host_info);
}
else {
	$host_id = 0;
}


/***********************************************************
*    add the host
***********************************************************/

if ($host_id < 1) {
	echo "Adding host ...\n";
	$host_group_id = (int)(substr($opts['prefix'],0,3).'00');
	$ret = @ gs_host_foreign_add( $opts['host'], $opts['comment'], $host_group_id, $opts['prefix'] );
	if (isGsError($ret)) gs_script_error( $ret->getMsg() );
	if (! $ret)          gs_script_error();
}

/***********************************************************
*    get user info from LDAP
***********************************************************/

$GS_LDAP_HOST = gs_get_conf('GS_LDAP_HOST');
if (in_array($GS_LDAP_HOST, array(null, false, '', '0.0.0.0'), true)) {
	echo "This script need LDAP but LDAP is not configured.\n";
	exit(1);
}

# get info from LDAP
$user_info = gs_ldap_user_search( $opts['user'] );
if (isGsError($user_info))  gs_script_error( $user_info->getMsg() );
if (! is_array($user_info)) gs_script_error();

# generate pin
$pin = mt_rand(100000,999999);


/***********************************************************
*    add the user
***********************************************************/

$ret = @ gs_user_add( $opts['user'], $opts['exten'], $pin, $user_info['fn'], $user_info['ln'], $opts['host'], $user_info['email'], $opts['group'] );
if (isGsError($ret)) gs_script_error( $ret->getMsg() );
if (! $ret)          gs_script_error();
echo "User added.\n";


/***********************************************************
*    if required add user to local branch office admins
***********************************************************/

if ($opts['is-admin']) {
	
	if ($host_id < 1) {
		$host_id = (int)$db->executeGetOne( 'SELECT `id` FROM `hosts` WHERE `host`=\''. $db->escape($opts['host']) .'\'' );
		if ($host_id < 1) {
			echo "DB error.\n";
			exit(1);
		}
	}
	
	$user_id = (int)$db->executeGetOne( 'SELECT `id` FROM `users` WHERE `user`=\''. $db->escape($opts['user']) .'\'' );
	if ($user_id < 1) {
		echo "User not found.\n";
		exit(1);
	}
	
	$ok = $db->execute( 'REPLACE INTO `boi_perms` (`user_id`, `host_id`, `roles`) VALUES ('. $user_id .', '. (int)$host_id .', \'l\')' );
	if (! $ok) {
		echo "Failed to set local admin permissions.\n";
		exit(1);
	}
	echo "Made user '",$opts['user'],"' a local admin on host ",$opts['host'],".\n";
}


echo "Done.\n";

?>