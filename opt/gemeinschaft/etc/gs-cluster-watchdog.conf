<?php
/*******************************************************************\
*            Gemeinschaft - asterisk cluster gemeinschaft
* 
* $Revision$
* 
* Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
* http://www.amooma.de/
* Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
* Philipp Kempgen <philipp.kempgen@amooma.de>
* Peter Kozak <peter.kozak@amooma.de>
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA 02110-1301, USA.
\*******************************************************************/


# Seconds to sleep between checks
define('SLEEP_SECONDS', 2);

# Seconds to wait for SIP response
define('SIP_TIMEOUT', 4);

# Retries needed to act
define('RETRY', 2);

# Minutes after a node is set from FAILED to NORMAL
define('REC_PERIOD', 120);

# Main directory
defined('GS_DIR') or define('GS_DIR', '/opt/gemeinschaft/');

# File where node states are saved
define('DATAFILE', GS_DIR .'etc/gs-cluster-watchdog.data');

# File to write log to
define('LOGFILE', '/var/log/gs-cluster-watchdog.log');

# File to append taken IPs to. DO NOT CHANGE!
define('IPFILE', GS_DIR .'etc/listen-to-ip');


define('STAT_NORMAL', 0);  # DO NOT CHANGE!
define('STAT_FAILED', 1);  #  "
define('STAT_TAKEN' , 2);  #  "

# NOT USED YET:
# Extension to call on local system in case of ALARM
define('ALARM_EXTEN', 'systemalarm');

# NOT USED YET:
# Email adress used in case of ALARM 
define('ALARM_EMAIL', 'peter.kozak@amooma.com');


$node = array();
function define_node( $static_ip, $dynamic_ip, $netmask, $broadcast, $local_interface, $remote_interface )
{
	global $node;
	$node[] = array(
		'pid'             => NULL,
		'dynamic_ip'      => $dynamic_ip,
		'static_ip'       => $static_ip,
		'netmask'         => $netmask,
		'broadcast'       => $broadcast,
		'local_interface' => $local_interface,
		'remote_interface'=> $remote_interface,
		'extension'       => 'checkalive',
		'tries'           => '0',
		'status'          => '0',
		'timestamp'       => '0'
	);
}


###################################
# Define your asterisk nodes here #
###################################

# Node 0 is always the master (= hot spare)
define_node(
	/* stat_ip    */  '192.168.1.2',
	/* dyn_ip     */  '192.168.1.2',
	/* netmask    */  '255.255.255.0',
	/* broadcast  */  '192.168.1.255',
	/* local_int  */  'eth0',
	/* remote_int */  'eth0'
);

# definition of node 1 
define_node(
	/* stat_ip    */  '192.168.1.3',
	/* dyn_ip     */  '192.168.1.5',
	/* netmask    */  '255.255.255.0',
	/* broadcast  */  '192.168.1.255',
	/* local_int  */  'eth0:2',
	/* remote_int */  'eth0:1'
);

# Definition of node 2
define_node(
	/* stat_ip    */  '192.168.1.4',
	/* dyn_ip     */  '192.168.1.6',
	/* netmask    */  '255.255.255.0',
	/* broadcast  */  '192.168.1.255',
	/* local_int  */  'eth0:3',
	/* remote_int */  'eth0:5'
);


?>