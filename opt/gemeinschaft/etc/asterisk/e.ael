//---------------------------------------------------------------------
//            Gemeinschaft - asterisk cluster gemeinschaft
// 
// $Revision$
// 
// Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
// http://www.amooma.de/
// Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
// Philipp Kempgen <philipp.kempgen@amooma.de>
// Peter Kozak <peter.kozak@amooma.de>
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA 02110-1301, USA.
//---------------------------------------------------------------------


//---------------------------------------------------------------------
//  Globals
//---------------------------------------------------------------------

globals {
	#include "/opt/gemeinschaft/etc/asterisk/e-globals.ael"
};


//---------------------------------------------------------------------
//  Macro to get or generate a "connection ID"
//---------------------------------------------------------------------

macro pass-connid() {
	// generates a "connection ID" to be used in a custom X-Org-ConnID header.
	// sets ${connid}.
	if ("${connid_enabled}" = "1") {
		if ("${connid}" = "") {
			if ("${CHANNEL(channeltype)}" = "SIP") {
				if ("${SIP_HEADER(X-Org-ConnID)}" != "") {
					Set(__connid=${SIP_HEADER(X-Org-ConnID)});
					Verbose(1,### Received ConnID: ${connid});
				}
			}
			if ("${connid}" = "") {
				Set(__connid=${STRFTIME(,,%Y%m%d-%H%M%S)}-${CUT(UNIQUEID,.,2-)}-${system_ip}-${RAND(100000000,999999999)});
				// e.g. 20080923-080136-5-192.168.1.130-380845309
				Verbose(1,### Generated ConnID: ${connid});
			}
		}
		Set(CDR(x_connid)=${connid});
		Set(__SIPADDHEADER_connid=X-Org-ConnID: ${connid});
	}
}


//---------------------------------------------------------------------
//  Macro to signal dialstatus
//---------------------------------------------------------------------

macro hangup-proper-status() {
	Verbose(1,### DIALSTATUS: ${DIALSTATUS});
	if ("${DIALSTATUS}" = "BUSY") {
		//Busy(3);
		// 17 = AST_CAUSE_USER_BUSY => SIP 486 Busy here
		Set(PRI_CAUSE=17);
		Hangup(17);
	} else if ("${DIALSTATUS}" = "CHANUNAVAIL") {
		//Congestion(3);
		// 27 = AST_CAUSE_DESTINATION_OUT_OF_ORDER => SIP 502 Bad Gateway
		Set(PRI_CAUSE=27);
		Hangup(27);
	} else if ("${DIALSTATUS}" = "CONGESTION") {
		//Congestion(3);
		// 34 = AST_CAUSE_CONGESTION => SIP 503 Service Unavailable
		Set(PRI_CAUSE=34);
		Hangup(34);
	}
	Hangup();
}


//---------------------------------------------------------------------
//  check if a certain number should be treated as internal even
//  if it's not internal to Gemeinschaft
//---------------------------------------------------------------------

macro is_dmz( is_dmz_num ) {
	// callerid(num) for incoming calls or dialed number for outgoing
	//if ("${is_dmz_num:0:1}" = "0" || "${is_dmz_num:0:2}" = "60") {
	//	// from PSTN or branch office => external
	if ("${is_dmz_num:0:1}" = "0") {
		Set(is_dmz=);
	}
	else {
		// everything else (even from the gateway) => internal
		Set(is_dmz=1);
	}
}


//---------------------------------------------------------------------
//  User Login Macro
//---------------------------------------------------------------------

macro cmm-login( new_user_name ) {
	
	Set(CDR(amaflags)=OMIT);
	Answer();
	AGI(/opt/gemeinschaft/dialplan-scripts/cmm-check-user.agi,${new_user_name},${is_from_gateway});
	//NoOp(### AGI returned: ret = ${ret});
	if ("${ret}" != "1")
		goto unknown;
	
	Wait(1);
	Read(pass,agent-pass,10,s,3,5);
	AGI(/opt/gemeinschaft/dialplan-scripts/cmm-login.agi,${new_user_name},${pass},${user_id},${is_from_gateway},${CALLERID(num)});
	//NoOp(### AGI returned: ret = ${ret});
	if ("${ret}" = "error")
		goto error;
	if ("${ret}" != "ok")
		goto unknown;
	
	//Playback(agent-loginok);
	Playback(/opt/gemeinschaft/sounds/de-DE/sie-sind-jetzt-angemeldet);
	Playback(/opt/gemeinschaft/sounds/de-DE/bitte-warten-sie);
	TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ext='${new_user_name}');
	if ("${user_name}" != "${new_user_name}") {
		if ("${user_name}" != "") {
			TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ext='${user_name}');
		} else {
			TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ext='${CALLERID(num)}');
		}
	}
	if ("${new_phone_ip}" != "") {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${new_phone_ip}');
	}
	if ("${old_phone_ip}" != "" && "${old_phone_ip}" != "${new_phone_ip}") {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${old_phone_ip}');
	}
	if ("${CHANNEL(channeltype)}" = "SIP") {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${SIPCHANINFO(peerip)}');
		if ("${SIPCHANINFO(recvip)}" != "${SIPCHANINFO(peerip)}") {
			TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${SIPCHANINFO(recvip)}');
		}
	}
	
	Hangup();
	
	unknown:
		Wait(1);
		Playback(vm-incorrect&vm-goodbye);
		Wait(0.5);
		Hangup();
	
	error:
		Playback(tt-somethingwrong);
		Wait(0.5);
		Hangup();
}


//---------------------------------------------------------------------
//  User Logout Macro
//---------------------------------------------------------------------

macro cmm-logout() {
	
	Set(CDR(amaflags)=OMIT);
	Answer();
	Wait(0.5);
	AGI(/opt/gemeinschaft/dialplan-scripts/cmm-logout.agi,${user_id},${is_from_gateway},${CALLERID(num)});
	//Playback(agent-loggedoff&vm-goodbye);
	Playback(/opt/gemeinschaft/sounds/de-DE/sie-sind-abgemeldet);
	Playback(/opt/gemeinschaft/sounds/de-DE/bitte-warten-sie);
	if ("${user_name}" != "") {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ext='${user_name}');
	} else {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ext='${CALLERID(num)}');
	}
	if ("${old_phone_ip}" != "") {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${old_phone_ip}');
	}
	if ("${CHANNEL(channeltype)}" = "SIP") {
		if ("${SIPCHANINFO(peerip)}" != "${old_phone_ip}") {
			TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${SIPCHANINFO(peerip)}');
		}
		if ("${SIPCHANINFO(recvip)}" != "${old_phone_ip}" && "${SIPCHANINFO(recvip)}" != "${SIPCHANINFO(peerip)}") {
			TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${SIPCHANINFO(recvip)}');
		}
	}
	
	Hangup();	
}


//---------------------------------------------------------------------
//  User Login/Logout context
//---------------------------------------------------------------------

context cmm {
	
	*0*  => &cmm-logout();
	_*0. => &cmm-login(${EXTEN:2});
}


//---------------------------------------------------------------------
//  Conferences (MeetMe)
//---------------------------------------------------------------------

context to-conferences {
	
	_88000 => {
		Set(confprefix=${EXTEN:0:2});
		jump c-empty@to-conferences;
	}
	_880000 => {
		Set(confprefix=${EXTEN:0:2});
		jump c-empty@to-conferences;
	}
	c-empty => {
		Set(confnum=0);
		Verbose(1,### Trying to enter new empty conference);
		&pass-connid();
		if ("${user_id}" != "") {
			// from internal user, store dial log (out)
			&dial-log-store(${user_name},out,${confprefix}${confnum});
		}
		// try at most 40 times:
		for (i=0; ${i}<40; i=${i}+1) {
			Set(confnum=${RAND(100,999)});
			Verbose(1,### Searching empty conference - trying ${confprefix}${confnum});
			// find where the conference is or claim it:
			AGI(/opt/gemeinschaft/dialplan-scripts/conf-get-where.agi,${confprefix}${confnum});
			if ("${exttype}" != "conference") {
				Verbose(1,### Something bad happened. Conference ${confprefix}${confnum} is of type "${exttype}");
				Congestion(3);
				Hangup();
			}
			if ("${dial_to_node}" = "") {
				// found an empty conference
				Verbose(1,### Found an empty conference: ${confprefix}${confnum});
				Playback(conf-enteringno);
				SayDigits(${confprefix}${confnum});
				//MeetMe(${confnum},DcoT);
				//Hangup();
				goto to-conferences-self|${confprefix}${confnum}|1;
			}
		}
		Verbose(1,### Tried $i{i} times but could not find empty conference);
		Playback(beeperr);
		Congestion(3);
		Hangup();
	}
	
	_88XXX => {
		Set(confprefix=${EXTEN:0:2});
		jump c-${EXTEN:2}@to-conferences;
	}
	_88XXXX => {
		Set(confprefix=${EXTEN:0:2});
		jump c-${EXTEN:2}@to-conferences;
	}
	_c-XX. => {
		Set(confnum=${EXTEN:2});
		Verbose(1,### Call to conference ${confprefix}${confnum});
		&pass-connid();
		if ("${user_id}" != "") {
			// from internal user, store dial log (out)
			&dial-log-store(${user_name},out,${confprefix}${confnum});
		}
		// find where the conference is or claim it:
		AGI(/opt/gemeinschaft/dialplan-scripts/conf-get-where.agi,${confprefix}${confnum});
		if ("${exttype}" != "conference") {
			Verbose(1,### Something bad happened. Conference ${confprefix}${confnum} is of type "${exttype}");
			Congestion(3);
			Hangup();
		}
		if ("${dial_to_node}" = "") {
			Verbose(1,### Conference ${confprefix}${confnum} is at node: SELF);
			goto to-conferences-self|${confprefix}${confnum}|1;
		}
		else {
			&dial-node(${confprefix}${confnum}@${dial_to_node});
			&hangup-proper-status();
		}
	}
	
}

context to-conferences-self {
	
	/*
	_88000 => {
		Set(confprefix=${EXTEN:0:2});
		jump c-empty@to-conferences;
	}
	*/
	_88XXX => {
		Set(confprefix=${EXTEN:0:2});
		jump c-${EXTEN:2}@to-conferences-self;
	}
	_88XXXX => {
		Set(confprefix=${EXTEN:0:2});
		jump c-${EXTEN:2}@to-conferences-self;
	}
	/*
	c-empty => {
		Verbose(1,### Trying to enter new empty conference);
		//MeetMe(${confnum},eD);
		Answer();
		for (i=100; ${i}<999; i=${i}+1) {
			Verbose(1,### Trying to find empty conference - ${i});
			MeetMeCount(${i},cnt);
			if (${cnt} < 1) {
				Verbose(1,### Found empty conference: ${i});
				Playback(conf-enteringno);
				SayDigits(${confprefix}${i});
				MeetMe(${i},DcoT);
				Hangup();
			}
		}
		Verbose(1,### Could not find empty conference);
		Playback(beeperr);
		Congestion(3);
		Hangup();
	}
	*/
	_c-XX. => {
		Set(confnum=${EXTEN:2});
		Verbose(1,### Entering conference ${confprefix}${confnum});
		&pass-connid();
		Answer();
		Wait(0.5);
		MeetMe(${confnum},DcoT);
		Hangup();
	}
	
}


//---------------------------------------------------------------------
//  Queue Login/Logout
//---------------------------------------------------------------------

macro queue-login( queue ) {
	
	Set(CDR(amaflags)=OMIT);
	Answer();
	Verbose(1,### User ${user_name} wants to log in to queue ${queue});
	
	/*
	Verbose(1,### Deactivate any forwards of user ${user_name});
	&usercode-by-ext(${user_name});
	if ("${user_code}" = "")
		Hangup();
	TrySystem(/opt/gemeinschaft/scripts/gs-callforward-activate --user='${user_code}' --source='internal' --case='always' --active='no');
	TrySystem(/opt/gemeinschaft/scripts/gs-callforward-activate --user='${user_code}' --source='internal' --case='busy' --active='no');
	TrySystem(/opt/gemeinschaft/scripts/gs-callforward-activate --user='${user_code}' --source='internal' --case='unavail' --active='no');
	TrySystem(/opt/gemeinschaft/scripts/gs-callforward-activate --user='${user_code}' --source='internal' --case='offline' --active='no');
	TrySystem(/opt/gemeinschaft/scripts/gs-callforward-activate --user='${user_code}' --source='external' --case='always' --active='no');
	TrySystem(/opt/gemeinschaft/scripts/gs-callforward-activate --user='${user_code}' --source='external' --case='busy' --active='no');
	TrySystem(/opt/gemeinschaft/scripts/gs-callforward-activate --user='${user_code}' --source='external' --case='unavail' --active='no');
	TrySystem(/opt/gemeinschaft/scripts/gs-callforward-activate --user='${user_code}' --source='external' --case='offline' --active='no');
	
	Verbose(1,### Log user ${user_name} in to queue ${queue});
	*/
	AGI(/opt/gemeinschaft/dialplan-scripts/queue-login-logout.agi,${user_name},${queue},login);
	if ("${agent_login_status}" = "loggedin") {
		// fake login for the statistics:
		QueueLog(NONE,${UNIQUEID},${CHANNEL(channeltype)}/${user_name},AGENTLOGIN,fake);
	}
	Verbose(1,### agent_login_status: ${agent_login_status});
	Wait(0.5);
	if ("${agent_login_status}" = "loggedin" || "${agent_login_status}" = "alreadyon") {
		Playback(agent-loginok);
	} else {
		Playback(beeperr);
	}
	Hangup();
	
}
macro queue-logout( queue ) {
	
	Set(CDR(amaflags)=OMIT);
	Answer();
	Verbose(1,### User ${user_name} wants to log out from queue ${queue});
	AGI(/opt/gemeinschaft/dialplan-scripts/queue-login-logout.agi,${user_name},${queue},logout);
	Wait(0.5);
	if ("${agent_login_status}" = "loggedout") {
		Playback(agent-loggedoff);
	} else {
		Playback(beeperr);
	}
	Hangup();
	
}
macro queue-logout-all() {
	
	Set(CDR(amaflags)=OMIT);
	Answer();
	Verbose(1,### User ${user_name} wants to log out from all queues);
	AGI(/opt/gemeinschaft/dialplan-scripts/queue-login-logout.agi,${user_name},0,logoutall);
	Wait(0.5);
	if ("${agent_login_status}" = "loggedout") {
		Playback(agent-loggedoff);
	} else {
		Playback(beeperr);
	}
	Hangup();
	
}
macro queue-logout-all-silent() {
	// like &queue-logout-all() but silent
	Set(CDR(amaflags)=OMIT);
	Verbose(1,### User ${user_name} wants to log out from all queues);
	AGI(/opt/gemeinschaft/dialplan-scripts/queue-login-logout.agi,${user_name},0,logoutall);
}
context queues-login-logout {
	
	*5*   => &queue-logout-all();
	_*5.  => &queue-login(${EXTEN:2});
	//_*5.* => &queue-logout(${EXTEN:2});  // does not work
	_*5X* => &queue-logout(${EXTEN:2:-1});
	_*5XX* => &queue-logout(${EXTEN:2:-1});
	_*5XXX* => &queue-logout(${EXTEN:2:-1});
	_*5XXXX* => &queue-logout(${EXTEN:2:-1});
	_*5XXXXX* => &queue-logout(${EXTEN:2:-1});
	_*5XXXXXX* => &queue-logout(${EXTEN:2:-1});
}


//---------------------------------------------------------------------
//  Voicemailbox
//---------------------------------------------------------------------

// Voicemail abfragen mit eigener Mailbox

context voicemail-self {
	
	voicemail => {
		//Set(CHANNEL(language)=en);  // derzeit notwendig da der dt. Sprachbaustein "eine" im Englischen fehlt
		Set(CDR(amaflags)=OMIT);
		Answer();
		Wait(0.5);
		VoiceMailMain(${user_name},s);
	}
	asterisk  => jump voicemail;
	mailbox   => jump voicemail;
	#include "/opt/gemeinschaft/etc/asterisk/e-number-vmm-self.ael"
}

// Voicemail abfragen mit beliebiger Mailbox

context voicemail-any {
	
	//_80. => {
	_vm-. => {
		Set(vmbox=${EXTEN:3});
		Set(CDR(amaflags)=OMIT);
		Verbose(1,### Check mailbox ${vmbox});
		&check-valid-extension(${vmbox});
		if ("${dial_to_node}" = "") {
			Verbose(1,### VM box ${vmbox} is at node: SELF);
			goto voicemail-any-self|vm-${vmbox}|1;
		}
		else {
			&dial-node(vm-${vmbox}@${dial_to_node});
			&hangup-proper-status();
		}
	}
	#include "/opt/gemeinschaft/etc/asterisk/e-number-vmm-any.ael"
	
}

context voicemail-any-self {
	
	_vm-. => {
		Set(vmbox=${EXTEN:3});
		Set(CDR(amaflags)=OMIT);
		Verbose(1,### Check mailbox ${vmbox} at this node);
		//Set(CHANNEL(language)=en);  // derzeit notwendig da der dt. Sprachbaustein "eine" im Englischen fehlt
		Answer();
		Wait(0.5);
		VoiceMailMain(${vmbox});
	}
	
}


//---------------------------------------------------------------------
//  Macro to Record VM Box Announcements
//---------------------------------------------------------------------

macro vm-record( msource ) {
	
	if ("${msource}" = "internal" || "${msource}" = "external") {
		Answer();
		Wait(0.5);
		Playback(vm-extension);
		SayDigits(${user_name});
		Playback(vm-rec-unv);
		Record(/opt/gemeinschaft/vm-rec/${user_name}-${msource}.alaw,5,300);
		Playback(vm-msgsaved);
		Playback(/opt/gemeinschaft/vm-rec/${user_name}-${msource});
		Wait(1);
	}
	Hangup();
}


//---------------------------------------------------------------------
//  Record VM Box Announcements
//---------------------------------------------------------------------

context vm-ann-rec {
	
	vm_rec_internal => {
		Set(CDR(amaflags)=OMIT);
		&vm-record(internal);
		Hangup();
	}
	vm_rec_external => {
		Set(CDR(amaflags)=OMIT);
		&vm-record(external);
		Hangup();
	}
	#include "/opt/gemeinschaft/etc/asterisk/e-number-vm-rec-internal.ael"
	#include "/opt/gemeinschaft/etc/asterisk/e-number-vm-rec-external.ael"
}


//---------------------------------------------------------------------
//  To Internal Users/Nobodies
//---------------------------------------------------------------------

#include "/opt/gemeinschaft/etc/asterisk/e-internal.ael"


//---------------------------------------------------------------------
//  From the gateways
//---------------------------------------------------------------------

// see hangup_cause2sip() in chan_sip.c for a list of Q.931 cause
// codes (see causes.h) which can be translated into SIP codes

// wrapper context to be used by all of the gateways
context from-gateways {
	
	includes {
		cmm;                  // user login/logout (for BOI)
		//voicemail-any;        // voicemail main (own mailbox)
		//to-internal-nobody;   // internal phones (nobodies)
		//ivrs;                 //FIXME IVR demo
		to-internal-custom;
		to-internal-users;    // internal phones (users)
	}
	i => {
		// no matching extension found in any of the included contexts.
		// this is unlikely to happen as there is an extension for the
		// internal users which catches almost anything.
		Verbose(1,### No matching extension found for "${did_number}");
		// 1 = AST_CAUSE_UNALLOCATED => SIP 404 Not Found
		Set(PRI_CAUSE=1);
		Hangup(1);
	}
}

// contexts for incoming calls from the gateway groups:
#exec "/opt/gemeinschaft/etc/asterisk/e-gategroups-in.ael.php"


//---------------------------------------------------------------------
//  To external
//---------------------------------------------------------------------

context to-gateway {
	
	_0. => {
		if ("${user_id}" != "") {
			// from internal user, store dial log (out)
			//DumpChan();
			&dial-log-store(${user_name},out,${EXTEN});
		}
		&dial-gateway(${gateway_prefix}${EXTEN:1});
	}
	//_X. => &dial-gateway(${EXTEN});
}

macro dial-gateway-do( mnumber ) {
	/*
	if ("${is_from_gateway}" = "1" || "${SIPCHANINFO(peername)}" = "gateway") {
		Verbose(1,### Don't allow call from outside to go to the outside again - number: ${mnumber});
		Congestion(3);
		Hangup();
	}
	*/
	// get CLIR for a call to external:
	&is_dmz(${mnumber});
	if ("${is_dmz}" != "1") {
		Set(zone=external);
	}
	else {
		Set(zone=internal);
	}
	if ("${user_id}" != "") {
		if ("${clir}" = "" ) {
			AGI(/opt/gemeinschaft/dialplan-scripts/get-clir-${zone}.agi,${user_id});
		}
		if ("${clir}" = "1") {
			// RFC 3325:
			// gateways are somewhat trusted
			SIPAddHeader(P-Preferred-Identity: <sip:${CALLERID(num)}>);
			SIPAddHeader(Privacy: id);
			
			// RFC 2543:
			Set(CALLERID(all)=Anonymous <anonymous>);
		}
	}
	
	AGI(/opt/gemeinschaft/dialplan-scripts/out-route.agi,${mnumber},${is_sub_system},${CALLERID(num)},${user_id});
	Set(no_route=1);
	Set(r=1);
	while ("${r_${r}_dial}" != "") {
		//Verbose(1,### route: r_${r});
		Set(no_route=);
		Set(CALLERID(num)=${r_${r}_cid});
		Verbose(1,### Outbound route: ${r_${r}_dial} - Caller ID: ${CALLERID(num)});
		Dial(${r_${r}_dial},180);
		Verbose(1,### Dialstatus for ${r_${r}_dial}: ${DIALSTATUS});
		if ("${DIALSTATUS}" = "ANSWER" || "${DIALSTATUS}" = "CANCEL") {
			Hangup();
		}
		else if ("${DIALSTATUS}" = "NOANSWER") {
			Hangup();
		}
		else if ("${DIALSTATUS}" = "BUSY") {
			Busy(5);
			Hangup();
		}
		else if ("${DIALSTATUS}" = "CHANUNAVAIL" || "${DIALSTATUS}" = "CONGESTION") {
			//Verbose(1,### DIALEDTIME  : ${DIALEDTIME});
			//Verbose(1,### ANSWEREDTIME: ${ANSWEREDTIME});
			Verbose(1,### HANGUPCAUSE : ${HANGUPCAUSE});
			// see Asterisk's causes.h or
			// Q.931 Disconnect Cause Codes
			if ("${HANGUPCAUSE}" = "66") {
				// 66 = channel not implemented
				Verbose(0,### You're trying to dial to channel type "${CUT(r_${r}_dial,/,1)}" which this Asterisk is not configured to handle!);
			}
			else if ("${HANGUPCAUSE}" = "17") {
				// 17 = user busy
				Verbose(1,### HANGUPCAUSE 17 = user busy);
				Busy(5);
				Hangup();
			}
			else if ("${HANGUPCAUSE}" = "18") {
				// 18 = no user responding
				Verbose(1,### HANGUPCAUSE 18 = no user responding);
				Congestion(5);
				Hangup();
			}
			
			// else don't hangup and try the next gateway
		}
		else {
			Congestion(5);
			Hangup();
		}
		
		if (${r} > 10) {
			Verbose(1,### Could not reach ${mnumber} via 10 different gateways);
			Congestion(5);
			Hangup();
		}
		r=${r}+1;
	}
	if ("${no_route}" != "") {
		Verbose(1,### We don't have a route for ${mnumber});
		Set(DIALSTATUS=CONGESTION);
		Congestion(5);
		Hangup();
	}
	else {
		// we have run out of gateways to try
		Congestion(5);
		Hangup();
	}
	Hangup();
}

macro dial-gateway( mnumber ) {
	
	// is the user allowed to dial that number?
	// always allow for private calls:
	if ("${is_private_call}" = "1")
		goto allowed;
	// else check:
	
	if ("${forwarded_by}" = "") {
		Set(__is_forwarded=0);
		Set(__forwarded_by=${user_name});
	}
	else {
		Set(__is_forwarded=1);
		Verbose(1,### forwarded_by: ${forwarded_by});
	}
	// AGI ...      dial_allowed = yes | no | pin,  dial_pin = <pin>
	AGI(/opt/gemeinschaft/dialplan-scripts/callblocking.agi,${forwarded_by},${mnumber});
	if ("${dial_allowed}" = "pin") {
		Verbose(1,### User ${user_name} needs PIN (${dial_pin}) to dial ${mnumber} via gateway);
		if ("${is_forwarded}" = "1") {
			Verbose(1,### Don't ask for PIN after forward. Hangup.);
			goto not_allowed;
		}
		Answer();
		Wait(1);
		Read(input,vm-password,10,s,3,5);
		if ("${input}" = "${dial_pin}") {
			Playback(beep);
			ResetCDR(v);
			goto allowed;
		}
		goto not_allowed;
	}
	if ("${dial_allowed}" != "no")
		goto allowed;
	goto not_allowed;
	
	not_allowed:
		Verbose(1,### User ${forwarded_by} is not allowed to dial ${mnumber} via gateway);
		// beeperr if channel is up, else just declined:
		if ("${CHANNEL(state)}" = "Up")
			Playback(beeperr);
		Hangup();
	
	allowed:
		Verbose(1,### User ${forwarded_by} is allowed to dial ${mnumber} via gateway);
		//&dial-gateway-do(${gateway_prefix}${mnumber});
		&dial-gateway-do(${mnumber});
		Hangup();
}


//---------------------------------------------------------------------
//  To Emergency Numbers
//---------------------------------------------------------------------

context to-emergency {
	
	#exec "/opt/gemeinschaft/etc/asterisk/e-emergency.ael.php"
}

macro emergency-call( mnumber ) {
	if ("${mnumber}" = "${emergency_police}") {
		Set(tmp=(police));
	} else if ("${mnumber}" = "${emergency_fire}") {
		Set(tmp=(fire dept.));
	} else {
		Set(tmp=);
	}
	Verbose(1,### Call to ${MACRO_EXTEN} mapped to emergency ${mnumber} ${tmp});
	&dial-gateway-do(${mnumber});
}


//---------------------------------------------------------------------
//  Private Calls
//---------------------------------------------------------------------

context private-call {
	
	_*7*. => {
		Set(number=${EXTEN:3});
		
		if ("${user_id}" != "") {
			// from internal user, store dial log (out)
			&dial-log-store(${user_name},out,${EXTEN});
		}
		
		// pruefen, ob der User Privatgespraeche machen darf ...
		
		// accountcode setzen ...
		AGI(/opt/gemeinschaft/dialplan-scripts/usercode-by-ext.agi,${user_name});
		Set(CDR(amaflags)=BILLING);
		Set(CDR(accountcode)=prv-${user_code});
		
		// fuer Amtsberechtigung:
		Set(__is_private_call=1);
		Verbose(1,### Private call from user ${user_name} to ${number});
		//&dial-gateway(${number});
		Dial(Local/${number}/n);
		&hangup-proper-status();
	}
	//_96. => {
	//	jump *7*${EXTEN:2};
	//}
	//FIXME - exec e-number-private.ael.php here
}


//---------------------------------------------------------------------
//  User Config of Line Features and Call Forwarding
//---------------------------------------------------------------------

#include "/opt/gemeinschaft/etc/asterisk/e-user-config.ael"


//---------------------------------------------------------------------
//  From Internal Users
//---------------------------------------------------------------------

context from-internal-nobody {
	
	includes {
		//ivrs;                 //FIXME IVR demo
		to-emergency;         // emergency numbers
		cmm;                  // user login/logout
		voicemail-any;        // voicemail main (any mailbox)
		to-conferences;       // conferences
		to-internal-nobody;   // internal phones (nobodies)
		to-internal-users;    // internal phones (users)
		test;                 // test extensions
	}
	
	_*31. => {
		Verbose(1,### Set CLIR for number ${EXTEN:3});
		Set(__clir=1);
		jump ${EXTEN:3}@from-internal-nobody;
	}
	
}

context from-internal-users {
	
	includes {
		//ivrs;                 //FIXME IVR demo
		to-emergency;         // emergency numbers
		cmm;                  // user login/logout
		vm-ann-rec;           // record vm-box announcements
		voicemail-self;       // voicemail main (own mailbox)
		voicemail-any;        // voicemail main (any mailbox)
		private-call;         // private calls
		user-config;          // user's configuration
		queues-login-logout;  // queue login/logout
		to-conferences;       // conferences
		to-internal-nobody;   // internal phones (nobodies)
		to-internal-users;    // internal phones (users)
		//to-gateway;           // to the gateway
		test;                 // test extensions
	}
	
	_*31. => {
		Verbose(1,### Set CLIR for number ${EXTEN:3});
		Set(__clir=1);
		jump ${EXTEN:3}@from-internal-users;
	}
}


//---------------------------------------------------------------------
//  From Fax server
//---------------------------------------------------------------------

context from-fax-server {
	_[*#0-9]. => {
		Set(__user_id=${CALLERID(name)});
		Set(CALLERID(name)=${CALLERID(num)});
		Verbose(1,### Sending fax from user ${CALLERID(num)}\, ${user_id} to ${EXTEN});
		jump ${EXTEN}@from-internal-users;
	}
}


//---------------------------------------------------------------------
//  From unauthenticated IAX user
//---------------------------------------------------------------------

context from-iax-unauth {
	9999999999 => {
		Hangup();
	}
}


//---------------------------------------------------------------------
//  From other Nodes
//---------------------------------------------------------------------

context from-node {
	includes {
		to-conferences-self;       // conferences
		to-internal-nobody-self;   // internal phones (nobodies)
		voicemail-any-self;        // vm boxes
		to-internal-users-self;    // internal phones (users)
	}
}


//---------------------------------------------------------------------
//  Macro to store dial log
//---------------------------------------------------------------------

macro dial-log-store( muser, mtype, mnumber ) {
	
	if ("${mtype}"="in" || "${mtype}"="out" || "${mtype}"="missed") {
		if ("${mnumber}" = "") {
			if ("${mtype}"="in" || "${mtype}"="missed") {
				Set(mnumber=${CALLERID(num)});
			}
		}
		Set(mname=${CALLERID(name)});
		Verbose(1,### Store in dial log of user ${muser}: ${mtype} ${mnumber} ${mname});
		TrySystem(/opt/gemeinschaft/dialplan-scripts/dial-log-store '${muser}' '${mtype}' '${mnumber}' '${mname}');
	}
}


//---------------------------------------------------------------------
//  HA-System Alarm
//---------------------------------------------------------------------

context systemalarm {
	
	// wird vom HA-System angerufen falls z.B. ein Node ausfaellt
	systemalarm => {
		Verbose(0,################## SYSTEM-ALARM ##################);
		Set(__is_private_call=1);  // damit Rauswaehlen erlaubt
		/*
		Set(i=1);
		while ("${systemalarm_${i}}" != "") {
			Verbose(0,######### SYSTEM-ALARM - i=${i} - dial ${systemalarm_${i}});
			!!!!!!!
			Dial(Local/${systemalarm_${i}}/n,20,g); // hier noch irgendwas mit Makro ...
			i=${i}+1;
		}
		*/
		Hangup();
	}
	
}


//---------------------------------------------------------------------
//  Call Completion (Autom. Rueckruf)
//---------------------------------------------------------------------

context call-completion {
	
	_cc-. => {
		Set(callee=${EXTEN:3});
		//Set(CHANNEL(language)=de);
		#exec "/opt/gemeinschaft/etc/asterisk/e-lang.ael.php"
		Verbose(1,### Call completion from ${user_name} to ${callee});
		Answer();
		Wait(0.5);
		//SayDigits(${callee});
		//Playback(/opt/gemeinschaft/sounds/de-DE/ist-jetzt-wieder-erreichbar);
		Set(CALLERID(all)=${orig_callerid});
		//DumpChan();
		Set(__is_callcompletion=1); // no forwards and no mailbox
		Dial(Local/${callee}/n,15);
		&hangup-proper-status();
	}
	
}


//---------------------------------------------------------------------
//  dialed with HTTP GET (call-init.php -> callfile)
//---------------------------------------------------------------------

context urldial {
	
	_X. => jump u-${EXTEN};
	_X  => jump u-${EXTEN};
	
	_u-. => {
		Set(callfile_target=${EXTEN:2});
		if ("${saved_callerid}" != "") {
			// __saved_callerid is set by call-init.php
			Set(CALLERID(all)=${saved_callerid});
			Set(__saved_callerid=);
		}
		Verbose(1,### Callfile from ${callfile_from_user} to ${callfile_target});
		&pass-connid();
		Set(__is_callfile_origin=);
		Set(__is_call_from=internal);
		Dial(Local/${callfile_target}@from-internal-users/n,200);
		&hangup-proper-status();
	}
	
	failed => {
		Verbose(1,### Callfile: Origin user ${callfile_from_user} did not answer);
		NoCDR();
		Hangup();
	}
	
}


//---------------------------------------------------------------------
//  Test-Extensions
//---------------------------------------------------------------------

context test {
	
	*** => {
		Set(CDR(amaflags)=OMIT);
		Verbose(1,### Echo test for user ${user_name});
		Answer();
		Echo();
		Hangup();
	}
	
	/*
	// Intercom
	_***. => {
		SIPAddHeader(Call-Info: \;answer-after=0);
		Dial(SIP/${EXTEN:3});
	}
	*/
	
}


//---------------------------------------------------------------------
//  For the cluster watchdog
//---------------------------------------------------------------------

context cluster-watchdog {
	// check-alive extension for the cluster watchdog:
	checkalive => {
		Set(CDR(amaflags)=OMIT);
		NoOp();
	}
}



//---------------------------------------------------------------------
//  Default Context (do not use here. it's in extensions.conf)
//---------------------------------------------------------------------

/*
context default {
}
*/
