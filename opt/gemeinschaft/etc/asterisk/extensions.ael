//------------------------------------------------------------------//
//      WRITTEN BY /opt/gemeinschaft/sbin/gs-ast-dialplan-gen       //
//                  DO NOT MAKE ANY CHANGES HERE!                   //
//------------------------------------------------------------------//

//---------------------------------------------------------------------
//            Gemeinschaft - asterisk cluster gemeinschaft
// 
// $Revision$
// 
// Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
// http://www.amooma.de/
// Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
// Philipp Kempgen <philipp.kempgen@amooma.de>
// Peter Kozak <peter.kozak@amooma.de>
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA 02110-1301, USA.
//---------------------------------------------------------------------


//---------------------------------------------------------------------
//  Globals
//---------------------------------------------------------------------

globals {
//---------------------------------------------------------------------
//            Gemeinschaft - asterisk cluster gemeinschaft
// 
// $Revision$
// 
// Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
// http://www.amooma.de/
// Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
// Philipp Kempgen <philipp.kempgen@amooma.de>
// Peter Kozak <peter.kozak@amooma.de>
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA 02110-1301, USA.
//---------------------------------------------------------------------


gateway_prefix=;
	// if 0... was dialed internally to get
	// an outside line, what should the prefix
	// be to the gateway?
	// if set to 0, matching of the dialled number against
	// the routing table for outbound routes is performed
	// *including* the 0 to get an outside line
//gateway_prefix=0;
	// set this to 0 if Gemeinschaft is connected to
	// another PBX in the same private branch
	// EDIT: Don't use gateway_prefix. Enter a prefix
	// in the outbound routing rules instead.

max_forwards=10;
	// max. forwards from user to user to prevent infinite
	// loops

//allow_direct_dial_mbox=no;
	// allow direct dial to mailbox even if mailbox
	// not active
	// yes|no
	// deprecated!
	// commented out in the dialplan (e-internal.ael)!

is_sub_system=no;
allow_direct_dial=no;
gs_lang=de-DE;
system_ip=212.28.230.68;
connid_enabled=0;


};

//---------------------------------------------------------------------
// Macro to emulate SIPRemoveHeader() if absent
//---------------------------------------------------------------------

macro sip-remove-header( sipremoveheader_arg ) {
	// SIPRemoveHeader() was added in Asterisk trunk rev. 168638, branch 1.6.2, tag 1.6.2.0-beta1 (https://issues.asterisk.org/view.php?id=14246)
	// http://lists.digium.com/pipermail/asterisk-dev/2009-January/036102.html
	// https://issues.asterisk.org/view.php?id=14246
	TryExec(SIPRemoveHeader(${sipremoveheader_arg}));
	if ("${TRYSTATUS}" = "NOAPP") {
		Verbose(2,### -GS- Emulating SIPRemoveHeader ...);
		if ("${sipremoveheader_arg}" = "") {
			// Remove all custom headers (
			for (i=1; ${i}<=99; i=${i}+1) {
				Set(sipaddheader_varname=SIPADDHEADER${SPRINTF(%02d,${i})});
				if (${LEN(${${sipaddheader_varname}})} > 0) {
					//Verbose(2,### -GS- ${sipaddheader_varname} = ${${sipaddheader_varname}});
					Set(${sipaddheader_varname}=);
				}
			}
		}
		else {
			//Verbose(1,### -GS- Emulation of SIPRemoveHeader with arguments not implemented!);
			// Remove some headers
			Verbose(2,### -GS- Emulating SIPRemoveHeader: removing "${sipremoveheader_arg}" ...);
			AGI(/opt/gemeinschaft/dialplan-scripts/sip-remove-header.agi,${sipremoveheader_arg});
		}
	}
	return;
}

//---------------------------------------------------------------------
//  Macro to get or generate a "connection ID"
//---------------------------------------------------------------------

macro pass-connid() {
	// generates a "connection ID" to be used in a custom X-Org-ConnID header.
	// sets ${connid}.
	if ("${connid_enabled}" = "1") {
		if ("${connid}" = "") {
			if ("${CHANNEL(channeltype)}" = "SIP") {
				if ("${SIP_HEADER(X-Org-ConnID)}" != "") {
					Set(__connid=${SIP_HEADER(X-Org-ConnID)});
					Verbose(1,### -GS- Received ConnID: ${connid});
				}
			}
			if ("${connid}" = "") {
				Set(__connid=${STRFTIME(,,%Y%m%d-%H%M%S)}-${CUT(UNIQUEID,.,2-)}-${system_ip}-${RAND(100000000,999999999)});
				// e.g. 20080923-080136-5-192.168.1.130-380845309
				Verbose(1,### -GS- Generated ConnID: ${connid});
			}
		}
		Set(CDR(x_connid)=${connid});
		Set(__SIPADDHEADER_connid=X-Org-ConnID: ${connid});
	}
	return;
}


//---------------------------------------------------------------------
//  Macro to signal dialstatus
//---------------------------------------------------------------------

macro hangup-proper-status() {
	Verbose(1,### -GS- DIALSTATUS: ${DIALSTATUS});
	if ("${DIALSTATUS}" = "BUSY") {
		//Busy(3);
		// 17 = AST_CAUSE_USER_BUSY => SIP 486 Busy here
		Set(PRI_CAUSE=17);
		Hangup(17);
	} else if ("${DIALSTATUS}" = "CHANUNAVAIL") {
		//Congestion(3);
		// 27 = AST_CAUSE_DESTINATION_OUT_OF_ORDER => SIP 502 Bad Gateway
		Set(PRI_CAUSE=27);
		Hangup(27);
	} else if ("${DIALSTATUS}" = "CONGESTION") {
		//Congestion(3);
		// 34 = AST_CAUSE_CONGESTION => SIP 503 Service Unavailable
		Set(PRI_CAUSE=34);
		Hangup(34);
	}
	Hangup();
	return;
}

macro hangup-proper-status-urldial() {
	Verbose(1,### -GS- DIALSTATUS: ${DIALSTATUS});
	if ("${DIALSTATUS}" = "BUSY") {
		Busy();
		Hangup();
	} else if ("${DIALSTATUS}" = "CHANUNAVAIL") {
		Congestion();
		Hangup();
	} else if ("${DIALSTATUS}" = "CONGESTION") {
		Congestion();
		Hangup();
	}
	Hangup();
	return;
}


//---------------------------------------------------------------------
//  check if a certain number should be treated as internal even
//  if it's not internal to Gemeinschaft
//---------------------------------------------------------------------

macro is_dmz( is_dmz_num ) {
	// callerid(num) for incoming calls or dialed number for outgoing
	//if ("${is_dmz_num:0:1}" = "0" || "${is_dmz_num:0:1}" = "" || "${is_dmz_num:0:2}" = "60") {
	//	// from PSTN or branch office => external
	if ("${is_dmz_num:0:1}" = "0" || "${is_dmz_num:0:1}" = "") {
		Set(is_dmz=);
	}
	else {
		// everything else (even from the gateway) => internal
		Set(is_dmz=1);
	}
	return;
}


//---------------------------------------------------------------------
//  User Login Macro
//---------------------------------------------------------------------

macro cmm-login( new_user_name ) {
	
	Set(CDR(amaflags)=OMIT);
	Answer();
	AGI(/opt/gemeinschaft/dialplan-scripts/cmm-check-user.agi,${new_user_name},${is_from_gateway});
	//NoOp(### AGI returned: ret = ${ret});
	if ("${ret}" != "1")
		goto unknown;
	
	Wait(1);
	Read(pass,agent-pass,10,s,3,5);
	AGI(/opt/gemeinschaft/dialplan-scripts/cmm-login.agi,${new_user_name},${pass},${user_id},${is_from_gateway},${CALLERID(num)});
	//NoOp(### AGI returned: ret = ${ret});
	if ("${ret}" = "error")
		goto error;
	if ("${ret}" != "ok")
		goto unknown;
	
	//Playback(agent-loginok);
	UserEvent(UserLoginUI,user: ${new_user_name});
	Playback(/opt/gemeinschaft/sounds/${gs_lang}/sie-sind-jetzt-angemeldet);
	Playback(/opt/gemeinschaft/sounds/${gs_lang}/bitte-warten-sie);
	TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ext='${new_user_name}');
	if ("${user_name}" != "${new_user_name}") {
		if ("${user_name}" != "") {
			TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ext='${user_name}');
		} else {
			TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ext='${CALLERID(num)}');
		}
	}
	if ("${new_phone_ip}" != "") {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${new_phone_ip}');
	}
	if ("${old_phone_ip}" != "" && "${old_phone_ip}" != "${new_phone_ip}") {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${old_phone_ip}');
	}
	if ("${CHANNEL(channeltype)}" = "SIP") {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${SIPCHANINFO(peerip)}');
		if ("${SIPCHANINFO(recvip)}" != "${SIPCHANINFO(peerip)}") {
			TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${SIPCHANINFO(recvip)}');
		}
	}
	
	Hangup();
	return;
	
	unknown:
		Wait(1);
		Playback(vm-incorrect&vm-goodbye);
		Wait(0.5);
		Hangup();
		return;
	
	error:
		Playback(tt-somethingwrong);
		Wait(0.5);
		Hangup();
		return;

	return;
}


//---------------------------------------------------------------------
//  User Logout Macro
//---------------------------------------------------------------------

macro cmm-logout() {
	
	Set(CDR(amaflags)=OMIT);
	Answer();
	Wait(0.5);
	AGI(/opt/gemeinschaft/dialplan-scripts/cmm-logout.agi,${user_id},${is_from_gateway},${CALLERID(num)});
	if ("${ret}" = "error")
		goto error;
	//Playback(agent-loggedoff&vm-goodbye);
	UserEvent(UserLogoffUI,user: ${user_name});
	Playback(/opt/gemeinschaft/sounds/${gs_lang}/sie-sind-abgemeldet);
	Playback(/opt/gemeinschaft/sounds/${gs_lang}/bitte-warten-sie);
	if ("${user_name}" != "") {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ext='${user_name}');
	} else {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ext='${CALLERID(num)}');
	}
	if ("${old_phone_ip}" != "") {
		TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${old_phone_ip}');
	}
	if ("${CHANNEL(channeltype)}" = "SIP") {
		if ("${SIPCHANINFO(peerip)}" != "${old_phone_ip}") {
			TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${SIPCHANINFO(peerip)}');
		}
		if ("${SIPCHANINFO(recvip)}" != "${old_phone_ip}" && "${SIPCHANINFO(recvip)}" != "${SIPCHANINFO(peerip)}") {
			TrySystem(/opt/gemeinschaft/dialplan-scripts/prov-sync-phone --ip='${SIPCHANINFO(recvip)}');
		}
	}
	
	Hangup();
	return;

	error:
		Playback(tt-somethingwrong);
		Wait(0.5);
		Hangup();
		return;

	return;
}


//---------------------------------------------------------------------
//  User Login/Logout context
//---------------------------------------------------------------------

context cmm {
	
	*0*  => &cmm-logout();
	_*0. => &cmm-login(${EXTEN:2});
}


//---------------------------------------------------------------------
//  Agent Login Macro
//---------------------------------------------------------------------

macro agent-login( new_user_name ) {

	Answer();
	NoOp(### Agent ${new_user_name} tries to log in on user: ret = ${user_name});
	AGI(/opt/gemeinschaft/dialplan-scripts/agent-needpw.agi,${new_user_name});

	if ( "${agent_needpw}" = "1" ) {
		Wait(1);
		Read(pass,agent-pass);
	}

	AGI(/opt/gemeinschaft/dialplan-scripts/agent-login.agi,${new_user_name},${pass},${user_name});
	if ("${ret}" = "error")
		goto error;
	if ("${ret}" != "ok")
		goto unknown;
	
	//we will first have to log off the agent from the phone he is registered at, if there is any
	if("${old_user}"  != "") {
        AGI(/opt/gemeinschaft/dialplan-scripts/agent-login-logout.agi,${old_user},${new_user_name},logoutall);
		UserEvent(QueueLogoffUI,user: ${old_user},queue: *);
		for(i=0;${i} < ${oqueue_count}; i=${i} + 1){
			queueNr=${oqueue${i}};
			QueueLog(${queueNr},${UNIQUEID},Agent/${new_user_name},REMOVEMEMBER,SIP/${user_name});
			UserEvent(AgentLogoffUI,agent: ${new_user_name});
		}
	}


	if("${old_local_agent}" != ""){
		AGI(/opt/gemeinschaft/dialplan-scripts/agent-login-logout.agi,${user_name},${old_local_agent},logoutall);
		UserEvent(QueueLogoffUI,user: ${user_name},queue: *);
		for(i=0;${i} < ${oqueue_count}; i=${i} + 1){
			queueNr=${oqueue${i}};
			QueueLog(${queueNr},${UNIQUEID},Agent/${old_local_agent},REMOVEMEMBER,SIP/${user_name});
		}
		UserEvent(AgentLogoffUI,agent: ${old_local_agent});
	}

	if( ${old_local_user} > 0 ) {
		&queue-logout-all-silent();
		//user logoff
	}

	//Logoff the agent, if he is still registered on another phone

	// Login the agent
	// NoOp(### Anz. queues: ${queue_count});
	AGI(/opt/gemeinschaft/dialplan-scripts/agent-login-logout.agi,${user_name},${new_user_name},login);
	NoOp(### AGI returned: ${agent_login_status});
	if( "${agent_login_status}" == "OK"){ 
	
		UserEvent(AgentLoginUI,agent: ${new_user_name},user: ${user_name});
		for(i=0;${i} < ${queue_count}; i=${i} + 1){
			queueNr=${queue${i}};
			UserEvent(QueueLoginUI,user: ${user_name},queue: ${queueNr});
			QueueLog(${queueNr},${UNIQUEID},Agent/${new_user_name},ADDMEMBER,SIP/${user_name});
			QueueLog(NONE,${UNIQUEID},Agent/${new_user_name},HOTDESK,SIP/${user_name});
		} 
		Playback(agent-loginok);

	}
	else
		goto error;
	Hangup();
	
	unknown:
		Wait(1);
		Playback(vm-incorrect&vm-goodbye);
		Wait(0.5);
		Hangup();
	
	error:
		Playback(tt-somethingwrong);
		Wait(0.5);
		Hangup();

	return;
}

macro agent-login-enterid() {
	
	Answer();
	NoOp(### Agent without id tries to log in);
	Wait(1);
	Read(new_user_name,/opt/gemeinschaft/sounds/${gs_lang}/agent-enterid,10,s,3,5);
	&agent-login(${new_user_name});
	return;

}

macro agent-logout() {
	
	Answer();
	Verbose(1,### -GS- Agent on ${user_name} wants to log out from all queues);
	AGI(/opt/gemeinschaft/dialplan-scripts/agent-login-logout.agi,${user_name},,logoutall);
	Wait(0.5);
	if ("${agent_login_status}" = "loggedout") {
		
		
		UserEvent(AgentLogoffUI,agent: ${agent});
		AGI(/opt/gemeinschaft/dialplan-scripts/agent-login-logout.agi,${user_name},${old_local_agent},logoutall);
		UserEvent(QueueLogoffUI,user: ${user_name},queue: *);
		for(i=0;${i} < ${oqueue_count}; i=${i} + 1){
			queueNr=${oqueue${i}};
			QueueLog(${queueNr},${UNIQUEID},Agent/${agent},REMOVEMEMBER,SIP/${user_name});
		}
		Playback(agent-loggedoff);
		
	} else {
		Playback(beeperr);
	}
	Hangup();
	return;
	
}

macro agent-pause() {
	
	Answer();
	AGI(/opt/gemeinschaft/dialplan-scripts/agent-pause-unpause.agi,${user_name},pause);
	
	Wait(0.5);
	if ("${agent}" != "") {
		QueueLog(NONE,NONE,SIP/${user_name},PAUSEALL,);
		UserEvent(AgentPausedUI,agent: ${user_name});
		Verbose(1,### -GS- Agent ${agent} on ${user_name} paused);
		Playback(beep);
	} else {
		Verbose(1,### -GS- Failed to pause agent on ${user_name});
		Playback(beeperr);
	}
	Hangup();
	return;
	
}

macro agent-unpause() {
	
	Answer();
	AGI(/opt/gemeinschaft/dialplan-scripts/agent-pause-unpause.agi,${user_name},unpause);
	Wait(0.5);
	
	if ("${agent}" != "") {
		QueueLog(NONE,NONE,SIP/${user_name},UNPAUSEALL,);
		UserEvent(AgentUnPausedUI,agent: ${user_name});
		Verbose(1,### -GS- Agent ${agent} on ${user_name} unpaused);
		Playback(beep);
	} else {
		Verbose(1,### -GS- Failed to unpause agent on ${user_name});
		Playback(beeperr);
	}
	Hangup();
	return;
	
}


//---------------------------------------------------------------------
//  Agent Login/Logout
//---------------------------------------------------------------------

context agents {

	*6*  => &agent-logout();
	*6   => &agent-login-enterid();
	_*6. => &agent-login(${EXTEN:2});		
	*6#* => &agent-pause();
	*6## => &agent-unpause();

}

//---------------------------------------------------------------------
//  Recordings
//---------------------------------------------------------------------

macro rec-playback(id) {

	Answer();
	Wait(1.0);
	AGI(/opt/gemeinschaft/dialplan-scripts/sys-rec-getfile,${id});
	Playback(/opt/gemeinschaft/sys-rec/${md5hashname});
	Hangup();
	return;

}

macro rec-record(extension) {

	Set(filename=/tmp/${UNIQUEID});
	Set(response=0);
	Answer();
	Wait(1.0);

	while ("${response}" != "1") {
		if ("${response}" = "2") {
			Playback(${filename});
		} else {
			Playback(vm-rec-temp);
			Playback(beep);
			Set(starttime=${STRFTIME(${EPOCH},,%Y%m%d%H%M%S)});
			Record(${filename}.sln);
			Set(endtime=${STRFTIME(${EPOCH},,%Y%m%d%H%M%S)});
		}
		Read(response,/opt/gemeinschaft/sounds/${gs_lang}/druecken-sie-1-um-die-aufnahme-zu-speichern,1,,3,);
	}

	AGI(/opt/gemeinschaft/dialplan-scripts/sys-rec-record,${extension},${filename}.sln,$[${endtime} - ${starttime}]);
	Playback(/opt/gemeinschaft/sounds/${gs_lang}/vielen-dank);
	Hangup();
	return;

}

context sys-rec-playback {

	s => &rec-playback(${ID});

}

context sys-rec-record {

	s => &rec-record(${DIALEDEXTEN});

}

//---------------------------------------------------------------------
//  Conferences (MeetMe)
//---------------------------------------------------------------------

context to-conferences {
	
	_88000 => {
		Set(confprefix=${EXTEN:0:2});
		jump c-empty@to-conferences;
	}
	_880000 => {
		Set(confprefix=${EXTEN:0:2});
		jump c-empty@to-conferences;
	}
	c-empty => {
		Set(confnum=0);
		Verbose(1,### -GS- Trying to enter new empty conference);
		&pass-connid();
		if ("${user_id}" != "") {
			// from internal user, store dial log (out)
			&dial-log-store(${user_name},out,${confprefix}${confnum},0);
		}
		// try at most 40 times:
		for (i=0; ${i}<40; i=${i}+1) {
			Set(confnum=${RAND(100,999)});
			Verbose(1,### -GS- Searching empty conference - trying ${confprefix}${confnum});
			// find where the conference is or claim it:
			AGI(/opt/gemeinschaft/dialplan-scripts/conf-get-where.agi,${confprefix}${confnum});
			if ("${exttype}" != "conference") {
				Verbose(1,### -GS- Something bad happened. Conference ${confprefix}${confnum} is of type "${exttype}");
				Congestion(3);
				Hangup();
			}
			if ("${dial_to_node}" = "") {
				// found an empty conference
				Verbose(1,### -GS- Found an empty conference: ${confprefix}${confnum});
				Playback(conf-enteringno);
				SayDigits(${confprefix}${confnum});
				//MeetMe(${confnum},DcoT);
				//Hangup();
				jump ${confprefix}${confnum}@to-conferences-self;
			}
		}
		Verbose(1,### -GS- Tried $i{i} times but could not find empty conference);
		Playback(beeperr);
		Congestion(3);
		Hangup();
	}
	
	_88XXX => {
		Set(confprefix=${EXTEN:0:2});
		jump c-${EXTEN:2}@to-conferences;
	}
	_88XXXX => {
		Set(confprefix=${EXTEN:0:2});
		jump c-${EXTEN:2}@to-conferences;
	}
	_c-XX. => {
		Set(confnum=${EXTEN:2});
		Verbose(1,### -GS- Call to conference ${confprefix}${confnum});
		&pass-connid();
		if ("${user_id}" != "") {
			// from internal user, store dial log (out)
			&dial-log-store(${user_name},out,${confprefix}${confnum},0);
		}
		// find where the conference is or claim it:
		AGI(/opt/gemeinschaft/dialplan-scripts/conf-get-where.agi,${confprefix}${confnum});
		if ("${exttype}" != "conference") {
			Verbose(1,### -GS- Something bad happened. Conference ${confprefix}${confnum} is of type "${exttype}");
			Congestion(3);
			Hangup();
		}
		if ("${dial_to_node}" = "") {
			Verbose(1,### -GS- Conference ${confprefix}${confnum} is at node: SELF);
			jump ${confprefix}${confnum}@to-conferences-self;
		}
		else {
			&dial-node(${confprefix}${confnum}@${dial_to_node});
			&hangup-proper-status();
		}
	}
	
}

context to-conferences-self {
	
	/*
	_88000 => {
		Set(confprefix=${EXTEN:0:2});
		jump c-empty@to-conferences;
	}
	*/
	_88XXX => {
		Set(confprefix=${EXTEN:0:2});
		jump c-${EXTEN:2}@to-conferences-self;
	}
	_88XXXX => {
		Set(confprefix=${EXTEN:0:2});
		jump c-${EXTEN:2}@to-conferences-self;
	}
	/*
	c-empty => {
		Verbose(1,### -GS- Trying to enter new empty conference);
		//MeetMe(${confnum},eD);
		Answer();
		for (i=100; ${i}<999; i=${i}+1) {
			Verbose(1,### -GS- Trying to find empty conference - ${i});
			MeetMeCount(${i},cntM);
			if (${cnt} < 1) {
				Verbose(1,### -GS- Found empty conference: ${i});
				Playback(conf-enteringno);
				SayDigits(${confprefix}${i});
				MeetMe(${i},DcoTM);
				Hangup();
			}
		}
		Verbose(1,### -GS- Could not find empty conference);
		Playback(beeperr);
		Congestion(3);
		Hangup();
	}
	*/
	_c-XX. => {
		Set(confnum=${EXTEN:2});
		Verbose(1,### -GS- Entering conference ${confprefix}${confnum});
		&pass-connid();
		Answer();
		Wait(0.5);
		MeetMe(${confnum},DcoTM);
		Hangup();
	}
	
}


//---------------------------------------------------------------------
//  Queue Login/Logout
//---------------------------------------------------------------------

macro queue-login( queue ) {
	
	Set(CDR(amaflags)=OMIT);
	Answer();
	Verbose(1,### -GS- User ${user_name} wants to log in to queue ${queue});
	
	AGI(/opt/gemeinschaft/dialplan-scripts/queue-login-logout.agi,${user_name},${queue},login);
	if ("${agent_login_status}" = "loggedin") {
		QueueLog(${queue},${UNIQUEID},${CHANNEL(channeltype)}/${user_name},AGENTLOGIN,fake);
		QueueLog(NONE,${UNIQUEID},Agent/${user_name},HOTDESK,${CHANNEL(channeltype)}/${user_name});
	}
	Verbose(1,### -GS- agent_login_status: ${agent_login_status});
	Wait(0.5);
	if ("${agent_login_status}" = "loggedin" || "${agent_login_status}" = "alreadyon") {
		UserEvent(QueueLoginUI,user: ${user_name},queue: ${queue});
		Playback(agent-loginok);
	} else {
		Playback(beeperr);
	}
	if ("${agent_login_status}" = "agent-exists") {
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/an-diesem-telefon-ist-ein-agent-angemeldet);
	}
	Hangup();
	return;
	
}

macro queue-logout( queue ) {
	
	Set(CDR(amaflags)=OMIT);
	Answer();
	Verbose(1,### -GS- User ${user_name} wants to log out from queue ${queue});
	AGI(/opt/gemeinschaft/dialplan-scripts/queue-login-logout.agi,${user_name},${queue},logout);
	Wait(0.5);
	if ("${agent_login_status}" = "loggedout") {
		UserEvent(QueueLogoffUI,user: ${user_name},queue: ${queue});
		QueueLog(${queue},${UNIQUEID},${CHANNEL(channeltype)}/${user_name},AGENTLOGOFF,fake);
		Playback(agent-loggedoff);
	} else {
		Playback(beeperr);
	}
	if ("${agent_login_status}" = "agent-exists") {
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/an-diesem-telefon-ist-ein-agent-angemeldet);
	}
	Hangup();
	return;
	
}

macro queue-logout-all() {
	
	Set(CDR(amaflags)=OMIT);
	Answer();
	Verbose(1,### -GS- User ${user_name} wants to log out from all queues);
	AGI(/opt/gemeinschaft/dialplan-scripts/queue-login-logout.agi,${user_name},0,logoutall);
	Wait(0.5);
	if ("${agent_login_status}" = "loggedout") {
		for(i=0;${i} < ${oqueue_count}; i=${i} + 1){
			queueNr=${oqueue${i}};
			QueueLog(${queueNr},${UNIQUEID},${CHANNEL(channeltype)}/${user_name},AGENTLOGOFF,fake);
		}
		UserEvent(QueueLogoffUI,user: ${user_name},queue: *);
		Playback(agent-loggedoff);
	} else {
		Playback(beeperr);
	}
	if ("${agent_login_status}" = "agent-exists") {
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/an-diesem-telefon-ist-ein-agent-angemeldet);
	}
	Hangup();
	return;
	
}

macro queue-logout-all-silent() {
	// like &queue-logout-all() but silent
	Set(CDR(amaflags)=OMIT);
	Verbose(1,### -GS- User ${user_name} wants to log out from all queues);
	AGI(/opt/gemeinschaft/dialplan-scripts/queue-login-logout.agi,${user_name},0,logoutall);
	UserEvent(QueueLogoffUI,user: ${user_name},queue: *);
	return;
}

context queues-login-logout {
	
	*5*   => &queue-logout-all();
	_*5.  => &queue-login(${EXTEN:2});
	//_*5.* => &queue-logout(${EXTEN:2});  // does not work
	_*5X* => &queue-logout(${EXTEN:2:-1});
	_*5XX* => &queue-logout(${EXTEN:2:-1});
	_*5XXX* => &queue-logout(${EXTEN:2:-1});
	_*5XXXX* => &queue-logout(${EXTEN:2:-1});
	_*5XXXXX* => &queue-logout(${EXTEN:2:-1});
	_*5XXXXXX* => &queue-logout(${EXTEN:2:-1});
}


//---------------------------------------------------------------------
//  Voicemailbox
//---------------------------------------------------------------------

// Voicemail abfragen mit eigener Mailbox

context voicemail-self {
	
	voicemail => {
		//Set(CHANNEL(language)=en);  // derzeit notwendig da der dt. Sprachbaustein "eine" im Englischen fehlt
		Set(CDR(amaflags)=OMIT);
		Answer();
		Wait(0.5);

		//(auto-generated) {

		VoiceMailMain(${user_name},s);

		//} (auto-generated)
	}
	asterisk  => jump voicemail;
	mailbox   => jump voicemail;
80 => jump voicemail;

}

// Voicemail abfragen mit beliebiger Mailbox

context voicemail-any {
	
	//_80. => {
	_vm-. => {
		Set(vmbox=${EXTEN:3});
		Set(CDR(amaflags)=OMIT);
		Verbose(1,### -GS- Check mailbox ${vmbox});
		&check-valid-extension(${vmbox});
		if ("${dial_to_node}" = "") {
			Verbose(1,### -GS- VM box ${vmbox} is at node: SELF);
			jump vm-${vmbox}@voicemail-any-self;
		}
		else {
			&dial-node(vm-${vmbox}@${dial_to_node});
			&hangup-proper-status();
		}
	}
_80. => jump vm-${EXTEN:2};

	
}

context voicemail-any-self {
	
	_vm-. => {
		Set(vmbox=${EXTEN:3});
		Set(CDR(amaflags)=OMIT);
		Verbose(1,### -GS- Check mailbox ${vmbox} at this node);
		//Set(CHANNEL(language)=en);  // derzeit notwendig da der dt. Sprachbaustein "eine" im Englischen fehlt
		Answer();
		Wait(0.5);
		VoiceMailMain(${vmbox});
	}
	
}




//---------------------------------------------------------------------
//  Macro to Record VM Box Announcements
//---------------------------------------------------------------------

macro vm-record-file ( ) {
	
	if ("${msource}" = "internal" || "${msource}" = "external") {
		Answer();
		Wait(0.5);
		Playback(vm-extension);
		SayDigits(${user_name});
		Playback(vm-rec-unv);
		Record(/tmp/${user_name}-${msource}.alaw,5,300);
		AGI(/opt/gemeinschaft/dialplan-scripts/vm-rec-move.agi,${user_name},${msource});
		if( "${vm_rec_moved}" = "1" ) {
			Playback(vm-msgsaved);
			Playback(/opt/gemeinschaft/vm-rec/${user_name}-${msource});
		}
		else {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/aufzeichnen_fehler);
		} 
		Wait(1);
	}
	Hangup();
	return;
}



macro vm-record() {
	
	if ("${msource}" = "internal" || "${msource}" = "external") {
		AGI(/opt/gemeinschaft/dialplan-scripts/vm-rec-exists.agi,${user_name},${msource});
		if( "${vm_rec_exists}" = "1" ) 
			jump s@vm-ann-main-full;
		else
			&vm-record-file();

	}
	Hangup();
	return;
}





macro vm-play-file() {
	
	if ("${msource}" = "internal" || "${msource}" = "external") {
		Playback(/opt/gemeinschaft/vm-rec/${user_name}-${msource});
		Wait(0.5);
	}
	return;

}

macro vm-remove-file() {
	
	if ("${msource}" = "internal" || "${msource}" = "external") {
		AGI(/opt/gemeinschaft/dialplan-scripts/vm-rec-remove.agi,${user_name},${msource});
		if( "${vm_rec_removed}" = "1" ) { 
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/ansage_geloescht);
		}
		else {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/loeschen_fehler);
		}
		
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/auf-wiedersehen);
		Hangup();	

	}
	Hangup();
	return;

}


//---------------------------------------------------------------------
//  Record VM Box Announcements
//---------------------------------------------------------------------



context vm-ann-main-full {
	 s => {
		&vm-play-file();
		Wait(0.5);
		Background(/opt/gemeinschaft/sounds/${gs_lang}/1_aufnahme_nicht_erreichbar);
		Wait(0.2);
		Background(/opt/gemeinschaft/sounds/${gs_lang}/2_ansage_loeschen);
		Wait(0.2);
		Background(/opt/gemeinschaft/sounds/${gs_lang}/raute_taste_verlassen);
		WaitExten(10);
	}

	h => Hangup();

	i => goto #|1;

	t => goto #|1;

	# => {
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/auf-wiedersehen);
		Hangup();
	}

	1 => &vm-record-file();

	2 => goto vm-ann-del-ok|s|1;

}

context vm-ann-del-ok {
	
	s => {
		Background(/opt/gemeinschaft/sounds/${gs_lang}/loeschen_ok);
		WaitExten(10);
	}

	h => Hangup();

	i => goto t|1;

	t => {
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/auf-wiedersehen);
		Hangup();
	}

	# => goto t|1;

	* => &vm-remove-file();


}

context vm-ann-rec {
	
	vm_rec_internal => {
		Set(CDR(amaflags)=OMIT);
		Set(__msource=internal);
		Answer();
		Wait(0.5);
		&vm-record();
		Hangup();
	}
	vm_rec_external => {
		Set(CDR(amaflags)=OMIT);
		Set(__msource=external);
		Answer();
		Wait(0.5);
		&vm-record();
		Hangup();
	}
*99* => jump vm_rec_internal;

*98* => jump vm_rec_external;

}

//---------------------------------------------------------------------
//  Record VM Box -> New multiple ones
//---------------------------------------------------------------------

context vm-rec-multiple {
	
	webdialrecord => {
		Set(CDR(amaflags)=OMIT);
		Answer();
		Wait(0.5);
		//Playback(vm-extension);
		//SayDigits(${user_name});
		Playback(vm-rec-unv);
		Record(/opt/gemeinschaft/vm-rec/${record_file}.alaw,5,300);
		Playback(vm-msgsaved);
		Playback(/opt/gemeinschaft/vm-rec/${record_file});
		Wait(1);
		Hangup();
	}
}



//---------------------------------------------------------------------
//  To Internal Users/Nobodies
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//            Gemeinschaft - asterisk cluster gemeinschaft
// 
// $Revision$
// 
// Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
// http://www.amooma.de/
// Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
// Philipp Kempgen <philipp.kempgen@amooma.de>
// Peter Kozak <peter.kozak@amooma.de>
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA 02110-1301, USA.
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//  Check if extension is valid
//---------------------------------------------------------------------

macro check-valid-extension( mext ) {
	
	Verbose(1,### -GS- Incoming call to ${mext});
	if ("${user_id}" != "") {
		// from internal user, store dial log (out)
		if ("${forwarded_by}" = "" && "${forwards}" < "1" && "${origext}" = "") {
			// only if this is the dialed number. origext will be set later
			if ("${is_callfile_origin}" != "1") {
				// __is_callfile_origin is set by call-init.php
				&dial-log-store(${user_name},out,${mext},0);
			}
		}
	}
	
	// is it to one of *our* extensions?
	AGI(/opt/gemeinschaft/dialplan-scripts/in-get-where.agi,${mext},${user_id},${CALLERID(num)},${is_huntgroup});
	Verbose(1,### -GS- Extension ${mext} is of type ${exttype});
	
	if ("${record_call}" != "") {
		Verbose(1,### -GS- Record call to file ${record_call});
		MixMonitor(${record_call},ab);
	}
	
	if ("${exttype}" != "user" && "${exttype}" != "queue" && "${exttype}" != "conference" && "${exttype}" != "huntgroup" && "${exttype}" != "ivr" && "${exttype}" != "foreign") {
		Verbose(1,### -GS- Extension ${mext} is unknown);
		
		if ("${is_from_gateway}" = "1") {
			Verbose(1,### -GS- Don't allow call from the gateway to go to the gateway again - extension: ${mext});
			//Congestion(3);
			// 2 = AST_CAUSE_NO_ROUTE_TRANSIT_NET => SIP 404 Not Found
			Set(PRI_CAUSE=2);
			Hangup(2);
		}
		
		//if ("${is_sub_system}" = "yes") {
		//	Verbose(1,### -GS- We are a sub-system. Dial to the gateway for unknown extension: ${mext});
			Verbose(1,### -GS- Dial to the gateway for unknown extension: ${mext});
			&dial-gateway(${mext});
		//} else {
		//	Verbose(1,### -GS- We are not a sub-system. Hang up.);
		//}
		Hangup();
	}
	return;
}


//---------------------------------------------------------------------
//  Dial to node
//---------------------------------------------------------------------

macro dial-node( mext_at_node ) {
	//if ("${saved_callerid}" != "") {
	//	// __saved_callerid is set by call-init.php
	//	// is this needed here? call-init.php should have picked the
	//	// correct node already
	//	Set(CALLERID(all)=${saved_callerid});
	//}
	Verbose(1,### -GS- Dial and forget: ${mext_at_node});
	SIPAddHeader(X-GS-user_id: ${user_id});
	SIPAddHeader(X-GS-user_name: ${user_name});
	SIPAddHeader(X-GS-forwards: ${forwards});
	SIPAddHeader(X-GS-origext: ${origext});
	SIPAddHeader(X-GS-clir: ${clir});
	SIPAddHeader(X-GS-src: ${is_call_from});
	SIPAddHeader(X-GS-is_callcompletion: ${is_callcompletion});
	SIPAddHeader(X-GS-is_callfile_origin: ${is_callfile_origin});
	SIPAddHeader(X-GS-callfile_from_user: ${callfile_from_user});
	SIPAddHeader(X-GS-forwarded_to: ${forwarded_to});
	SIPAddHeader(X-GS-forwarded_by: ${forwarded_by});
	SIPAddHeader(X-GS-is_from_gateway: ${is_from_gateway});
	SIPAddHeader(X-GS-is_huntgroup: ${is_huntgroup});
	SIPAddHeader(X-GS-SIPTRANSFER: ${SIPTRANSFER});
	SIPAddHeader(X-GS-BLINDTRANSFER: ${BLINDTRANSFER});
	Dial(SIP/${mext_at_node},500);
	Verbose(1,### -GS- Tried to call ${mext_at_node} but: ${DIALSTATUS});
	&hangup-proper-status();
	return;
}


//---------------------------------------------------------------------
//  To Internal Nobodies
//---------------------------------------------------------------------

context to-internal-nobody {


_95XXXX => &dial-internal-nobody(${EXTEN});

	
}

macro dial-internal-nobody( mext2 ) {
	&check-valid-extension(${mext2});
	if ("${dial_to_node}" = "") {
		Verbose(1,### -GS- Extension ${mext2} is at node: SELF);
		jump ${mext2}@to-internal-nobody-self;
	}
	else {
		&dial-node(${mext2}@${dial_to_node});
		&hangup-proper-status();
	}
	return;
}

context to-internal-nobody-self {
	
	// in this context it is guaranteed that the called extension is at
	// the local node
	

_95XXXX => &dial-internal-nobody-self(${EXTEN});

	
}

macro dial-internal-nobody-self( mext3 ) {
	Verbose(1,### -GS- Incoming call to ${mext3} at this node);
	if ("${user_id}" != "") {
		// from internal user, store dial log (out)
		AGI(/opt/gemeinschaft/dialplan-scripts/get_callerid.agi,${CALLERID(num)},internal);
		&dial-log-store(${user_name},out,${mext3},0);
	}
	&set-callerid-by-clir();
	Verbose(1,### -GS- Call local nobody ${mext3}, timeout 30);
	Dial(SIP/${mext3},30,o);
	&hangup-proper-status();
	return;
}

//---------------------------------------------------------------------
//  To Internal Users/Queues/...
//---------------------------------------------------------------------

context to-internal-users {

	//----------------------------------------------------------
	// from ISDN
	//----------------------------------------------------------
	
	//_978. => {
	//	Set(isdn_exten=${EXTEN:3});
	//	Verbose(1,### -GS- Incoming call from the PSTN to ${isdn_exten});
	//	Set(__is_from_gateway=1);
	//	jump ${isdn_exten};
	//}
	
	
	//----------------------------------------------------------
	// Fax server
	//----------------------------------------------------------
	


	
	_fa[x]-. => {
		Set(__fax_to_ext=${EXTEN:4});
		Verbose(1,### -GS- Incoming fax to fax server extension for ${fax_to_ext});
		Dial(IAX2/iaxmodem00/${fax_to_ext});
		Dial(IAX2/iaxmodem01/${fax_to_ext});
		// REPEAT AS MANY TIMES AS YOU HAVE IAXMODEMS CONFIGURED.
		// EACH IAXMODEM CAN HANDLE ONE CALL AT A TIME.
		// FIXME!?
		Hangup();
	}
	
	
	//----------------------------------------------------------
	// Dialing voicemail, used in call-forwarding
	//----------------------------------------------------------
	
	_vm. => {
		Set(CHANNEL(language)=de);
		Set(box=${EXTEN:2});
		if ("${box:0:1}" = "*") {
			Set(box=${box:1});
			Set(record_msg=0);
		}
		else {
			Set(record_msg=1);
		}
		AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-vm.agi,${box});
		if ("${user_id}" != "") {
			Set(vm_source=internal);
		}
		else {	
			if ("${is_sub_system}" = "yes") {
						
				&is_dmz(${CALLERID(num)});
				if ("${is_dmz}" == "1") {
					Set(vm_source=internal);
				}
				else {
					Set(vm_source=external);
				}
	
			}
			else {
				
				if ( "${is_from_gateway}" = "" ) {
					Set(vm_source=internal);
				}
				else {
					Set(vm_source=external);
				}
			}
		}
		Verbose(1,### -GS- Forwarded call to voicemail of ${box});
		Answer();
		Wait(0.5);
		//set the multiple announce-File, if any
		Set(vm_announce_file_multi=${fw_file_${vm_source}_${forward_case}});
		Verbose(1,### -GS- The File is: ${vm_announce_file_multi} );
		if ("${vm_announce_file_multi}" != "") {
			Set(vm_announce_file=${vm_announce_file_multi});
		} else {
			Set(vm_announce_file=${vm_announce_${vm_source}});
		}
		if ("${vm_announce_file}" != "") {
			Playback(${vm_announce_file});
		}
		else {
			Playback(vm-theperson);
			//SayDigits(${origext});
			SayDigits(${box});
			//if ("${DIALSTATUS}" = "BUSY") {
			//	Playback(vm-isonphone);
			//}
			//else {
				Playback(vm-isunavail);
			//}
		}
		if ("${record_msg}" = "1") {
			if ("${vm_announce_file}" = "") {
				Playback(vm-intro);
			}
			VoiceMail(${box},s);
		}
		Hangup();
	}
	
	
	//----------------------------------------------------------
	// Users, Queues, ...
	//----------------------------------------------------------
	
	_X. => {
		if ( "${is_from_gateway}" != "" ) {
			Verbose(1,### -GS- Incoming call from a gateway to ${EXTEN});
			//Set(__is_from_gateway=1);
		}
		//else if ("${CHANNEL(channeltype)}" = "SIP") {
		//	// this needs to be nested because Asterisk would otherwise complain
		//	// ("function_sipchaninfo_read: This function can only be used on SIP channels")
		//	if ("${SIPCHANINFO(peername)}" = "gateway") {
		//		Verbose(1,### -GS- Incoming call from a gateway to ${EXTEN});
		//		Set(__is_from_gateway=1);
		//	}
		//	else {
		//		Set(__is_from_gateway=);
		//	}
		//}
		//else {
		//	Set(__is_from_gateway=);
		//}
		&pass-connid();
		&check-valid-extension(${EXTEN});
		if ("${dial_to_node}" = "") {
			Verbose(1,### -GS- Extension ${EXTEN} is at node: SELF);
			if ("${user_id}" != "") {
				AGI(/opt/gemeinschaft/dialplan-scripts/get_callerid.agi,${CALLERID(num)},internal);
			}
			jump ${EXTEN}@to-internal-users-self;
		}
		else {
			if ("${exttype}" != "foreign") {
				if ("${user_id}" != "") {
					AGI(/opt/gemeinschaft/dialplan-scripts/get_callerid.agi,${CALLERID(num)},internal);
				}
				&dial-node(${EXTEN}@${dial_to_node});
				&hangup-proper-status();
			}
			else {
				if ("${is_sub_system}" = "yes") {
					Verbose(1,### -GS- We are a sub-system. Dial to the gateway for foreign ext. ${EXTEN}.);
					&dial-gateway(${EXTEN});
				} else {
					Verbose(1,### -GS- We are not a sub-system. Call foreign ext. ${EXTEN} directly.);
					Dial(SIP/${EXTEN}@${dial_to_node},70);
				}
				Hangup();
			}
		}
	}
	
	
	//----------------------------------------------------------
	// Pickup
	//----------------------------------------------------------
	
	/*
	_*8. => {
		//&dial-node(${EXTEN}@gs-0002);
		if ("${PICKUPMARK}" = "") {
			Set(pmark=${EXTEN:2});
			Verbose(1,### -GS- User ${user_name} tries to pickup ${pmark});
			DPickup(${pmark}@PICKUPMARK);
		}
	}
	*/
	
	//----------------------------------------------------------
	// Pickup for single users
	//----------------------------------------------------------
	

	_*81*. => {
 		Set(pext=${EXTEN:4});
		if ("${pext}" != "") {
 			Verbose(1,### -GS- User ${user_name} tries to pickup ext. ${pext});
			// Override searching for huntgroups when picking calls
			Set(is_huntgroup=1);
 			&check-valid-extension(${EXTEN:4});
			if ("${dial_to_node}" = "") {
				
				AGI(/opt/gemeinschaft/dialplan-scripts/check_pickup_permission.agi,${user_id},${EXTEN:4});
				if ("${pickup}" != "true") {
					Verbose(1,### -GS- ${user_name} is not allowed to pickup extension ${EXTEN:4});
					Hangup();
				}
		
				Verbose(1,### -GS- Extension ${EXTEN} is at node: SELF);
				PickupChan(SIP/${pext});
			}
			else {
				&dial-node(${EXTEN}@${dial_to_node});
				&hangup-proper-status();
			}
		}
	}

	//----------------------------------------------------------
	// Pickup on Grandstream phones
	//----------------------------------------------------------
	
	_**. => {
		// the pickup prefix (**) is not configurable on Grandstream phones
		Set(pext=${EXTEN:2});
		jump *81*${pext};
	}
	
	//----------------------------------------------------------
	// Pickup for pickup group extensions
	//----------------------------------------------------------
	
	_*82*8*. => {
		// directly used by Snom (see htdocs/prov/snom/settings.php)
		if ("${PICKUPMARK}" = "") {
			Set(pmark=${EXTEN:6});
			Verbose(1,### -GS- User ${user_name} tries to pickup group ${pmark});
			//FIXME - add pickup group check
			DPickup(${pmark}@PICKUPMARK);
			//FIXME - does not work across nodes
			
			// if we got here, the pickup attempt was not successful
			// (maybe because there wasn't even a call)
			NoCDR();
			// 31 = AST_CAUSE_NORMAL_UNSPECIFIED => SIP 480 Temporarily unavailable
			Hangup(31);
		}
		else {
			NoCDR();
		}
	}
	
	//----------------------------------------------------------
	// Pickup group extensions
	//----------------------------------------------------------
	
	_*8*. => {
		if ("${PICKUPMARK}" != "") {
			NoCDR();
			Verbose(1,### -GS- Call to pickup group ${EXTEN:3});
		}
		else {
			// used by Siemens OpenStage
			jump *82${EXTEN};
		}
	}
	
	//hint(SIP/2001&SIP/555) *8*00001 => {}
	
	
	//regexten _*8. => NoOp(it's a pattern!);
	//hint(SIP/2002) _*8. => NoOp(it's a pattern!);
	/*
	hint(SIP/2002) _*8. => {
		if ("${PICKUPMARK}" = "") {
			Pickup(${EXTEN:2}@PICKUPMARK);
			Verbose(1,### -GS- );
		}
	}
	hint(*800001) *800001 => {}
	*/
	
	
	//----------------------------------------------------------
	// Intercom
	//----------------------------------------------------------
	
	_*85*. => {
		Set(iext=${EXTEN:4});
		Verbose(1,### -GS- Intercom call to ${iext});
		&pass-connid();

		if ("${is_from_gateway}" = "1") {
			Verbose(1,### -GS- No intercom from gateway);
			Hangup();
		}
		if ("${user_id}" = "") {
			Verbose(1,### -GS- No intercom from non-internal user);
			Hangup();
		}
		// is it to one of *our* extensions?
		AGI(/opt/gemeinschaft/dialplan-scripts/in-get-where.agi,${iext});
		Verbose(1,### -GS- Extension ${iext} is of type ${exttype});
		if ("${exttype}" != "user") {
		Verbose(1,### -GS- Extension ${iext} is not a user);
			Hangup();
		}
		if ("${dial_to_node}" != "") {
			Verbose(1,### -GS- Extension ${iext} is not on this node);
			Hangup();
		}
		
		AGI(/opt/gemeinschaft/dialplan-scripts/check-group-permission.agi,${user_id},${iext},intercom);
		if ("${permission}" != "true") {
			Verbose(1,### -GS- ${user_name} have no intercom permission to ${iext});
			Hangup();
		}
		
		//Set(CALLERID(name)=ICOM ${CALLERID(name)});		
		SIPAddHeader(Call-Info: <http://127.0.0.1>\;answer-after=0);
		Dial(SIP/${iext},30);
		&hangup-proper-status();
	}	

	
	//----------------------------------------------------------
	// Boss/secretary function (override call forwards)
	//----------------------------------------------------------
	
	_***Z. => {
		Set(boss=${EXTEN:3});
		if ("${allow_direct_dial}" != "yes") {
			Verbose(1,### -GS- Direct dialing not enabled);
			Hangup();
		}
		Verbose(1,### -GS- Incoming call to ${boss}, direct dial);
		&pass-connid();
		
		//if ("${is_from_gateway}" = "1" || "${SIPCHANINFO(peername)}" = "gateway" || "${CONTEXT}" = "from-gateway" || "${CHANNEL(channeltype)}" = "Zap") {
		if ( "${is_from_gateway}"  =  "1" ) {
			Verbose(1,### -GS- No direct dial from gateway);
			Hangup();
		}
		if ("${user_id}" = "") {
			Verbose(1,### -GS- No direct dial from non-internal user);
			Hangup();
		}
		// is it to one of *our* extensions?
		AGI(/opt/gemeinschaft/dialplan-scripts/in-get-where.agi,${boss});
		Verbose(1,### -GS- Extension ${boss} is of type ${exttype});
		if ("${exttype}" != "user") {
			Verbose(1,### -GS- Extension ${boss} is not a user);
			Hangup();
		}
		AGI(/opt/gemeinschaft/dialplan-scripts/check_secretary_permission.agi,${user_id},${boss});
		if ("${issecretary}" != "true") {
			Verbose(1,### -GS- ${user_name} is not secretary of ${boss});
			Hangup();
		}
		if ("${dial_to_node}" != "") {
			Verbose(1,### -GS- Extension ${boss} is not on this node - You did not set up boss/secretary properly!);
			Hangup();
		}
		
		// do some checking if user is a secretary of boss
		// ...
		
		jump ***-${boss}@to-internal-users-self;
	}
	
	// hints moved here from context to-internal-users-self

// hints for user extensions (auto-generated):
hint(SIP/999999) 999999 => {}
hint(SIP/999999) ***999999 => {}
hint(Custom:999999fwd) 999999fwd => {}
hint(SIP/100) 100 => {}
hint(SIP/100) ***100 => {}
hint(Custom:100fwd) 100fwd => {}
hint(SIP/101) 101 => {}
hint(SIP/101) ***101 => {}
hint(Custom:101fwd) 101fwd => {}
hint(SIP/102) 102 => {}
hint(SIP/102) ***102 => {}
hint(Custom:102fwd) 102fwd => {}
// end

// hints for pickup groups (auto-generated):
// end

	
	//FIXME - this extension is just for testing. needs to be removed!
	//_9. => {
	//	Verbose(1,### -GS- GATEWAY SIM ######################);
	//	Dial(Local/${EXTEN:1}@from-gg-pstn/n);
	//	Hangup();
	//}
}

context to-internal-users-huntgroup {

	_Z. => {
		Set(is_huntgroup=1);
		jump ${EXTEN}@to-internal-users;
	}

}

context to-internal-users-self {
	
	// in this context it is guaranteed that the called extension is at
	// the local node

	//----------------------------------------------------------
	// Pickup
	//----------------------------------------------------------
	
	_*81*. => {
		Set(pext=${EXTEN:4});
		if ("${pext}" != "") {
			Verbose(1,### -GS- User ${user_name} tries to pickup ext. ${pext});
			PickupChan(SIP/${pext});
                }
        }



	//----------------------------------------------------------
	// Boss/secretary function (override call forwards)
	//----------------------------------------------------------
	
	_***-Z. => {
		Set(boss=${EXTEN:4});
		Set(origext=${boss});
		Set(CALLERID(dnid)=${boss});
		Verbose(1,### Secretary (${user_name}) to boss (${boss}) direct dial);
		Set(__is_call_from=internal);
		&pass-connid();
		// get ringer
		AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-ringer.agi,${boss},${is_call_from});
		if ("${ringer}" != "") {
			Verbose(1,### -GS- Ringer: ${ringer});
			SIPAddHeader(Alert-Info: ${ringer});
		}
		//if ("${saved_callerid}" != "") {
		//	// __saved_callerid is set by call-init.php
		//	Set(CALLERID(all)=${saved_callerid});
		//}
		Set(CALLERID(name)=Sek. ${CALLERID(name)});
		Dial(SIP/${boss},30);
		&hangup-proper-status();
	}
	
	
	//----------------------------------------------------------
	// callfile to origin user
	//----------------------------------------------------------
	
	_urldial-Z. => {
		Set(callfile_from=${EXTEN:8});
		Set(origext=${callfile_from});
		Set(CALLERID(dnid)=${callfile_from});
		Verbose(1,### -GS- callfile_from ${callfile_from});
		Set(__is_call_from=internal);
		// get ringer
		AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-ringer.agi,${callfile_from},${is_call_from});
		if ("${ringer}" != "") {
			Verbose(1,### -GS- Ringer: ${ringer});
			SIPAddHeader(Alert-Info: ${ringer});
		}
		Dial(SIP/${callfile_from},30);
		&hangup-proper-status();
	}
	
	//----------------------------------------------------------
	// Users, Queues, ...
	//----------------------------------------------------------
	
	_X. => {
		
		Verbose(1,### -GS- Incoming call to ${EXTEN} at this node);
		
		//if ("${saved_callerid}" != "") {
		//	// __saved_callerid is set by call-init.php
		//	Set(CALLERID(all)=${saved_callerid});
		//}
		
		Set(CHANNEL(language)=de);
		if ("${from_node}" = "yes") {
			Verbose(1,### -GS- Incoming call to ${EXTEN} is from another node);
			if ("${CHANNEL(channeltype)}" = "SIP") {
				if ("${SIP_HEADER(X-GS-user_id)}" != "")
					Set(__user_id=${SIP_HEADER(X-GS-user_id)});
				if ("${SIP_HEADER(X-GS-user_name)}" != "")
					Set(__user_name=${SIP_HEADER(X-GS-user_name)});
				if ("${SIP_HEADER(X-GS-forwards)}" != "")
					Set(__forwards=${SIP_HEADER(X-GS-forwards)});
				if ("${SIP_HEADER(X-GS-origext)}" != "")
					Set(__origext=${SIP_HEADER(X-GS-origext)});
				if ("${SIP_HEADER(X-GS-clir)}" != "")
					Set(clir=${SIP_HEADER(X-GS-clir)});  // nicht vererben
				if ("${SIP_HEADER(X-GS-src)}" != "")
					Set(__is_call_from=${SIP_HEADER(X-GS-src)});
				if ("${SIP_HEADER(X-GS-is_callcompletion)}" != "")
					Set(__is_callcompletion=${SIP_HEADER(X-GS-is_callcompletion)});
				if ("${SIP_HEADER(X-GS-is_callfile_origin)}" != "")
					Set(__is_callfile_origin=${SIP_HEADER(X-GS-is_callfile_origin)});
				if ("${SIP_HEADER(X-GS-callfile_from_user)}" != "")
					Set(__callfile_from_user=${SIP_HEADER(X-GS-callfile_from_user)});
				if ("${SIP_HEADER(X-GS-forwarded_to)}" != "")
					Set(__forwarded_to=${SIP_HEADER(X-GS-forwarded_to)});
				if ("${SIP_HEADER(X-GS-forwarded_by)}" != "")
					Set(__forwarded_by=${SIP_HEADER(X-GS-forwarded_by)});
				if ("${SIP_HEADER(X-GS-is_from_gateway)}" != "")
					Set(__is_from_gateway=${SIP_HEADER(X-GS-is_from_gateway)});
				if ("${SIP_HEADER(X-GS-is_huntgroup)}" != "")
					Set(__is_huntgroup=${SIP_HEADER(is_huntgroup)});
				if ("${SIP_HEADER(X-GS-SIPTRANSFER)}" != "")
					Set(__SIPTRANSFER=${SIP_HEADER(X-GS-SIPTRANSFER)});
				if ("${SIP_HEADER(X-GS-BLINDTRANSFER)}" != "")
					Set(__BLINDTRANSFER=${SIP_HEADER(X-GS-BLINDTRANSFER)});
			}
			//else {
				//if ("${CHANNEL(channeltype)}" != "Local") {
					// because we need to pass variables to other nodes which can
					// only be done with SIP we support only SIP for inter-node
					// connections. (and calls from Local can also get here of
					// course.)
				//}
			//}
		}
		&pass-connid();
		
		if ("${forwards}" = "") {
			Set(__forwards=-1);
			
			if ("${user_id}" != "") {
				Set(__is_call_from=internal);
				
				// from internal user, store dial log (out)
				//&dial-log-store(${user_name},out,${EXTEN});
				// we already did this
			}
			else {
				if ("${is_callfile_origin}" != "1") {
					if ("${is_sub_system}" = "yes") {
						
						&is_dmz(${CALLERID(num)});
						if ("${is_dmz}" == "1") {
							Set(__is_call_from=internal);
						}
						else {
							Set(__is_call_from=external);
						}
	
					}
					else {
				
						if ( "${is_from_gateway}" = "" ) {
							Set(__is_call_from=internal);
						}
						else {
							Set(__is_call_from=external);
						}
					}
				}
				else {
					Set(__is_call_from=internal);
				}
			}
		}
		if ("${forwards}" = "${max_forwards}") {
			Verbose(1,### Maximum number of call forwards (${max_forwards}));
			goto user_uncallable;
		}
		Set(__forwards=${MATH(${forwards}+1,int)});
		//Set(DYNAMIC_FEATURES=);
		if ("${origext}" = "")
			Set(__origext=${EXTEN});
		
		&set-callerid-by-clir();
		
		// check the type of the called extension:
		AGI(/opt/gemeinschaft/dialplan-scripts/in-get-type.agi,${EXTEN},${is_huntgroup});
		Verbose(1,### -GS- Incoming call to ${EXTEN}, type: ${exttype}, forwards: ${forwards});
		
		// is it a user? is it a queue?
		if ("${exttype}" = "huntgroup")
			goto to_huntgroup;
		if ("${exttype}" = "user")
			goto to_user;
		if ("${exttype}" = "queue")
			goto to_queue;
		if ("${exttype}" = "unknown")
			goto to_unknown;
		if ("${exttype}" = "ivr")
			goto to_ivr;
		// the AGI script failed:
		Verbose(1,### The AGI script returned an empty or bad type ("${exttype}")!);
		Hangup();

		//----------------------------------------------------------
		// type is "huntgroup":
		//----------------------------------------------------------
		to_huntgroup:
			Set(is_huntgroup=1);
			AGI(/opt/gemeinschaft/dialplan-scripts/in-huntgroup-get.agi,${EXTEN},${is_call_from});
			Set(huntgroup=1);
			
			AGI(/opt/gemeinschaft/dialplan-scripts/in-huntgroup-get-fw.agi,${EXTEN});
			// forward (case=always) active?
			if ("${fw_${is_call_from}_always}" != "") {
				Verbose(1,### -GS- Called huntgroup: ${EXTEN} - always forward to: ${fw_${is_call_from}_always});
				Set(__forwarded_by=${EXTEN});
				Set(__forwarded_by_name=);
				if ( "${is_from_gateway}" = "1" )
					Set(__is_from_gateway=2);
				Set(__redirect=${fw_${is_call_from}_always});
				Dial(Local/${fw_${is_call_from}_always}/n,900);
				&hangup-proper-status();
			}

			if ("${huntgroup_busy}" = "1") {
				while ("${huntgroup_${huntgroup}_dial}" != "") {
					if ("${DEVICE_STATE(SIP/${huntgroup_${huntgroup}_dial})}" = "INUSE") {
						Verbose(1,### -GS- Extension ${huntgroup_${huntgroup}_dial} in the huntgroup is busy);
						Set(huntgroup=1);
						while ("${huntgroup_${huntgroup}_dial}" != "") {
							&dial-log-store(${huntgroup_${huntgroup}_dial},missed,${CALLERID(num)},0);
							huntgroup=${huntgroup}+1;
						}

						Set(DIALSTATUS=BUSY);
						&hangup-proper-status();
					}
					huntgroup=${huntgroup}+1;
				}
				Set(huntgroup=1);
			}
			
			if ("${huntgroup_strategy}" = "linear") {
				while ("${huntgroup_${huntgroup}_dial}" != "") {
					Verbose(1,### -GS- huntgroup member: ${huntgroup_${huntgroup}_dial});
					Dial(Local/${huntgroup_${huntgroup}_dial}@to-internal-users-huntgroup,${huntgroup_${huntgroup}_timeout},o);
					huntgroup=${huntgroup}+1;
					}
			} else {
				Verbose(1,### -GS- Dialling hunt group ${EXTEN} in parallel mode);
				Dial(${huntgroup_dial},${huntgroup_timeout},o);
			}
			Verbose(1,### -GS- finished trying huntgroup members. Last dialstatus: ${DIALSTATUS});
			if("${DIALSTATUS}" = "CHANUNAVAIL"){
				//"CHANUNAVAIL" may also be the dialstatus if nobody answers
				Set(DIALSTATUS=NOANSWER);
				Verbose(1,### -GS- Changed DIALSTATUS from CHANUNAVAIL to ${DIALSTATUS});
			}
			//write to log if nobody answered
			if("${DIALSTATUS}" = "NOANSWER"){
				Set(huntgroup=1);
				while ("${huntgroup_${huntgroup}_dial}" != "") {
					&dial-log-store(${huntgroup_${huntgroup}_dial},missed,${CALLERID(num)},0);
					huntgroup=${huntgroup}+1;
				}
			}

			if ("${fw_${is_call_from}_timeout}" != "") {
			  Verbose(1,### -GS- forwarding call to ${fw_${is_call_from}_timeout});
			  Set(__forwarded_by=${EXTEN});
			  Set(__forwarded_by_name=);
			  if ( "${is_from_gateway}" = "1" )
				  Set(__is_from_gateway=2);
			  Set(__redirect=${fw_${is_call_from}_timeout});	
			  Dial(Local/${fw_${is_call_from}_timeout}/n,900);
			}
			&hangup-proper-status();

		//----------------------------------------------------------
		// type is "user":
		//----------------------------------------------------------
		to_user:
			AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-fw.agi,${EXTEN},${fw_parcall_extens});
			// forward (case=always) active?
			// XXX TODO check for is_huntgroup!!!
			if ("${fw_${is_call_from}_always_${EXTEN}_done}" == "" ) {
				if ("${fw_${is_call_from}_always}" != "") {
					Set(__forward_case=always);
					Set(__fw_parcall_extens=${fw_parcallextens_${is_call_from}_always});
					Set(parcall_item=1);
					while ("${fw_parcallexten_${parcall_item}}" != "") {
						if (${GROUP_COUNT(callcount${fw_parcallexten_${parcall_item}})} > 0) {
							Verbose(1,### -GS- User ${fw_parcallexten_${parcall_item}} of parallel call is BUSY);
							Set(DIALSTATUS="BUSY");
							goto user_busy;
						}
						parcall_item=${parcall_item}+1;
					}
					if ("${fw_${is_call_from}_always_${EXTEN}}" == "")
						Set(__fw_${is_call_from}_always_${EXTEN}_done=1);
					if ("${is_callcompletion}" = "1") {
						// no forwarding for call completion
						Verbose(1,### -GS- Call completion to ${EXTEN} - don't forward);
						Hangup();
					}
					if ("${is_callfile_origin}" != "1") {
						Verbose(1,### -GS- Called user: ${EXTEN} - always forward to: ${fw_${is_call_from}_always});
						Set(__forwarded_by=${EXTEN});
						Set(__forwarded_by_name=${mname});
						Set(__forwarded_to=${fw_${is_call_from}_always});
						if ( "${is_from_gateway}" = "1" )
							Set(__is_from_gateway=2);
						Dial(Local/${fw_${is_call_from}_always}/n,200);
						&hangup-proper-status();
					}
					else {
						// no forwarding for callfile origin
						Verbose(1,### -GS- Callfile: Don't forward for origin side);
					}
				}
				else {
					// no forwarding for callfile origin
					Verbose(1,### -GS- Callfile: Don't forward for origin side);
				}
			}
			// call the user
			//
			if ("${is_huntgroup}" != "1") {
			Set(dialtimeout=45);
				if ("${is_callfile_origin}" != "1") {
					if ("${fw_${is_call_from}_unavail}" != "") {
						Set(dialtimeout=${fw_${is_call_from}_unavail_timeout});
					}
				}
				else {
					Set(dialtimeout=15);
				}
			}
			
			// get ringer
			if ( "${forwards}" != "0" ) {
				
				//we will remove the Alert-Info header here
				&sip-remove-header(Alert-Info);

			}
			AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-ringer.agi,${EXTEN},${is_call_from});
			if ("${ringer}" != "") {
				Verbose(1,### -GS- Ringer: ${ringer});
				//SIPAddHeader(Alert-Info: <http://192.168.1.110:82/ringtones/${ringer}>);
				SIPAddHeader(Alert-Info: ${ringer});
			}
			
			if ("${is_callfile_origin}" != "1") {
				AGI(/opt/gemeinschaft/dialplan-scripts/in-user-pgrpdialstr.agi,${EXTEN});
			}
			else {
				Set(pgrpdialstr=);
			}
			if ("${dialtimeout}" != "") {
				Verbose(1,### -GS- Call local user ${EXTEN}, timeout: ${dialtimeout} s);
			}
			else {
				Verbose(1,### -GS- Call local user ${EXTEN}, timeout: none);
			}

			AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-dnd.agi,${EXTEN});
			if ("${dnd_active}" = "1") {
				Set(DIALSTATUS="BUSY");
				if ("${is_huntgroup}" = "1") {
					Verbose(1,### -GS- DND active in huntgroup - skipping member);
					Hangup();
				}
			}
			else {
				if( "${forwarded_by}" != "" ) {
					Set(CALLERID(name)=);
				} 
				AGI(/opt/gemeinschaft/dialplan-scripts/in-get-callername.agi,${EXTEN},${CALLERID(num)},${is_call_from});
				if( "${forwarded_by}" != "" ) {
                                        if( "${CALLERID(name)}" = "" ) {
						Set(CALLERID(name)=${CALLERID(num)});
					}
					Set(CALLERID(name)=${CALLERID(name)} >> ${forwarded_by} ${forwarded_by_name});
                                }
				if ("${SIPTRANSFER}" = "yes") {

				Set(callback_user=$["${BLINDTRANSFER}" : "^SIP/([0-9]+)"]);
					if ("${callback_user}" == "${EXTEN}") {
						Set(CALLERID(name)="[RR] ${CALLERID(name)}");
					}
				}
				//UserEvent(UserCallUI,user: ${user_name},calledparty: ${EXTEN});
				Set(GROUP()=callcount${EXTEN});
				Dial(SIP/${EXTEN}${pgrpdialstr},${dialtimeout},o);
			}
			
			if ("${is_callfile_origin}" != "1") {
				if ("${is_huntgroup}" == "1") {
					Verbose(1,### -GS- No callforwarding in huntgroups);
					Hangup();
				}
				Set(is_dnd=0);
				if ("${DIALSTATUS}" = "BUSY") {         // busy or deflected
					//if ("${HANGUPCAUSE}" = "19" || "${HANGUPCAUSE}" = "21") {
					//	// 19 = AST_CAUSE_NO_ANSWER, 21 = AST_CAUSE_CALL_REJECTED
					//	// This might happen because of DND.
					//	Verbose(1,### -GS- Local user ${EXTEN} is on DND - rejected);
					//	Set(is_dnd=1);
					//}
					if ("${CHANNEL(channeltype)}" = "SIP") {
						if ("${SIPPEER(${EXTEN},limit)}" != "" && "${SIPPEER(${EXTEN},limit)}" > "0") {
							if ("${SIPPEER(${EXTEN},curcalls)}" = "0") {
								// busy with 0 calls? we don't believe them, must be DND
								Verbose(1,### -GS- Local user ${EXTEN} is on DND - busy with 0 calls);
								Set(is_dnd=1);
							}
						}
					}
					goto user_busy;
					
				}
				if ("${DIALSTATUS}" = "NOANSWER") {     // does not answer the phone
					goto user_unavail;
				}
				if ("${DIALSTATUS}" = "CHANUNAVAIL") {  // offline
					goto user_offline;
				}
				if ("${DIALSTATUS}" = "CONGESTION") {   // congestion or DND
					if ("${CDR(duration)}" = "0" || "${CDR(duration)}" = "1") {
						Verbose(1,### -GS- Local user ${EXTEN} is on DND - 0 duration);
						Set(is_dnd=1);
					}
					goto user_offline;
				}
			}
			else {
				if ("${is_huntgroup}" = "1") {
					Verbose(1,### -GS- Callfile: huntgroup user ${callfile_from_user} did not answer);
					Hangup();
				}
				else {
					Verbose(1,### -GS- Callfile: Origin user ${callfile_from_user} did not answer);
					NoCDR();
				}
			}
			Hangup();
			
			// user busy:
			//
			user_busy:
				Verbose(1,### -GS- Called user ${EXTEN} is busy);
				

				//(auto-generated) {

				if ("${SIPTRANSFER}" = "yes") {
					Set(callback_user=$["${BLINDTRANSFER}" : "^SIP/([0-9]+)"]);
					if ("${callback_user}" != "${EXTEN}") {
						Wait(1);
						jump ${callback_user}@from-internal-users;
					}
					else {
						Busy();
					}
				}
				//} (auto-generated)
				
				// forward on busy?
				if ("${fw_${is_call_from}_busy}" != "") {
					Set(__forward_case=busy);
					if ("${is_callcompletion}" = "1") {
						// no forwarding for call completion
						Verbose(1,### Call completion to ${EXTEN} (busy) - don't forward);
						&hangup-proper-status();
					}
					Verbose(1,### -GS- Called user: ${EXTEN}, forward on busy to: ${fw_${is_call_from}_busy});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_by_name=${mname});
					Set(__forwarded_to=${fw_${is_call_from}_busy});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Dial(Local/${fw_${is_call_from}_busy}/n,200);
					&hangup-proper-status();
				}
				goto user_uncallable;
			
			// user unavail (does not pick up the phone):
			//
			user_unavail:
				Verbose(1,### -GS- Called user ${EXTEN} does not answer);
				

				//(auto-generated) {

				if ("${SIPTRANSFER}" = "yes") {
					Set(callback_user=$["${BLINDTRANSFER}" : "^SIP/([0-9]+)"]);
					if ("${callback_user}" != "${EXTEN}") {
						Wait(1);
						jump ${callback_user}@from-internal-users;
					}
					else {
						Busy();
					}
				}
				//} (auto-generated)
				
				// forward on unavail?
				if ("${fw_${is_call_from}_unavail}" != "") {
					Set(__forward_case=unavail);
					if ("${is_callcompletion}" = "1") {
						// no forwarding for call completion
						Verbose(1,### Call completion to ${EXTEN} (unavail) - don't forward);
						&hangup-proper-status();
					}
					Verbose(1,### -GS- Called user ${EXTEN} - forward on unavail to: ${fw_${is_call_from}_unavail});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_by_name=${mname});
					Set(__forwarded_to=${fw_${is_call_from}_unavail});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Dial(Local/${fw_${is_call_from}_unavail}/n,200);
					&hangup-proper-status();
				}
				goto user_uncallable;
			
			// user offline:
			//
			user_offline:
				Verbose(1,### -GS- Called user ${EXTEN} is offline);


				//(auto-generated) {

				if ("${SIPTRANSFER}" = "yes") {
					Set(callback_user=$["${BLINDTRANSFER}" : "^SIP/([0-9]+)"]);
					if ("${callback_user}" != "${EXTEN}") {
						Wait(1);
						jump ${callback_user}@from-internal-users;
					}
					else {
						Busy();
					}
				}
				//} (auto-generated)

				// forward on offline?
				if ("${fw_${is_call_from}_offline}" != "") {
					Set(__forward_case=offline);
					if ("${is_callcompletion}" = "1") {
						// no forwarding for call completion
						Verbose(1,### Call completion to ${EXTEN} (offline) - don't forward);
						&hangup-proper-status();
					}
					Verbose(1,### -GS- Called user: ${EXTEN} - forward on offline to: ${fw_${is_call_from}_offline});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_by_name=${mname});
					Set(__forwarded_to=${fw_${is_call_from}_offline});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Dial(Local/${fw_${is_call_from}_offline}/n,200);
					Congestion(3);
					&hangup-proper-status();
				}
				goto user_uncallable;
			
			//}
		
		//----------------------------------------------------------
		// type is "queue":
		//----------------------------------------------------------
		to_queue:
			
			//Verbose(1,### -GS- Called queue: ${EXTEN});
			
			AGI(/opt/gemeinschaft/dialplan-scripts/in-queue-get-fw.agi,${EXTEN});
			// sets fw_*_* and ring_instead_of_moh
			// and queue_displayname
			
			// forward (case=always) active?
			if ("${fw_${is_call_from}_always}" != "") {
				Set(__forward_case=always);
				Verbose(1,### -GS- Called queue: ${EXTEN} - always forward to: ${fw_${is_call_from}_always});
				Set(__forwarded_by=${EXTEN});
				Set(__forwarded_by_name=);
				Set(__forwarded_to=${fw_${is_call_from}_always});
				if ( "${is_from_gateway}" = "1" )
					Set(__is_from_gateway=2);
				Dial(Local/${fw_${is_call_from}_always}/n,900);
				&hangup-proper-status();
			}

			AGI(/opt/gemeinschaft/dialplan-scripts/queue-get-members.agi,${EXTEN});
			Set(queuetimeout=3600);
			if ("${fw_${is_call_from}_timeout}" != "")
				Set(queuetimeout=${fw_${is_call_from}_timeout_timeout});
			
			if ("${queuetimeout}" != "") {
				Verbose(1,### -GS- Enter local queue ${EXTEN}, timeout: ${queuetimeout} s);
			}
			else {
				Verbose(1,### -GS- Enter local queue ${EXTEN}, timeout: none);
			}
			
			//Set(CALLERID(name)=Queue ${EXTEN});
			//Set(CALLERID(name)=Q${EXTEN} ${CALLERID(name)});
			Set(CALLERID(name)=[${queue_displayname}] ${CALLERID(name)});
			if ("${CALLERID(num)}" = "")
				Set(CALLERID(num)=${EXTEN});
			
			Set(all_busy=);
			
			// SONDERFALL HACK
			//if ("${EXTEN}" = "5000") {
			//	Answer();
			//	Wait(0.5);
			//	Set(ring_instead_of_moh=r);
			//	Set(queuetimeout=30);
			//	Verbose(1,### -GS- Sonderfall fuer Queue ${EXTEN} - klingeln statt MOH, timeout: ${queuetimeout});
			//	AGI(/opt/gemeinschaft/dialplan-scripts/queue-num-avail-members.agi,${EXTEN});
			//	Verbose(1,### -GS- Sonderfall fuer Queue ${EXTEN} - Agenten: ${queue_num_members}, frei: ${queue_avail_members});
			//	if ("${queue_avail_members}" = "0") {
			//		Set(all_busy=1);
			//		if ("${queue_num_members}" = "0") {
			//			// empty:
			//			Set(QUEUESTATUS=JOINEMPTY);
			//			Verbose(1,### -GS- Sonderfall fuer Queue ${EXTEN} - keine Agenten, behandeln wie ${QUEUESTATUS});
			//		}
			//		else {
			//			// treat like full:
			//			Set(QUEUESTATUS=FULL);
			//			Verbose(1,### -GS- Sonderfall fuer Queue ${EXTEN} - alle besetzt, behandeln wie ${QUEUESTATUS});
			//		}
			//	}
			//}
			// ENDE SONDERFALL HACK
			
			if ("${all_busy}" != "1") {
				AGI(/opt/gemeinschaft/dialplan-scripts/queue-get-sysrec,${EXTEN});
				if ("${sysrec_filename}" != "") {
					Answer();
					Wait(0.5);
					Playback(/opt/gemeinschaft/sys-rec/${sysrec_filename});
				}
				if ("${ring_instead_of_moh}" = "r") {
					//Proceeding();  // SIP: "100 Trying"
					TryExec(Proceeding());  // Proceeding() was added in Asterisk 1.6
					if ("${TRYSTATUS}"="NOAPP") {
						Verbose(1,### -GS- Proceeding ...);
						Ringing();
					}
				}
				else {
					Set(ring_instead_of_moh=);
					//Progress();  // SIP: "183 Session Progress" with early media
					Answer();
					Wait(0.5);
				}
				Queue(${EXTEN},${ring_instead_of_moh},${subqueue},,${queuetimeout});
			}
			else {
				Verbose(1,### -GS- Don't even try to enter queue ${EXTEN} because: ${QUEUESTATUS});
				// fake ENTERQUEUE in log:
				QueueLog(${EXTEN},${UNIQUEID},NONE,ENTERQUEUE,,${CALLERID(num)},fake);
				Set(queue_waittime=0);
				if ("${QUEUESTATUS}"="JOINEMPTY" || "${QUEUESTATUS}"="JOINUNAVAIL") {
					//QueueLog(${EXTEN},${UNIQUEID},NONE,EXITEMPTY,pos,origpos,waittime,fake);
					QueueLog(${EXTEN},${UNIQUEID},NONE,EXITEMPTY,,,0,fake);
				}
				else if ("${QUEUESTATUS}"="LEAVEEMPTY" || "${QUEUESTATUS}"="LEAVEUNAVAIL") {
					QueueLog(${EXTEN},${UNIQUEID},NONE,EXITEMPTY,,,${queue_waittime},fake);
				}
				else if ("${QUEUESTATUS}"="FULL") {
					QueueLog(${EXTEN},${UNIQUEID},NONE,_EXITFULL,,,,fake);
					// custom event
				} else {
					// There is no QUEUESTATUS, but the call is counted, so it must have EXITEMPTY for the statistics 
					QueueLog(${EXTEN},${UNIQUEID},NONE,EXITEMPTY,,,0,fake);
				}
				// QUEUESTATUS "TIMEOUT" cannot happen here because we did not enter
				// the queue
			}
			//XXX TODO XXX Soll das so sein?
			if ("${QUEUESTATUS}"="TIMEOUT") {
				Verbose(1,### Queue ${EXTEN} is unavailable (no answer after timeout));
				if ("${fw_${is_call_from}_timeout}" != "") {
					Verbose(1,### -GS- Called queue: ${EXTEN}, forward on timeout to: ${fw_${is_call_from}_timeout});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_by_name=);
					Set(__forwarded_to=${fw_${is_call_from}_timeout});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Set(__forward_case=timeout);
					Set(__is_from_gateway=);
					Dial(Local/${fw_${is_call_from}_timeout}/n,900);
					&hangup-proper-status();
				}
				Playback(/opt/gemeinschaft/sounds/${gs_lang}/queue-all-busy);
				Busy(5);
				Hangup();
			}
			else if ("${QUEUESTATUS}"="FULL") {
				Verbose(1,### -GS- Queue ${EXTEN} is full);
				if ("${fw_${is_call_from}_full}" != "") {
					Verbose(1,### -GS- Called queue: ${EXTEN}, forward on full to: ${fw_${is_call_from}_full});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_by_name=);
					Set(__forwarded_to=${fw_${is_call_from}_full});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Set(__forward_case=full);
					Set(__is_from_gateway=);
					Dial(Local/${fw_${is_call_from}_full}/n,900);
					&hangup-proper-status();
				}
				Playback(/opt/gemeinschaft/sounds/${gs_lang}/queue-all-busy);
				Busy(5);
				Hangup();
			}
			else if ("${QUEUESTATUS}"="JOINEMPTY" || "${QUEUESTATUS}"="LEAVEEMPTY" || "${QUEUESTATUS}"="JOINUNAVAIL" || "${QUEUESTATUS}"="LEAVEUNAVAIL") {
				Verbose(1,### -GS- Queue ${EXTEN} is empty);
				if ("${fw_${is_call_from}_empty}" != "") {
					Verbose(1,### -GS- Called queue: ${EXTEN}, forward on empty to: ${fw_${is_call_from}_empty});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_by_name=);
					Set(__forwarded_to=${fw_${is_call_from}_empty});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Set(__forward_case=empty);
					Set(__is_from_gateway=);
					Dial(Local/${fw_${is_call_from}_empty}/n,900);
					&hangup-proper-status();
				}
				Busy(5);
				Hangup();
			}
			Hangup();
		
		//----------------------------------------------------------
		// type is "unknown":
		//----------------------------------------------------------
		to_unknown:
			//if ("${is_sub_system}" = "yes") {
			//	Verbose(1,### -GS- We are a sub-system. Dial to the gateway for unknown extension: ${EXTEN});
				Verbose(1,### -GS- Dial to the gateway for unknown extension: ${EXTEN});
				&dial-gateway(${EXTEN});
			//} else {
			//	Verbose(1,### -GS- We are not a sub-system. Hang up.);
			//}
			// 1 = AST_CAUSE_UNALLOCATED => SIP 404 Not Found
			Set(PRI_CAUSE=1);
			Hangup(1);
		
		
		//----------------------------------------------------------
		// type is "ivr":
		//----------------------------------------------------------
		to_ivr:
			NoOP(Extension is IVR);
			goto IVR-${EXTEN}|s|1;   
		
		
		user_uncallable:
			// user uncallable (busy/offline/unavail)
			// vm box active (from internal/external)?
			//AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-vm.agi,${origext});
			AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-vm.agi,${EXTEN});
			if ("${user_id}" != "") {
				Set(vm_real_source=internal);
				Set(vm_source=internal);
			}
			else {
				Set(vm_real_source=external);

				if ("${is_sub_system}" = "yes") {
						
					&is_dmz(${CALLERID(num)});
					if ("${is_dmz}" == "1") {
						Set(vm_source=internal);
					}
				else {
					Set(vm_source=external);
					}
	
				}
				else {
				
					if ( "${is_from_gateway}" = "" ) {
						Set(vm_source=internal);
					}
					else {
						Set(vm_source=external);
					}
				}

			}
			if ("${vm_real_source}" = "internal") {
				if ("${DIALSTATUS}" = "BUSY" || "${DIALSTATUS}" = "CHANUNAVAIL" || "${DIALSTATUS}" = "CONGESTION") {
					// call completion possible?
					if ("${is_dnd}" = "1") {
						Verbose(1,### -GS- Call completion to ${EXTEN} possible?: 0 - DND);
					}
					else {
						AGI(/opt/gemeinschaft/dialplan-scripts/cc-get-possible.agi,${EXTEN});
						Verbose(1,### -GS- Call completion to ${EXTEN} possible?: ${cc_possible});
						if ("${cc_possible}" = "1" && "${EXTEN}" != "${user_name}")
							goto user_uncallable_offer_cc;
					}
				}
			}
			// If a user didn't forward to their mailbox we assume they
			// don't want it as an auto-fallthrough default either.
			//if ("${vm_${vm_source}_active}" != "1")
			goto user_uncallable_vm_off;
			
		user_uncallable_vm_on:
			Verbose(1,### -GS- Called user ${EXTEN} unreachable, record voicemail from ${vm_source});
			if ("${is_callcompletion}" = "1") {
				// no voicemail for call completion
				Verbose(1,### -GS- Called user ${EXTEN} unreachable but don't record voicemail for call completion);
				&hangup-proper-status();
			}
			// vm
			Answer();
			Wait(0.5);
			Set(vm_announce_file=${vm_announce_${vm_source}});
			if ("${vm_announce_file}" = "") {
				Playback(vm-theperson);
				//SayDigits(${origext});
				SayDigits(${EXTEN});
				if ("${DIALSTATUS}" = "BUSY") {
					Playback(vm-isonphone);
				}
				else {
					Playback(vm-isunavail);
				}
				Playback(vm-intro);
			}
			else {
				Playback(${vm_announce_file});
			}
			
		user_vm_rec:
			//VoiceMail(${origext},s);
			VoiceMail(${EXTEN},s);
			Hangup();
		
		user_uncallable_vm_off:
			//Verbose(1,### -GS- Called user ${origext} unreachable, mailbox not active);
			Verbose(1,### -GS- Called user ${EXTEN} unreachable, mailbox not active);
			if ("${DIALSTATUS}" = "BUSY") {
				Hangup(17);
			} else {
				Hangup(19);
				// 19 = no answer from the user => 480 Temporarily unavailable
			}
		
		user_uncallable_offer_cc:
			Verbose(1,### Called user ${EXTEN} unreachable (${DIALSTATUS}), offer call completion);
			ResetCDR(w);
			NoCDR();
			Answer();
			Wait(0.5);
			Set(vm_announce_file=${vm_announce_${vm_source}});
			if ("${vm_announce_file}" = "") {
				Playback(vm-theperson);
				SayDigits(${EXTEN});
				if ("${DIALSTATUS}" = "BUSY") {
					Playback(vm-isonphone);
				}
				else {
					Playback(vm-isunavail);
				}
			}
			else {
				Playback(${vm_announce_file});
			}
			Set(cc_to_ext=${EXTEN});
			jump offer@program-cc;
		
	}
	
	h => {
		ResetCDR(w);
		NoCDR();
 		if("${MEMBERINTERFACE}" != "" && "SIP/${CALLERID(ani)}" != "${MEMBERINTERFACE}" ) {
 			Set(exttype=queue);
			// to be able to record QueueMetrics call outcome later
			Set(GLOBAL(queue_last_call_${MEMBERINTERFACE:4})=${UNIQUEID});
 		}
		/*		
 		Verbose(1,### -GS- DIALSTATUS     : ${DIALSTATUS});
 		Verbose(1,### -GS- exttype        : ${exttype});
 		Verbose(1,###### CALLERID(all)  : ${CALLERID(all)});
 		Verbose(1,###### CALLERID(ani)  : ${CALLERID(ani)});
 		Verbose(1,###### CALLERID(dnid) : ${CALLERID(dnid)});
 		Verbose(1,###### CALLERID(rdnis): ${CALLERID(rdnis)});
 		Verbose(1,###### CALLERID(num)  : ${CALLERID(num)});
 		Verbose(1,### -GS- origext        : ${origext});
 		Verbose(1,### -GS- user_name      : ${user_name});
 		Verbose(1,### -GS- forwarded_to   : ${forwarded_to});
 		Verbose(1,### -GS- CHANNEL        : ${CHANNEL});
		Verbose(1,### -GS- DIALEDPEERNUMBER      : ${DIALEDPEERNUMBER});
		*/
	
		if ("${is_huntgroup}" = "1" && "${DIALSTATUS}" = "ANSWER" && "${user_extension}" != "")
			Set(exttype=huntgroup);

		if ("${confnum}" != "") {
			Verbose(1,### Participant "${CALLERID(all)}" has left conference ${confprefix}${confnum});
			MeetMeCount(${confnum},cnt);
			Verbose(1,### -GS- There are now ${cnt} people left in conference ${confprefix}${confnum});
			if (${cnt} < 1) {
				Verbose(1,### -GS- Conference ${confprefix}${confnum} is empty. Free it.);
				// remove the conference from the db so some other node can claim it:
				TrySystem(/opt/gemeinschaft/dialplan-scripts/conf-remove ${confprefix}${confnum});
				Verbose(1,### -GS- Conference ${confprefix}${confnum} freed.);
			}
		}
		else
		if ("${exttype}" = "user" && "${is_callfile_origin}" = "") {
			// to internal user, store dial log (in|missed)

			if ( "${DIALEDPEERNUMBER}" != ""  ) {
				Set(type=missed);
				if ("${DIALSTATUS}" = "ANSWER")
					Set(type=in);

				if ( "${forwarded_to}" == "${DIALEDPEERNUMBER}"  && "${DIALSTATUS}" = "ANSWER" ) {
					&dial-log-store(${forwarded_to},${type},${CALLERID(num)},0);
				}
				else if ( "${forwarded_to}/n" == "${DIALEDPEERNUMBER}" && "${DIALSTATUS}" != "ANSWER" ) {

					if ("${forwarded_to:0:3}" == "vm*" ) {
						&dial-log-store(${forwarded_to:3},${type},${CALLERID(num)},0);
					}
					else if ("${forwarded_to:0:2}" == "vm" ) {
						&dial-log-store(${forwarded_to:2},${type},${CALLERID(num)},0);
					}
					else {
						&dial-log-store(${forwarded_to},${type},${CALLERID(num)},0);
					}
				}
				else if ( "${forwarded_to}" == ""  && "${DIALSTATUS}" = "ANSWER" ) {
					&dial-log-store(${DIALEDPEERNUMBER},${type},${CALLERID(num)},0);
				}
				else if (  "${fw_parcallexten_1}" != "" ) {
					Set(parcall_item=1);
					while ("${fw_parcallexten_${parcall_item}}" != "") {
						if ( "${fw_parcallexten_${parcall_item}}/n" == "${DIALEDPEERNUMBER}" ) {
							&dial-log-store(${fw_parcallexten_${parcall_item}},${type},${CALLERID(num)},0);	
						}
						parcall_item=${parcall_item}+1;
					}
				}


			}
			else if ("${DIALEDPEERNUMBER}" = "" ) {
				Set(type=missed);
				if ("${DIALSTATUS}" = "ANSWER")
					Set(type=in);

				if ("${forwarded_to}" == "" ) {
					// normal call
					if ("${CALLERID(dnid)}" == "${origext}" && "${DIALSTATUS}" != "") {
						&dial-log-store(${CALLERID(dnid)},${type},${CALLERID(num)},0);
					}
					// attended transfer
					else if ("${DIALSTATUS}" != "") {
						if ("${DIALSTATUS}" = "ANSWER")
							&dial-log-store(${DIALEDPEERNUMBER},${type},${CALLERID(num)},0);
						else
							&dial-log-store(${origext},${type},${CALLERID(num)},0);
					}
				
				} else if ("${CHANNEL:0:5}" != "Local") {
					if ( "${type}" == "missed" && "${fw_parcallexten_1}" != "" ) {


						Set(parcall_item=1);
						while ("${fw_parcallexten_${parcall_item}}" != "") {
							&dial-log-store(${fw_parcallexten_${parcall_item}},${type},${CALLERID(num)},0);	
							parcall_item=${parcall_item}+1;
						}

					}
					else {
						&dial-log-store(${forwarded_to},${type},${CALLERID(num)},0);
					}
				}
				else if ("${forwarded_to:0:3}" == "vm*" ) {
					&dial-log-store(${forwarded_to:3},${type},${CALLERID(num)},0);
				}
				else if ("${forwarded_to:0:2}" == "vm" ) {
					&dial-log-store(${forwarded_to:2},${type},${CALLERID(num)},0);
				}
			}
				
		}
		else if ("${exttype}" = "queue") {
			if("${MEMBERINTERFACE}" = "") {
				Verbose(1,### Queue ${CALLERID(dnid)} call ${CALLERID(num)} no answer);
				Set(member=1);
				while ("${qm_${member}}" != "") {
					&dial-log-store(${qm_${member}},missed,${CALLERID(num)},${origext});
					member=${member}+1;
				}
			}
			else {
				Verbose(1,### Queue ${CALLERID(dnid)} ${MEMBERINTERFACE} answered call ${CALLERID(num)});
				Set(member=1);
				while ("${qm_${member}}" != "") {
					if("${MEMBERINTERFACE}" = "SIP/${qm_${member}}") {
						&dial-log-store(${qm_${member}},in,${CALLERID(num)},${origext});
					}
					member=${member}+1;
				}
			}
		}
		else if ("${exttype}" = "huntgroup" && "${is_callfile_origin}" = "" ) {
			if ("${DIALSTATUS}" != "ANSWER") {
				Set(huntgroup=1);
				while ("${huntgroup_${huntgroup}_dial}" != "") {
					Verbose(1,### -GS- Writing missing call to DialLog: ${huntgroup_${huntgroup}_dial});
					&dial-log-store(${huntgroup_${huntgroup}_dial},missed,${CALLERID(num)},0);
					huntgroup=${huntgroup}+1;
				}
			}
			else {
				if("${user_extension}" != ""){
					&dial-log-store(${user_extension},in,${CALLERID(num)},0);
				}
			}
		}
	}
	
}

context program-cc {
	
	offer => {
		Answer();
		Set(CHANNEL(language)=de);
		Wait(0.5);
		Set(TIMEOUT(digit)=5);
		Set(TIMEOUT(response)=10);
		
		for (i=0; ${i}<3; i=${i}+1) {
			//Playback(/opt/gemeinschaft/sounds/${gs_lang}/druecken-sie-die-1-um-einen-automatischen-rueckruf-zu-programmieren);
			if ("${vm_${vm_source}_active}" = "1") {
				Background(/opt/gemeinschaft/sounds/${gs_lang}/um-eine-nachricht-zu-hinterlassen-druecken-sie-die&digits/1,m);
			}
			Background(/opt/gemeinschaft/sounds/${gs_lang}/fuer-einen-automatischen-rueckruf-druecken-sie-die&/opt/gemeinschaft/sounds/${gs_lang}/stern-taste,m);
			WaitExten();
		}
		
	}
	1 => {
		Verbose(1,### -GS- Caller wants to leave voicemail for user ${cc_to_ext});
		Set(CHANNEL(language)=de);
		//Playback(beep);
		if ("${vm_${vm_source}_active}" = "1") {
			if ("${is_callcompletion}" = "1") {
				// no voicemail for call completion
				Verbose(1,### -GS- Called user ${EXTEN} unreachable but don't record voicemail for call completion);
				&hangup-proper-status();
			}
			goto to-internal-users-self|${cc_to_ext}|user_vm_rec;
		}
		goto to-internal-users-self|${cc_to_ext}|user_uncallable_vm_off;
	}
	* => {
		Verbose(1,### -GS- Caller wants call completion to user ${cc_to_ext});
		Set(CHANNEL(language)=de);
		AGI(/opt/gemeinschaft/dialplan-scripts/cc-program.agi,${user_name},${cc_to_ext});
		Verbose(1,### -GS- Call completion programmed?: ${cc_programmed});
		if ("${cc_programmed}" = "1") {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/rueckruf-programmiert);
			Verbose(1,### -GS- Call completion programmed from ${user_name} to ${cc_to_ext});
		}
		else {
			Verbose(1,### -GS- Call completion from ${user_name} to ${cc_to_ext} not possible);
		}
		Hangup();
	}
	# => {
		Playback(vm-goodbye);
		Hangup();
	}
	t => goto #|1;
	i => Playback(invalid);
}


macro set-callerid-by-clir() {
	// get CLIR for a call to internal:
	if ("${clir}" = "" ) {
		AGI(/opt/gemeinschaft/dialplan-scripts/get-clir-internal.agi,${user_id});
	}
	if ("${clir}" = "1") {
		Set(CALLERID(all)=Anonymous <anonymous>);
		// RFC 2543
	}
	return;
}




//---------------------------------------------------------------------
//  From the gateways
//---------------------------------------------------------------------

// see hangup_cause2sip() in chan_sip.c for a list of Q.931 cause
// codes (see causes.h) which can be translated into SIP codes

// wrapper context to be used by all of the gateways
context from-gateways {
	
	includes {
		cmm;                  // user login/logout (for BOI)
		to-internal-custom;
		//voicemail-any;        // voicemail main (own mailbox)
		//to-internal-nobody;   // internal phones (nobodies)
		//ivrs;                 //FIXME IVR demo
		to-internal-users;    // internal phones (users)
	}
	i => {
		// no matching extension found in any of the included contexts.
		// this is unlikely to happen as there is an extension for the
		// internal users which catches almost anything.
		Verbose(1,### -GS- No matching extension found for "${did_number}");
		// 1 = AST_CAUSE_UNALLOCATED => SIP 404 Not Found
		Set(PRI_CAUSE=1);
		Hangup(1);
	}
}

// contexts for incoming calls from the gateway groups:

// (auto-generated)

context from-gg-amt {
	_. => {
		if ("${EXTEN}" != "h" && "${EXTEN}" != "t" && "${EXTEN}" != "i") {
			Set(__is_from_gateway=1);
			if ("${EXTEN}" == "s") {
				WaitExten(1);
			}
			Set(did_full=${EXTEN});
			AGI(/opt/gemeinschaft/dialplan-scripts/in-route.agi,1,${did_full},${CALLERID(num)});
			Set(CALLERID(dnid)=${did_ext});
			Verbose(1,### -GS- Inbound call from gw group "amt". dnid: ${did_full} => ext: ${did_ext} => ${did_ext_to});
			Verbose(1,### from cid orig: ${CALLERID(num)} => from cid: ${cid_fixed});
			Set(CALLERID(num)=${cid_fixed});
			if ("${did_ext_to}" != "") {
				jump ${did_ext_to}@from-gateways;
			}
			else {
				// 1 = AST_CAUSE_UNALLOCATED => SIP 404 Not Found
				Set(PRI_CAUSE=1);
				Hangup(1);
			}
		}
	}
}

// end of contexts for incoming calls from the gateway groups



//---------------------------------------------------------------------
//  To external
//---------------------------------------------------------------------

context to-gateway {

	_0. => {
		if ("${user_id}" != "") {
			// from internal user, store dial log (out)
			//DumpChan();
			&dial-log-store(${user_name},out,${EXTEN},0);
		}
		&dial-gateway(${gateway_prefix}${EXTEN:1});
	}
	//_X. => &dial-gateway(${EXTEN});
}

macro dial-gateway-do( mnumber ) {

	Set(CDR(userfield)=${mnumber});
	// get CLIR for a call to external:
	&is_dmz(${mnumber});
	if ("${is_dmz}" != "1") {
		Set(zone=external);
	}
	else {
		Set(zone=internal);
	}
	if ("${user_id}" != "") {
		AGI(/opt/gemeinschaft/dialplan-scripts/get_callerid.agi,${user_name},${zone});
		if ("${clir}" = "" ) {
			AGI(/opt/gemeinschaft/dialplan-scripts/get-clir-${zone}.agi,${user_id});
		}
	}
	if ("${external_callerid_override}" = "true") {
		AGI(/opt/gemeinschaft/dialplan-scripts/out-route.agi,${mnumber},${is_sub_system},${CALLERID(num)},${user_id},1);
	}
	else if ("${is_forwarded}" = "1") {
		// Hack to use clip no screening properly
		if ("${CALLERID(num):0:2}" = "00")
			Set(CALLERID(num)=${CALLERID(num):2});
		AGI(/opt/gemeinschaft/dialplan-scripts/out-route.agi,${mnumber},${is_sub_system},${CALLERID(num)},${user_id},1);
	}
	else {
		AGI(/opt/gemeinschaft/dialplan-scripts/out-route.agi,${mnumber},${is_sub_system},${user_name},${user_id},0);
	}
	Set(no_route=1);
	Set(r=1);
	Set(r_x_cid_name=${CALLERID(name)});
	while ("${r_${r}_dial}" != "") {
		//Verbose(1,### -GS- route: r_${r});
		Set(no_route=);
		if ("${clir}" != "1") {
			// RFC 2543:
			Set(CALLERID(num)=${r_${r}_cid});
			Set(CALLERID(name)=${r_x_cid_name});
			if (${LEN(${CALLERID(name)})} < 1) {
				Set(CALLERID(name)=${CALLERID(num)});
			}
			// RFC 3325:
			SIPAddHeader(P-Asserted-Identity: ${QUOTE(${URIENCODE(${CALLERID(name)})})} <sip:${CALLERID(num)}@${r_${r}_cid_host}>);
			SIPAddHeader(P-Preferred-Identity: ${QUOTE(${URIENCODE(${CALLERID(name)})})} <sip:${CALLERID(num)}@${r_${r}_cid_host}>);
			// RFC 3325, RFC 3323:
			SIPAddHeader(Privacy: none);
			// Set caller presentation - affects Remote-Party-ID header: ...";privacy:off;screen:yes"
			Set(CALLERPRES()=allowed_passed_screen);
		}
		else {
			// RFC 2543:
			Set(CALLERID(num)=anonymous);
			Set(CALLERID(name)=Anonymous);
			// RFC 3325:
			SIPAddHeader(P-Preferred-Identity: ${QUOTE(${URIENCODE(${CALLERID(name)})})} <sip:${CALLERID(num)}@${r_${r}_cid_host}>);
			// RFC 3325, RFC 3323:
			SIPAddHeader(Privacy: id;header);
			// Set caller presentation - affects Remote-Party-ID header: ...";privacy:full;screen:yes"
			SetCallerPres(prohib_passed_screen);
		}
		Verbose(1,### Outbound route: ${r_${r}_dial} - Caller ID: "${CALLERID(name)}" <${CALLERID(num)}@${r_${r}_cid_host}>);
		Set(GROUP()=callcount${user_name});
		Dial(${r_${r}_dial},180);
		Verbose(1,### -GS- Dialstatus for ${r_${r}_dial}: ${DIALSTATUS});
		if ("${DIALSTATUS}" = "ANSWER" || "${DIALSTATUS}" = "CANCEL") {
			Hangup();
		}
		else if ("${DIALSTATUS}" = "NOANSWER") {
			Hangup();
		}
		else if ("${DIALSTATUS}" = "BUSY") {
			Busy(5);
			Hangup();
		}
		else if ("${DIALSTATUS}" = "CHANUNAVAIL" || "${DIALSTATUS}" = "CONGESTION") {
			// see Asterisk's causes.h or
			// Q.931 Disconnect Cause Codes
			if ("${HANGUPCAUSE}" = "1") {
				// 1 = unallocated number
				Verbose(1,### -GS- HANGUPCAUSE: 1 = unallocated number);
				Hangup();
			}
			else if ("${HANGUPCAUSE}" = "66") {
				// 66 = channel not implemented
				Verbose(1,### -GS- HANGUPCAUSE: 66 = channel not implemented);
				Verbose(0,### You're trying to dial to channel type "${CUT(r_${r}_dial,/,1)}" which this Asterisk is not configured to handle!);
			}
			else if ("${HANGUPCAUSE}" = "17") {
				// 17 = user busy
				Verbose(1,### -GS- HANGUPCAUSE: 17 = user busy);
				Busy(5);
				Hangup();
			}
			else if ("${HANGUPCAUSE}" = "18") {
				// 18 = no user responding
				Verbose(1,### -GS- HANGUPCAUSE: 18 = no user responding);
				Congestion(5);
				Hangup();
			}
			else if ("${HANGUPCAUSE}" = "127") {
				// 127 = interworking, unspecified
				Verbose(1,### -GS- HANGUPCAUSE: 127 = interworking or unspecified);
				Hangup();
			}
			else {
				Verbose(1,### -GS- HANGUPCAUSE: ${HANGUPCAUSE});
			}
			
			// else don't hangup and try the next gateway
		}
		else {
			Congestion(5);
			Hangup();
		}
		
		if (${r} > 10) {
			Verbose(1,### -GS- Could not reach ${mnumber} via 10 different gateways);
			Congestion(5);
			Hangup();
		}
		r=${r}+1;
		
		// Remove all custom headers (P-Preferred-Identity, Privacy, ... - see above):
		&sip-remove-header(${});
	}
	if ("${no_route}" != "") {
		Verbose(1,### -GS- No matching route for ${mnumber} configured);
		Set(DIALSTATUS=CONGESTION);
		Congestion(5);
		Hangup();
	}
	else {
		// we have run out of gateways to try
		Congestion(5);
		Hangup();
	}
	Hangup();
	return;
}

macro dial-gateway( mnumber ) {
	
	// is the user allowed to dial that number?
	// always allow for private calls:
	if ("${is_private_call}" = "1")
		goto allowed;
	// else check:
	
	if ("${forwarded_by}" = "") {
		Set(__is_forwarded=0);
		Set(__forwarded_by=${user_name});
	}
	else {
		Set(__is_forwarded=1);
		Verbose(1,### -GS- forwarded_by: ${forwarded_by});
	}
	// AGI ...      dial_allowed = yes | no | pin,  dial_pin = <pin>
	AGI(/opt/gemeinschaft/dialplan-scripts/callblocking.agi,${forwarded_by},${mnumber});
	if ("${dial_allowed}" = "pin") {
		Verbose(1,### User ${user_name} needs PIN (${dial_pin}) to dial ${mnumber} via gateway);
		if ("${is_forwarded}" = "1") {
			Verbose(1,### -GS- Don't ask for PIN after forward. Hangup.);
			goto not_allowed;
		}
		Answer();
		Wait(1);
		Read(input,vm-password,10,s,3,5);
		if ("${input}" = "${dial_pin}") {
			Playback(beep);
			ResetCDR(v);
			goto allowed;
		}
		goto not_allowed;
	}
	if ("${dial_allowed}" != "no")
		goto allowed;
	goto not_allowed;
	
	not_allowed:
		Verbose(1,### -GS- User ${forwarded_by} is not allowed to dial ${mnumber} via gateway);
		// beeperr if channel is up, else just declined:
		if ("${CHANNEL(state)}" = "Up")
			Playback(beeperr);
		Hangup();
		return;
	
	allowed:
		Verbose(1,### -GS- User ${forwarded_by} is allowed to dial ${mnumber} via gateway);
		//&dial-gateway-do(${gateway_prefix}${mnumber});
		&dial-gateway-do(${mnumber});
		Hangup();
		return;

	return;
}


//---------------------------------------------------------------------
//  To Emergency Numbers
//---------------------------------------------------------------------

context to-emergency {
	

	110 => &emergency-call(110);
	0110 => &emergency-call(110);
	112 => &emergency-call(112);
	0112 => &emergency-call(112);

}

macro emergency-call( mnumber ) {
	if ("${mnumber}" = "${emergency_police}") {
		Set(tmp=(police));
	} else if ("${mnumber}" = "${emergency_fire}") {
		Set(tmp=(fire dept.));
	} else {
		Set(tmp=);
	}
	Verbose(1,### -GS- Call to ${MACRO_EXTEN} mapped to emergency ${mnumber} ${tmp});
	&dial-gateway-do(${mnumber});
	return;
}


//---------------------------------------------------------------------
//  Private Calls
//---------------------------------------------------------------------

context private-call {
	
	_*7*. => {
		Set(number=${EXTEN:3});
		
		if ("${user_id}" != "") {
			// from internal user, store dial log (out)
			&dial-log-store(${user_name},out,${EXTEN},0);
		}
		
		// pruefen, ob der User Privatgespraeche machen darf ...
		
		// accountcode setzen ...
		AGI(/opt/gemeinschaft/dialplan-scripts/usercode-by-ext.agi,${user_name});
		Set(CDR(amaflags)=BILLING);
		Set(CDR(accountcode)=prv-${user_code});
		
		// fuer Amtsberechtigung:
		Set(__is_private_call=1);
		Verbose(1,### -GS- Private call from user ${user_name} to ${number});
		//&dial-gateway(${number});
		Dial(Local/${number}/n);
		&hangup-proper-status();
	}
	//_96. => {
	//	jump *7*${EXTEN:2};
	//}
	//FIXME - exec e-number-private.ael.php here
}


//---------------------------------------------------------------------
//  User Config of Line Features and Call Forwarding
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//            Gemeinschaft - asterisk cluster gemeinschaft
// 
// $Revision$
// 
// Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
// http://www.amooma.de/
// Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
// Philipp Kempgen <philipp.kempgen@amooma.de>
// Peter Kozak <peter.kozak@amooma.de>
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA 02110-1301, USA.
//---------------------------------------------------------------------


//---------------------------------------------------------------------
//
//  User Config of Line Features and Call Forwarding
//
//---------------------------------------------------------------------


//---------------------------------------------------------------------
//  Macro to get a user's code by the extension (= SIP name)
//---------------------------------------------------------------------

macro usercode-by-ext( mext ) {
	AGI(/opt/gemeinschaft/dialplan-scripts/usercode-by-ext.agi,${mext});
	NoOp(### AGI returned: user_code = ${user_code});
	return;
}


//---------------------------------------------------------------------
//  User config service numbers
//---------------------------------------------------------------------

context user-config {
	
	//-------------------------------------------------------------
	//  CLIR (Rufnummernunterdueckung)
	//-------------------------------------------------------------
	
	*31 => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,clir_set);
		&user-config-clir(all,2);
	}
	*31* => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,clir_set);
		&user-config-clir(all,0);
	}

	*32 => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,clir_set);
		&user-config-clir(internal,1);
	}
	*32* => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,clir_set);
		&user-config-clir(internal,0);
	}
	*33 => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,clir_set);
		&user-config-clir(external,1);
	}
	*33* => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,clir_set);
		&user-config-clir(external,0);
	}
	
	
	//-------------------------------------------------------------
	//  Call Waiting (Anklopfen)
	//-------------------------------------------------------------
	
	*92 => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,callwaiting_set);
		&user-config-call-waiting(1);
	}
	*92* => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,callwaiting_set);
		&user-config-call-waiting(0);
	}
	
	
	//-------------------------------------------------------------
	//  Call Forwarding (Anrufumleitung)
	//-------------------------------------------------------------
	
	_*9[34][01]. => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		Set(number=${EXTEN:4});
		if ("${EXTEN:2:1}" = "3") {
			Set(type=std);
		} else {
			Set(type=var);
		}
		if ("${EXTEN:3:1}" = "0") {
			Set(source=internal);
		} else {
			Set(source=external);
		}
		Verbose(1,### -GS- User ${user_name}: set ${type} Call Forward number from ${source}: ${number});
		&usercode-by-ext(${user_name});
		if ("${user_code}" = "")
			Hangup();
		Answer();
		TrySystem(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='${source}' --type='${type}' --number='${number}');
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		//Playback(beep);
		if ("${type}" = "std") {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/standard);
		} else {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/variable);
		}
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitungsnummer&/opt/gemeinschaft/sounds/${gs_lang}/fuer-anrufe&/opt/gemeinschaft/sounds/${gs_lang}/von);
		if ("${source}" = "internal") {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/intern);
		} else {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/extern);
		}
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/eingestellt);
		Wait(0.5);
		SayDigits(${number});
		Hangup();
	}
	
	_*95XX => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		Set(timeout=${EXTEN:3});
		Verbose(1,### -GS- User ${user_name}: set Unavail Timeout to ${timeout});
		&usercode-by-ext(${user_name});
		if ("${user_code}" = "")
			Hangup();
		Answer();
		TrySystem(/opt/gemeinschaft/scripts/gs-callforward-timeout-set --user='${user_code}' --timeout='${timeout}');
		Wait(0.5);
		//Playback(beep);
		Playback(klingeldauer);
		SayNumber(${timeout});
		Playback(seconds);
		Hangup();
	}
	
	_*9*[01][0-3] => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(std,${EXTEN:3:1},${EXTEN:4:1},1);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(beep);
		Hangup();
	}
	_*9*[01][0-3]* => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(std,${EXTEN:3:1},${EXTEN:4:1},0);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(beep);
		Hangup();
	}
	_*9**[01][0-3] => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(var,${EXTEN:4:1},${EXTEN:5:1},1);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(beep);
		Hangup();
	}
	_*9**[01][0-3]* => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(var,${EXTEN:4:1},${EXTEN:5:1},0);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(beep);
		Hangup();
	}
	
	*2 => {
		//toggle callforwarding
		Set(CDR(amaflags)=OMIT); 
		&check-group-permission(${user_id},user,forward);
		AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-fw.agi,${user_name});
		if ("${fw_std_active}" = "1") {
			&user-call-forward-activate-numeric(std,0,0,0);
			&user-call-forward-activate-numeric(std,1,0,0);
			TryExec(Set(DEVICE_STATE(Custom:${user_name}fwd)=NOT_INUSE));
			&user-call-forward-userevent(${user_name});
			Wait(0.5);
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/deaktiviert);
			Hangup();
		} else {
			&user-call-forward-activate-numeric(std,0,0,1);
			&user-call-forward-activate-numeric(std,1,0,1);
			&queue-logout-all-silent();
			&user-call-forward-userevent(${user_name});
			Wait(0.5);
			TryExec(Set(DEVICE_STATE(Custom:${user_name}fwd)=BUSY));
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/aktiviert);
			Hangup();
		}
	}

	*90 => {
		//redirect internal std
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(std,0,0,1);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/aktiviert);
		Hangup();
	}
	*91 => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(std,1,0,1);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/aktiviert);
		Hangup();
	}
	dnd-on => {
		// like *2 but silent
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(std,0,0,1);
		&user-call-forward-activate-numeric(std,1,0,1);
		&user-call-forward-userevent(${user_name});
		Hangup();
	}
	
	*2* => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(std,0,0,0);
		&user-call-forward-activate-numeric(std,1,0,0);
		TryExec(Set(DEVICE_STATE(Custom:${user_name}fwd)=NOT_INUSE));
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/deaktiviert);
		Hangup();
	}

	*90* => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(std,0,0,0);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/deaktiviert);
		Hangup();
	}
	*91* => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(std,1,0,0);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/deaktiviert);
		Hangup();
	}
	dnd-off => {
		// like *2* but silent
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&user-call-forward-activate-numeric(std,0,0,0);
		&user-call-forward-activate-numeric(std,1,0,0);
		&user-call-forward-userevent(${user_name});
		Hangup();
	}
	

	_*2[1-4] => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&usercode-by-ext(${user_name});
		if ("${user_code}" = "")
			Hangup();

		switch (${EXTEN:2}) {
			case 1:
				Set(type=vml);
				break;
			case 2:
				Set(type=ano);
				break;
			case 3:
				Set(type=trl);
				break;
			case 4:
				Set(type=par);
				break;
			default:
				Hangup();
		};

		Answer();

		&user-call-forward-activate-numeric(${type},0,0,1);
		&user-call-forward-activate-numeric(${type},1,0,1);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/aktiviert);
		Hangup();
	}
	
	
	_*2X. => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&usercode-by-ext(${user_name});
		if ("${user_code}" = "")
			Hangup();
		Answer();
		Set(tonumber=${EXTEN:2});
		System(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='internal' --type='var' --number='${tonumber}');
		if ("${SYSTEMSTATUS}" != "SUCCESS") {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/sie-haben-keine-berechtigung-fuer-diese-zielrufnummer);
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/auf-wiedersehen);
			Hangup();
		}
		System(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='external' --type='var' --number='${tonumber}');
		&user-call-forward-activate-numeric(var,0,0,1);
		&user-call-forward-activate-numeric(var,1,0,1);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/aktiviert);
		Hangup();
	}
	_*2# => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&usercode-by-ext(${user_name});
		if ("${user_code}" = "")
			Hangup();
		Answer();
		Wait(0.5);
		Read(tonumber,/opt/gemeinschaft/sounds/${gs_lang}/forward_target_enter);
		System(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='internal' --type='var' --number='${tonumber}');
		if ("${SYSTEMSTATUS}" != "SUCCESS") {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/sie-haben-keine-berechtigung-fuer-diese-zielrufnummer);
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/auf-wiedersehen);
			Hangup();
		}
		System(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='external' --type='var' --number='${tonumber}');
		&user-call-forward-activate-numeric(var,0,0,1);
		&user-call-forward-activate-numeric(var,1,0,1);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/aktiviert);
		Hangup();
	}

	_*9[01][1234] => {


		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&usercode-by-ext(${user_name});
		if ("${user_code}" = "")
			Hangup();

		switch (${EXTEN:2:-1}) {
			case 0:
				Set(source=internal);
				Set(srcode=0);
				break;
			case 1:
				Set(source=external);
				Set(srcode=1);
				break;
			default:
				Hangup();
		};

		switch (${EXTEN:3}) {
			case 1:
				Set(type=vml);
				break;
			case 2:
				Set(type=vml);
				break;
			case 3:
				Set(type=trl);
				break;
			case 4:
				Set(type=par);
				break;
			default:
				Hangup();
		};


		Answer();


		&user-call-forward-activate-numeric(${type},${srcode},0,1);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/aktiviert);
		Hangup();
	}

	_*90X. => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&usercode-by-ext(${user_name});
		if ("${user_code}" = "")
			Hangup();
		Answer();
		Set(tonumber=${EXTEN:3});
		System(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='internal' --type='var' --number='${tonumber}');
		if ("${SYSTEMSTATUS}" != "SUCCESS") {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/sie-haben-keine-berechtigung-fuer-diese-zielrufnummer);
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/auf-wiedersehen);
			Hangup();
		}
		System(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='external' --type='var' --number='${tonumber}');
		&user-call-forward-activate-numeric(var,0,0,1);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/aktiviert);
		Hangup();
	}
	_*91X. => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&usercode-by-ext(${user_name});
		if ("${user_code}" = "")
			Hangup();
		Answer();
		Set(tonumber=${EXTEN:3});
		System(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='internal' --type='var' --number='${tonumber}');
		if ("${SYSTEMSTATUS}" != "SUCCESS") {
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/sie-haben-keine-berechtigung-fuer-diese-zielrufnummer);
			Playback(/opt/gemeinschaft/sounds/${gs_lang}/auf-wiedersehen);
			Hangup();
		}
		System(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='external' --type='var' --number='${tonumber}');
		&user-call-forward-activate-numeric(var,1,0,1);
		&user-call-forward-userevent(${user_name});
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/aktiviert);
		Hangup();
	}


	
	*30 => {
		Set(CDR(amaflags)=OMIT);
		&check-group-permission(${user_id},user,forward);
		&usercode-by-ext(${user_name});
		if ("${user_code}" = "")
			Hangup();
		Answer();
		System(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='internal' --type='vml' --number='vm${user_name}');
		System(/opt/gemeinschaft/scripts/gs-callforward-number-set --user='${user_code}' --source='external' --type='vml' --number='vm${user_name}');
		&user-call-forward-activate-numeric(vml,0,0,1);
		&user-call-forward-activate-numeric(vml,1,0,1);
		&user-call-forward-userevent(${user_name});     
		Wait(0.5);
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/rufumleitung&/opt/gemeinschaft/sounds/${gs_lang}/aktiviert);
		Hangup();
	}

	//-------------------------------------------------------------
	// Wakeup-call
	//-------------------------------------------------------------

	*4 => goto wakeup-call-select-lang|s|1;
	
	//-------------------------------------------------------------
	// Comment
	//-------------------------------------------------------------
	
	*96 => {
		Set(CDR(amaflags)=OMIT);
		&user-config-comment(1);
	}
	*96* => {
		Set(CDR(amaflags)=OMIT);
		&user-config-comment(0);
	}



	//-------------------------------------------------------------
	//  Ausgehende Rufnummer
	//-------------------------------------------------------------

	*34 => {
		&check-group-permission(${user_id},user,clip_set);
		AGI(/opt/gemeinschaft/dialplan-scripts/set-clip.agi,${user_name},internal);
		if( "${clipset}" == "OK" ) {
			Wait(0.5);
			Playback(beep);
			Hangup();
		}
		else {
			Wait(0.5);
			Playback(beeperr);
			Hangup();		
		}
	}

	_*34X. => {
		&check-group-permission(${user_id},user,clip_set);
		AGI(/opt/gemeinschaft/dialplan-scripts/set-clip.agi,${user_name},internal,${EXTEN:3});
		if( "${clipset}" == "OK" ) {
			Wait(0.5);
			Playback(beep);
			Hangup();
		}
		else {
			Wait(0.5);
			Playback(beeperr);
			Hangup();		
		}
	}

	*35 => {
		&check-group-permission(${user_id},user,clip_set);
		AGI(/opt/gemeinschaft/dialplan-scripts/set-clip.agi,${user_name},external);
		if( "${clipset}" == "OK" ) {
			Wait(0.5);
			Playback(beep);
			Hangup();
		}
		else {
			Wait(0.5);
			Playback(beeperr);
			Hangup();		
		}
	}

	//-------------------------------------------------------------
	// Room state
	//-------------------------------------------------------------

	_##9[123] => {
		&check-group-permission(${user_id},user,room_state);
		AGI(/opt/gemeinschaft/dialplan-scripts/room-state-set.agi,${user_name},${EXTEN:3});
		Answer();
		Wait(0.5);
		if( "${isset}" == "ok" ) {
			if ( "${EXTEN:3}" == "1" ) {
				Playback(/opt/gemeinschaft/sounds/${gs_lang}/room_not_cleaned);
			}
			else if ( "${EXTEN:3}" == "2" ) {
				Playback(/opt/gemeinschaft/sounds/${gs_lang}/room_cleaned);
			}
			else {
				Playback(/opt/gemeinschaft/sounds/${gs_lang}/room_cleaned_proofed);
			}
		}
		else {
			Playback(beeperr);
		}
		Hangup();
	}

	//-------------------------------------------------------------
	

	_*35X. => {
		&check-group-permission(${user_id},user,clip_set);
		AGI(/opt/gemeinschaft/dialplan-scripts/set-clip.agi,${user_name},external,${EXTEN:3});
		if( "${clipset}" == "OK" ) {
			Wait(0.5);
			Playback(beep);
			Hangup();
		}
		else {
			Wait(0.5);
			Playback(beeperr);
			Hangup();		
		}
	}

}

macro user-config-comment( mactive ) {
	if ("${user_name}" = "")
		Hangup();
	
	if ("${mactive}" != "1")
		Set(mactive=0);
	
	Verbose(1,### -GS- User ${user_name}: set comment off-time ${mactive});
	Answer();
	TrySystem(/opt/gemeinschaft/dialplan-scripts/user-comment-offtime-set '${user_name}' '${mactive}');
	Wait(0.5);
	Playback(beep);
	Hangup();
	return;
}


macro user-config-clir( mdest, mactive_num ) {
	&usercode-by-ext(${user_name});
	if ("${user_code}" = "")
		Hangup();
	
	if( "${mdest}" != "internal" && "${mdest}" != "external" )
		Set(mdest=all);	
	
	Set(mactive=yes);
	if ("${mactive_num}" = "0")
		Set(mactive=no);
	else if ("${mactive_num}" = "2")
		Set(mactive=once);
	
	
	Verbose(1,### -GS- User ${user_name}: set CLIR ${mdest}: ${mactive});
	Answer();
	TrySystem(/opt/gemeinschaft/scripts/gs-clir-activate --user='${user_code}' --dest='${mdest}' --active='${mactive}');
	Wait(0.5);
	Playback(beep);
	Hangup();
	return;
}


macro user-config-call-waiting( mactive_num ) {
	&usercode-by-ext(${user_name});
	if ("${user_code}" = "")
		Hangup();
	
	Set(mactive=yes);
	if ("${mactive_num}" = "0")
		Set(mactive=no);
	
	Verbose(1,### -GS- User ${user_name}: set Call Waiting: ${mactive});
	Answer();
	TrySystem(/opt/gemeinschaft/scripts/gs-callwaiting-activate --user='${user_code}' --active='${mactive}');
	Wait(0.5);
	//Playback(beep);
	Playback(/opt/gemeinschaft/sounds/${gs_lang}/anklopfen);
	if ("${mactive}" = "yes") {
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/eingeschaltet);
	} else {
		Playback(/opt/gemeinschaft/sounds/${gs_lang}/ausgeschaltet);
	}
	Hangup();
	return;
}


macro user-call-forward-activate-numeric( mtype, msource_num, mcase_num, mactive_num ) {
	
	&usercode-by-ext(${user_name});
	if ("${user_code}" = "")
		Hangup();
	
	if ("${mtype}" != "std" && "${mtype}" != "vml" && "${mtype}" != "trl" && "${mtype}" != "par" && "${mtype}" != "ano" )
		Set(mtype=var);
	
	Set(msource=internal);
	if ("${msource_num}" = "1")
		Set(msource=external);
	
	Set(mcase=always);
	if ("${mcase_num}" = "1")
		Set(mcase=busy);
	if ("${mcase_num}" = "2")
		Set(mcase=unavail);
	if ("${mcase_num}" = "3")
		Set(mcase=offline);
	
	Set(mactive=no);
	if ("${mactive_num}" != "0")
		Set(mactive=${mtype});
	
	Verbose(1,### -GS- User ${user_name}: set call forward ${msource} ${mtype} ${mcase} ${mactive_num});
	
	Answer();
	System(/opt/gemeinschaft/scripts/gs-callforward-activate --user='${user_code}' --source='${msource}' --case='${mcase}' --active='${mactive}');
	if ( "${SYSTEMSTATUS}" != "SUCCESS" ) {
		Playback(beeperr);
		Hangup();	
	}	

	return;
}

macro check-group-permission ( userid, group, type ) {

	AGI(/opt/gemeinschaft/dialplan-scripts/check_group_permission.agi,${userid},${group},${type});

	if ( "${ret}" == "error" ) {
		Playback(beeperr);
		Wait(0.5);
		Hangup();
		return;
	}

	return;

}

macro user-call-forward-userevent( user_name ) {

	AGI(/opt/gemeinschaft/dialplan-scripts/user_get_diversion.agi,${user_name});
	
	if ("${ret}" != "ok") {
		Verbose(1,### -GS- User ${user_name}: Unable to generate Userevent for diversion ${ret});
	}
	else {
		UserEvent(UserDiversionUI,user: ${user_name},internal: ${internal},external: ${external},std: ${std},var: ${var},vml: ${vml},timeout: ${timeout});
	}		

	return;
}



//---------------------------------------------------------------------
//  From Internal Users
//---------------------------------------------------------------------

context from-internal-nobody {
	
	includes {
		//ivrs;                 //FIXME IVR demo
		to-emergency;         // emergency numbers
		cmm;                  // user login/logout
		voicemail-any;        // voicemail main (any mailbox)
		to-conferences;       // conferences
		to-internal-nobody;   // internal phones (nobodies)
		to-internal-users;    // internal phones (users)
		test;                 // test extensions
	}
	
	_*31X. => {
		Verbose(1,### -GS- Set CLIR for number ${EXTEN:3});
		Set(__clir=1);
		jump ${EXTEN:3}@from-internal-nobody;
	}
	
}

context from-internal-users {
	
	includes {
		//ivrs;                 //FIXME IVR demo
		to-emergency;         // emergency numbers
		cmm;                  // user login/logout
		from-internal-custom;
		to-internal-custom;
		vm-ann-rec;           // record vm-box announcements
		voicemail-self;       // voicemail main (own mailbox)
		voicemail-any;        // voicemail main (any mailbox)
		private-call;         // private calls
		user-config;          // user's configuration
		queues-login-logout;  // queue login/logout
		to-conferences;       // conferences
		to-internal-nobody;   // internal phones (nobodies)
		to-internal-users;    // internal phones (users)
		//to-gateway;           // to the gateway
		test;                 // test extensions
		agents;
	}
	
	_*31X. => {
		Verbose(1,### -GS- Set CLIR for number ${EXTEN:3});
		Set(__clir=1);
		jump ${EXTEN:3}@from-internal-users;
	}
}


//---------------------------------------------------------------------
//  From Fax server
//---------------------------------------------------------------------

context from-fax-server {
	_[*#0-9]. => {
		Set(__user_id=${CALLERID(name)});
		Set(__user_name=${CALLERID(num)});
		//Set(CALLERID(name)=${CALLERID(num)});
		Verbose(1,### Sending fax from user ${CALLERID(num)}, ${user_id} to ${EXTEN});
		jump ${EXTEN}@from-internal-users;
	}
}


//---------------------------------------------------------------------
//  From unauthenticated IAX user
//---------------------------------------------------------------------

context from-iax-unauth {
	9999999999 => {
		Hangup();
	}
}


//---------------------------------------------------------------------
//  From other Nodes
//---------------------------------------------------------------------

context from-node {
	includes {
		to-conferences-self;       // conferences
		to-internal-nobody-self;   // internal phones (nobodies)
		voicemail-any-self;        // vm boxes
		to-internal-users-self;    // internal phones (users)
	}
}


//---------------------------------------------------------------------
//  Macro to store dial log
//---------------------------------------------------------------------

macro dial-log-store( muser, mtype, mnumber, mqueue ) {
	
	if ("${mtype}"="in" || "${mtype}"="out" || "${mtype}"="missed") {
		if ("${mnumber}" = "") {
			if ("${mtype}"="in" || "${mtype}"="missed") {
				Set(mnumber=${CALLERID(num)});
			}
		}

		if ( "${mtype}" = "out" && "${mname}" = "" ) {
			AGI(/opt/gemeinschaft/dialplan-scripts/out-get-callername.agi,${muser},${mnumber});
		}
		else if ( "${mtype}" != "out" ) {
			Set(mname=${CALLERID(name)});
		}
		Verbose(1,### Store in dial log of user ${muser}: ${mtype} ${mnumber} ${mname} (queue=${mqueue}));
		TrySystem(/opt/gemeinschaft/dialplan-scripts/dial-log-store '${muser}' '${mtype}' '${mnumber}' '${mqueue}' '${mname}');
	}
	return;
}


//---------------------------------------------------------------------
//  HA-System Alarm
//---------------------------------------------------------------------

context systemalarm {
	
	// wird vom HA-System angerufen falls z.B. ein Node ausfaellt
	systemalarm => {
		Verbose(0,### -GS- SYSTEM-ALARM ##################);
		Set(__is_private_call=1);  // damit Rauswaehlen erlaubt
		/*
		Set(i=1);
		while ("${systemalarm_${i}}" != "") {
			Verbose(0,### -GS- SYSTEM-ALARM - i=${i} - dial ${systemalarm_${i}});
			!!!!!!!
			Dial(Local/${systemalarm_${i}}/n,20,g); // hier noch irgendwas mit Makro ...
			i=${i}+1;
		}
		*/
		Hangup();
	}
	
}


//---------------------------------------------------------------------
//  Call Completion (Autom. Rueckruf)
//---------------------------------------------------------------------

context call-completion {
	
	_cc-. => {
		Set(callee=${EXTEN:3});
		//Set(CHANNEL(language)=de);
		Set(CHANNEL(language)=de);
		Verbose(1,### -GS- Call completion from ${user_name} to ${callee});
		Answer();
		Wait(0.5);
		//SayDigits(${callee});
		//Playback(/opt/gemeinschaft/sounds/${gs_lang}/ist-jetzt-wieder-erreichbar);
		Set(CALLERID(all)=${orig_callerid});
		//DumpChan();
		Set(__is_callcompletion=1); // no forwards and no mailbox
		Dial(Local/${callee}/n,15);
		&hangup-proper-status();
	}
	
}


//---------------------------------------------------------------------
//  dialed with HTTP GET (call-init.php -> callfile)
//---------------------------------------------------------------------

context urldial {
	
	_X. => jump u-${EXTEN};
	_X  => jump u-${EXTEN};
	_*. => jump u-${EXTEN};
	
	_u-. => {
		Set(callfile_target=${EXTEN:2});
		if ("${saved_callerid}" != "") {
			// __saved_callerid is set by call-init.php
			Set(CALLERID(all)=${saved_callerid});
			Set(__saved_callerid=);
		}
		Verbose(1,### -GS- Callfile from ${callfile_from_user} to ${callfile_target});
		&pass-connid();
		Set(__is_callfile_origin=);
		Set(__is_call_from=internal);
		Dial(Local/${callfile_target}@from-internal-users/n,200);
		&hangup-proper-status-urldial();
	}
	
	failed => {
		Verbose(1,### -GS- Callfile: Origin user ${callfile_from_user} did not answer);
		NoCDR();
		Hangup();
	}
	
}


//--------------------------------------------------------------------
//  Set the Custom-Hints if there is set an callforward from the GUI
//--------------------------------------------------------------------

context toggle-cfwd-hint {
	toggle => {
		//toggle callforwarding
		AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-fw.agi,${user_name});
		if ("${fw_std_active}" = "1") {
			Set(CDR(amaflags)=OMIT);
			TryExec(Set(DEVICE_STATE(Custom:${user_name}fwd)=BUSY));
			Hangup();
		} else {
			Set(CDR(amaflags)=OMIT);
			TryExec(Set(DEVICE_STATE(Custom:${user_name}fwd)=NOT_INUSE));
			Hangup();
		}
	}
}

//---------------------------------------------------------------------
//  Test-Extensions
//---------------------------------------------------------------------

context test {
	
	*** => {
		Set(CDR(amaflags)=OMIT);
		Verbose(1,### -GS- Echo test for user ${user_name});
		Answer();
		Echo();
		Hangup();
	}
	
	/*
	// Intercom
	_***. => {
		SIPAddHeader(Call-Info: \;answer-after=0);
		Dial(SIP/${EXTEN:3});
	}
	*/
	
}


//---------------------------------------------------------------------
//  For the cluster watchdog
//---------------------------------------------------------------------

context cluster-watchdog {
	// check-alive extension for the cluster watchdog:
	checkalive => {
		Set(CDR(amaflags)=OMIT);
		NoOp();
	}
}



//---------------------------------------------------------------------
//  Default Context (do not use here. it's in extensions.conf)
//---------------------------------------------------------------------

/*
context default {
}
*/

//---------------------------------------------------------------------
//  Contexts for Wakeup-calls
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//  Wakeup-Call Macros
//---------------------------------------------------------------------


macro wakeuptime-announce (hour,minute) {

	Wait(1);
	if( "${CHANNEL(language)}" == "en" ) {
		Playback(/opt/gemeinschaft/sounds/en-US/wakeup_call_confirmed);
		//Playback(digits/at);
		SayNumber(${hour});
		if( "${minute}" == "0" ) {
			Playback(digits/oclock);
		}
		else {
			SayNumber(${minute});
		}
	}
	else {
		Playback(/opt/gemeinschaft/sounds/de-DE/wakeup_call_confirmed);
		SayNumber(${hour});
		Playback(digits/oclock);
		if( "${minute}" != "0" ) {
			SayNumber(${minute});
		}
	}

	return;

};

macro wakeuptime-remove(user) {
	AGI(/opt/gemeinschaft/dialplan-scripts/wakeup-call-delete.agi,${user});
	if ( "${ret}" == "" || "${ret}" == "error" ) {
		Playback(/opt/gemeinschaft/sounds/${lang}/error_wakeup_call_cancelled);
		Wait(0.5);
		Playback(vm-goodbye);
		Hangup();
	}

	Playback(/opt/gemeinschaft/sounds/${lang}/wakeup_call_cancelled);
	Wait(0.5);
	Playback(vm-goodbye);
	Hangup();

	return;
	
};

//---------------------------------------------------------------------
//  Wakeup-Call
//---------------------------------------------------------------------



context wakeup-call-select-lang {
	
	s => {
		Set(__lang=de-DE);
		Answer();
	begin:
		Background(/opt/gemeinschaft/sounds/de-DE/wakeup_call_language_selection);
		Background(/opt/gemeinschaft/sounds/en-US/wakeup_call_language_selection);
		WaitExten(20);
	};
	1=> {
		Set(CHANNEL(language)=de);
		Set(__lang=de-DE);
		goto wakeup-call|s|1;
	};
	2=> {
		Set(CHANNEL(language)=en);
		Set(__lang=en-US);
		goto wakeup-call|s|1;
	};
	t => {
		jump s;
	};
	i => {
		jump s;
	};
	h => {
		Hangup();
	};
};


context wakeup-call {

	s => {
		AGI(/opt/gemeinschaft/dialplan-scripts/wakeup-call-check.agi,${user_name});
		
		if ( "${ret}" == "" || "${ret}" == "error" )
			goto error;
		else if( "${ret}" == "notset" )
			goto notset;
			
			Answer();
			&wakeuptime-announce(${hour},${minute});
			jump s@wakeup-call-set;
			

		notset:
			Answer();
			Wait(1);
			Playback(/opt/gemeinschaft/sounds/${lang}/no_wakeup_call);
			
			jump s@wakeup-call-notset;
		error:
			Wait(1);
			Playback(/opt/gemeinschaft/sounds/${lang}/error);
			Wait(0.5);
			Playback(vm-goodbye);
			Hangup();
	

	}

};

context wakeup-call-set {
	
	s => {
		Answer();
	begin:
		Background(/opt/gemeinschaft/sounds/${lang}/alarm_change);
		WaitExten(20);
	};
	#=> {
		&wakeuptime-remove(${user_name});
	};
	*=> {
		goto wakeup-call-notset|s|1;
	};
	t => {
		jump h;
	};
	i => {
		jump h;
	};
	h => {
		Hangup();
	};
};

context wakeup-call-notset {

	s => {
		Read(wtime,/opt/gemeinschaft/sounds/${lang}/wakeup_call_request,4,,,5);

		if ( "${READSTATUS}" == "OK" ) {

			AGI(/opt/gemeinschaft/dialplan-scripts/wakeup-call-set.agi,${user_name},${wtime});
			if ( "${isset}" == "error" ) {
				Playback(/opt/gemeinschaft/sounds/${lang}/error_entry);
				goto wakeup-call-notset|s|1;
			}
			else {
				Playback(/opt/gemeinschaft/sounds/${lang}/wakeup_call_saved);
			}			

		}
		else {
			Playback(/opt/gemeinschaft/sounds/${lang}/error_entry);
			goto wakeup-call-notset|s|1;
		}
		

		AGI(/opt/gemeinschaft/dialplan-scripts/wakeup-call-check.agi,${user_name});
		if ( "${ret}" == "" || "${ret}" == "error" ) {
			Hangup();
		}
		else if( "${ret}" == "set" ) {
			&wakeuptime-announce(${hour},${minute});
		}
		else {
			Wait(0.5);
			Playback(/opt/gemeinschaft/sounds/${lang}/no_wakeup_call);
		}
		Wait(0.5);
		Playback(vm-goodbye);
		Hangup();
		

	}


};


context wakeup-job {

	s => {
		Wait(1);
		Playback(/opt/gemeinschaft/sounds/de-DE/wakeup_call_announcement);
		SayUnixTime(,,R);
		Wait(0.5);
		Set(CHANNEL(language)=en);
		Playback(/opt/gemeinschaft/sounds/en-US/wakeup_call_announcement);
		SayUnixTime(,,R);
		MusicOnHold();
	}

}


//---------------------------------------------------------------------
//  Contexts for IVRs
//---------------------------------------------------------------------



// (auto-generated)



//---------------------------------------------------------------------
//  custom contexts
//---------------------------------------------------------------------

/* **************************************************************
   [de]
   Um nach Aenderungen eventuelle Syntax-Fehler zu entdecken
   rufen Sie bitte folgendes Skript auf:
   /opt/gemeinschaft/sbin/gs-ast-ael-check
   
   [en]
   To detect syntax errors after making changes please call
   /opt/gemeinschaft/sbin/gs-ast-ael-check
************************************************************** */


context to-internal-custom {
	
	/*
	771 => {
		Verbose(1,### -GS- You have reached extension ${EXTEN});
		Playback(tt-weasels);
		Hangup();
	}
	*/
	
}



/* **************************************************************
   [de]
   Um nach Aenderungen eventuelle Syntax-Fehler zu entdecken
   rufen Sie bitte folgendes Skript auf:
   /opt/gemeinschaft/sbin/gs-ast-ael-check
   
   [en]
   To detect syntax errors after making changes please call
   /opt/gemeinschaft/sbin/gs-ast-ael-check
************************************************************** */


context from-internal-custom {
	
	/*
	772 => {
		Verbose(1,### -GS- You have reached extension ${EXTEN});
		Playback(tt-weasels);
		Hangup();
	}
	*/
	
}





