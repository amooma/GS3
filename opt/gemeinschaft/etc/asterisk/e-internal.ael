//---------------------------------------------------------------------
//            Gemeinschaft - asterisk cluster gemeinschaft
// 
// $Revision$
// 
// Copyright 2007, amooma GmbH, Bachstr. 126, 56566 Neuwied, Germany,
// http://www.amooma.de/
// Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
// Philipp Kempgen <philipp.kempgen@amooma.de>
// Peter Kozak <peter.kozak@amooma.de>
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA 02110-1301, USA.
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//  Check if extension is valid
//---------------------------------------------------------------------

macro check-valid-extension( mext ) {
	
	Verbose(1,### Incoming call to ${mext});
	if ("${user_id}" != "") {
		// from internal user, store dial log (out)
		if ("${forwarded_by}" = "" && "${forwards}" < "1" && "${origext}" = "") {
			// only if this is the dialed number. origext will be set later
			if ("${is_callfile_origin}" != "1") {
				// __is_callfile_origin is set by call-init.php
				&dial-log-store(${user_name},out,${mext},0);
			}
		}
	}
	
	// is it to one of *our* extensions?
	AGI(/opt/gemeinschaft/dialplan-scripts/in-get-where.agi,${mext},${is_huntgroup});
	Verbose(1,### Extension ${mext} is of type ${exttype});
	if ("${exttype}" != "user" && "${exttype}" != "queue" && "${exttype}" != "conference" && "${exttype}" != "huntgroup" && "${exttype}" != "ivr" && "${exttype}" != "foreign") {
		Verbose(1,### Extension ${mext} is unknown);
		
		if ("${is_from_gateway}" = "1") {
			Verbose(1,### Don't allow call from the gateway to go to the gateway again - extension: ${mext});
			//Congestion(3);
			// 2 = AST_CAUSE_NO_ROUTE_TRANSIT_NET => SIP 404 Not Found
			Set(PRI_CAUSE=2);
			Hangup(2);
		}
		
		//if ("${is_sub_system}" = "yes") {
		//	Verbose(1,### We are a sub-system. Dial to the gateway for unknown extension: ${mext});
			Verbose(1,### Dial to the gateway for unknown extension: ${mext});
			&dial-gateway(${mext});
		//} else {
		//	Verbose(1,### We are not a sub-system. Hang up.);
		//}
		Hangup();
	}
}


//---------------------------------------------------------------------
//  Dial to node
//---------------------------------------------------------------------

macro dial-node( mext_at_node ) {
	//if ("${saved_callerid}" != "") {
	//	// __saved_callerid is set by call-init.php
	//	// is this needed here? call-init.php should have picked the
	//	// correct node already
	//	Set(CALLERID(all)=${saved_callerid});
	//}
	Verbose(1,### Dial and forget: ${mext_at_node});
	SIPAddHeader(X-GS-user_id: ${user_id});
	SIPAddHeader(X-GS-user_name: ${user_name});
	SIPAddHeader(X-GS-forwards: ${forwards});
	SIPAddHeader(X-GS-origext: ${origext});
	SIPAddHeader(X-GS-clir: ${clir});
	SIPAddHeader(X-GS-src: ${is_call_from});
	SIPAddHeader(X-GS-is_callcompletion: ${is_callcompletion});
	SIPAddHeader(X-GS-is_callfile_origin: ${is_callfile_origin});
	SIPAddHeader(X-GS-callfile_from_user: ${callfile_from_user});
	SIPAddHeader(X-GS-forwarded_to: ${forwarded_to});
	SIPAddHeader(X-GS-forwarded_by: ${forwarded_by});
	SIPAddHeader(X-GS-is_from_gateway: ${is_from_gateway});
	SIPAddHeader(X-GS-is_huntgroup: ${is_huntgroup});
	SIPAddHeader(X-GS-SIPTRANSFER: ${SIPTRANSFER});
	SIPAddHeader(X-GS-BLINDTRANSFER: ${BLINDTRANSFER});
	Dial(SIP/${mext_at_node},500);
	Verbose(1,### Tried to call ${mext_at_node} but: ${DIALSTATUS});
	&hangup-proper-status();
}


//---------------------------------------------------------------------
//  To Internal Nobodies
//---------------------------------------------------------------------

context to-internal-nobody {

	#exec "/opt/gemeinschaft/etc/asterisk/e-nobody-exten.php"
	
}

macro dial-internal-nobody( mext2 ) {
	&check-valid-extension(${mext2});
	if ("${dial_to_node}" = "") {
		Verbose(1,### Extension ${mext2} is at node: SELF);
		jump ${mext2}@to-internal-nobody-self;
	}
	else {
		&dial-node(${mext2}@${dial_to_node});
		&hangup-proper-status();
	}
}

context to-internal-nobody-self {
	
	// in this context it is guaranteed that the called extension is at
	// the local node
	
	#exec "/opt/gemeinschaft/etc/asterisk/e-nobody-self-exten.php"
	
}

macro dial-internal-nobody-self( mext3 ) {
	Verbose(1,### Incoming call to ${mext3} at this node);
	if ("${user_id}" != "") {
		// from internal user, store dial log (out)
		AGI(/opt/gemeinschaft/dialplan-scripts/get_callerid.agi,${CALLERID(num)},internal);
		&dial-log-store(${user_name},out,${mext3},0);
	}
	&set-callerid-by-clir();
	Verbose(1,### Call local nobody ${mext3}\, timeout 30);
	Dial(SIP/${mext3},30,o);
	&hangup-proper-status();
}

//---------------------------------------------------------------------
//  To Internal Users/Queues/...
//---------------------------------------------------------------------

context to-internal-users {

	//----------------------------------------------------------
	// from ISDN
	//----------------------------------------------------------
	
	//_978. => {
	//	Set(isdn_exten=${EXTEN:3});
	//	Verbose(1,### Incoming call from the PSTN to ${isdn_exten});
	//	Set(__is_from_gateway=1);
	//	jump ${isdn_exten};
	//}
	
	
	//----------------------------------------------------------
	// Fax server
	//----------------------------------------------------------
	
	#exec "/opt/gemeinschaft/etc/asterisk/e-fax-exten.ael.php"
	
	_fa[x]-. => {
		Set(__fax_to_ext=${EXTEN:4});
		Verbose(1,### Incoming fax to fax server extension for ${fax_to_ext});
		Dial(IAX2/iaxmodem00/${fax_to_ext});
		Dial(IAX2/iaxmodem01/${fax_to_ext});
		// REPEAT AS MANY TIMES AS YOU HAVE IAXMODEMS CONFIGURED.
		// EACH IAXMODEM CAN HANDLE ONE CALL AT A TIME.
		// FIXME!?
		Hangup();
	}
	
	
	//----------------------------------------------------------
	// Dialing voicemail, used in call-forwarding
	//----------------------------------------------------------
	
	_vm. => {
		Set(box=${EXTEN:2});
		if ("${box:0:1}" = "*") {
			Set(box=${box:1});
			Set(record_msg=0);
		}
		else {
			Set(record_msg=1);
		}
		AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-vm.agi,${box});
		if ("${user_id}" != "") {
			Set(vm_source=internal);
		}
		else {	
			if ("${is_sub_system}" = "yes") {
						
				&is_dmz(${CALLERID(num)});
				if ("${is_dmz}" == "1") {
					Set(vm_source=internal);
				}
				else {
					Set(vm_source=external);
				}
	
			}
			else {
				
				if ( "${is_from_gateway}" = "" ) {
					Set(vm_source=internal);
				}
				else {
					Set(vm_source=external);
				}
			}
		}
		Verbose(1,### Forwarded call to voicemail of ${box});
		Answer();
		Wait(0.5);
		Set(vm_announce_file=${vm_announce_${vm_source}});
		if ("${vm_announce_file}" != "") {
			Playback(${vm_announce_file});
		}
		else {
			Playback(vm-theperson);
			//SayDigits(${origext});
			SayDigits(${box});
			//if ("${DIALSTATUS}" = "BUSY") {
			//	Playback(vm-isonphone);
			//}
			//else {
				Playback(vm-isunavail);
			//}
		}
		if ("${record_msg}" = "1") {
			if ("${vm_announce_file}" = "") {
				Playback(vm-intro);
			}
			VoiceMail(${box},s);
		}
		Hangup();
	}
	
	
	//----------------------------------------------------------
	// Users, Queues, ...
	//----------------------------------------------------------
	
	_X. => {
		if ( "${is_from_gateway}" != "" ) {
			Verbose(1,### Incoming call from a gateway to ${EXTEN});
			//Set(__is_from_gateway=1);
		}
		//else if ("${CHANNEL(channeltype)}" = "SIP") {
		//	// this needs to be nested because Asterisk would otherwise complain
		//	// ("function_sipchaninfo_read: This function can only be used on SIP channels")
		//	if ("${SIPCHANINFO(peername)}" = "gateway") {
		//		Verbose(1,### Incoming call from a gateway to ${EXTEN});
		//		Set(__is_from_gateway=1);
		//	}
		//	else {
		//		Set(__is_from_gateway=);
		//	}
		//}
		//else {
		//	Set(__is_from_gateway=);
		//}
		&pass-connid();
		&check-valid-extension(${EXTEN});
		if ("${dial_to_node}" = "") {
			Verbose(1,### Extension ${EXTEN} is at node: SELF);
			if ("${user_id}" != "") {
				AGI(/opt/gemeinschaft/dialplan-scripts/get_callerid.agi,${CALLERID(num)},internal);
			}
			jump ${EXTEN}@to-internal-users-self;
		}
		else {
			if ("${exttype}" != "foreign") {
				if ("${user_id}" != "") {
					AGI(/opt/gemeinschaft/dialplan-scripts/get_callerid.agi,${CALLERID(num)},internal);
				}
				&dial-node(${EXTEN}@${dial_to_node});
				&hangup-proper-status();
			}
			else {
				if ("${is_sub_system}" = "yes") {
					Verbose(1,### We are a sub-system. Dial to the gateway for foreign ext. ${EXTEN}.);
					&dial-gateway(${EXTEN});
				} else {
					Verbose(1,### We are not a sub-system. Call foreign ext. ${EXTEN} directly.);
					Dial(SIP/${EXTEN}@${dial_to_node},70);
				}
				Hangup();
			}
		}
	}
	
	
	//----------------------------------------------------------
	// Pickup
	//----------------------------------------------------------
	
	/*
	_*8. => {
		//&dial-node(${EXTEN}@gs-0002);
		if ("${PICKUPMARK}" = "") {
			Set(pmark=${EXTEN:2});
			Verbose(1,### User ${user_name} tries to pickup ${pmark});
			DPickup(${pmark}@PICKUPMARK);
		}
	}
	*/
	
	//----------------------------------------------------------
	// Pickup for single users
	//----------------------------------------------------------
	

	_*81*. => {
 		Set(pext=${EXTEN:4});
		if ("${pext}" != "") {
 			Verbose(1,### User ${user_name} tries to pickup ext. ${pext});
			// Override searching for huntgroups when picking calls
			Set(is_huntgroup=1);
 			&check-valid-extension(${EXTEN:4});
			if ("${dial_to_node}" = "") {
				Verbose(1,### Extension ${EXTEN} is at node: SELF);
				PickupChan(SIP/${pext});
			}
			else {
				&dial-node(${EXTEN}@${dial_to_node});
				&hangup-proper-status();
			}
		}
	}


	//----------------------------------------------------------
	// Pickup on Grandstream phones
	//----------------------------------------------------------
	
	_**. => {
		// the pickup prefix (**) is not configurable on Grandstream phones
		Set(pext=${EXTEN:2});
		jump *81*${pext};
	}
	
	//----------------------------------------------------------
	// Pickup for pickup group extensions
	//----------------------------------------------------------
	
	_*82*8*. => {
		// directly used by Snom (see htdocs/prov/snom/settings.php)
		if ("${PICKUPMARK}" = "") {
			Set(pmark=${EXTEN:6});
			Verbose(1,### User ${user_name} tries to pickup group ${pmark});
			//FIXME - add pickup group check
			DPickup(${pmark}@PICKUPMARK);
			//FIXME - does not work across nodes
			
			// if we got here, the pickup attempt was not successful
			// (maybe because there wasn't even a call)
			NoCDR();
			// 31 = AST_CAUSE_NORMAL_UNSPECIFIED => SIP 480 Temporarily unavailable
			Hangup(31);
		}
		else {
			NoCDR();
		}
	}
	
	//----------------------------------------------------------
	// Pickup group extensions
	//----------------------------------------------------------
	
	_*8*. => {
		if ("${PICKUPMARK}" != "") {
			NoCDR();
			Verbose(1,### Call to pickup group ${EXTEN:3});
		}
		else {
			// used by Siemens OpenStage
			jump *82${EXTEN};
		}
	}
	
	//hint(SIP/2001&SIP/555) *8*00001 => {}
	
	
	//regexten _*8. => NoOp(it's a pattern!);
	//hint(SIP/2002) _*8. => NoOp(it's a pattern!);
	/*
	hint(SIP/2002) _*8. => {
		if ("${PICKUPMARK}" = "") {
			Pickup(${EXTEN:2}@PICKUPMARK);
			Verbose(1,################################################);
		}
	}
	hint(*800001) *800001 => {}
	*/
	
	
	//----------------------------------------------------------
	// Boss/secretary function (override call forwards)
	//----------------------------------------------------------
	
	_***Z. => {
		Set(boss=${EXTEN:3});
		if ("${allow_direct_dial}" != "yes") {
			Verbose(1,### Direct dialing not enabled);
			Hangup();
		}
		Verbose(1,### Incoming call to ${boss}\, direct dial);
		&pass-connid();
		
		//if ("${is_from_gateway}" = "1" || "${SIPCHANINFO(peername)}" = "gateway" || "${CONTEXT}" = "from-gateway" || "${CHANNEL(channeltype)}" = "Zap") {
		if ( "${is_from_gateway}"  =  "1" ) {
			Verbose(1,### No direct dial from gateway);
			Hangup();
		}
		if ("${user_id}" = "") {
			Verbose(1,### No direct dial from non-internal user);
			Hangup();
		}
		// is it to one of *our* extensions?
		AGI(/opt/gemeinschaft/dialplan-scripts/in-get-where.agi,${boss});
		Verbose(1,### Extension ${boss} is of type ${exttype});
		if ("${exttype}" != "user") {
			Verbose(1,### Extension ${boss} is not a user);
			Hangup();
		}
		AGI(/opt/gemeinschaft/dialplan-scripts/check_secretary_permission.agi,${user_id},${boss});
		if ("${issecretary}" != "true") {
			Verbose(1,### ${user_name} is not secretary of ${boss});
			Hangup();
		}
		if ("${dial_to_node}" != "") {
			Verbose(1,### Extension ${boss} is not on this node - You did not set up boss/secretary properly!);
			Hangup();
		}
		
		// do some checking if user is a secretary of boss
		// ...
		
		jump ***-${boss}@to-internal-users-self;
	}
	
	//----------------------------------------------------------
	// Dial mailbox directly
	//----------------------------------------------------------
	
	_**Z. => {
		Set(box=${EXTEN:2});
		if ("${allow_direct_dial_mbox}" != "yes") {
			Verbose(1,### Direct dialing to mailbox not enabled);
			Hangup();
		}
		Verbose(1,### Incoming call to mailbox ${box}\, direct dial);
		//if ("${is_from_gateway}" = "1" || "${SIPCHANINFO(peername)}" = "gateway" || "${CONTEXT}" = "from-gateway" || "${CHANNEL(channeltype)}" = "Zap") {
		if ( "${is_from_gateway}"  = "1" ) {
			Verbose(1,### No direct dial from gateway);
			Hangup();
		}
		if ("${user_id}" = "") {
			Verbose(1,### No direct dial from non-internal user);
			Hangup();
		}
		// is it to one of *our* extensions?
		AGI(/opt/gemeinschaft/dialplan-scripts/in-get-where.agi,${box});
		Verbose(1,### Extension ${box} is of type ${exttype});
		if ("${exttype}" != "user") {
			Verbose(1,### Extension ${box} is not a user);
			Hangup();
		}
		
		if ("${dial_to_node}" = "") {
			Verbose(1,### Extension ${box} is at node: SELF);
			goto to-internal-users-self|${EXTEN}|1;
		}
		else {
			&dial-node(${EXTEN}@${dial_to_node});
			&hangup-proper-status();
		}
	}
	
	
	// hints moved here from context to-internal-users-self
	#exec "/opt/gemeinschaft/etc/asterisk/e-internal-hints.ael.php"
	
	//FIXME - this extension is just for testing. needs to be removed!
	//_9. => {
	//	Verbose(1,#################### GATEWAY SIM ######################);
	//	Dial(Local/${EXTEN:1}@from-gg-pstn/n);
	//	Hangup();
	//}
}

context to-internal-users-huntgroup {

	_Z. => {
		Set(is_huntgroup=1);
		jump ${EXTEN}@to-internal-users;
	}

}

context to-internal-users-self {
	
	// in this context it is guaranteed that the called extension is at
	// the local node

	//----------------------------------------------------------
	// Pickup
	//----------------------------------------------------------
	
	_*81*. => {
		Set(pext=${EXTEN:4});
		if ("${pext}" != "") {
			Verbose(1,### User ${user_name} tries to pickup ext. ${pext});
			PickupChan(SIP/${pext});
                }
        }



	//----------------------------------------------------------
	// Boss/secretary function (override call forwards)
	//----------------------------------------------------------
	
	_***-Z. => {
		Set(boss=${EXTEN:4});
		Set(origext=${boss});
		Set(CALLERID(dnid)=${boss});
		Verbose(1,### Secretary (${user_name}) to boss (${boss}) direct dial);
		Set(__is_call_from=internal);
		&pass-connid();
		// get ringer
		AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-ringer.agi,${boss},${is_call_from});
		if ("${ringer}" != "") {
			Verbose(1,### Ringer: ${ringer});
			SIPAddHeader(Alert-Info: ${ringer});
		}
		//if ("${saved_callerid}" != "") {
		//	// __saved_callerid is set by call-init.php
		//	Set(CALLERID(all)=${saved_callerid});
		//}
		Set(CALLERID(name)=Sek. ${CALLERID(name)});
		Dial(SIP/${boss},30);
		&hangup-proper-status();
	}
	
	
	//----------------------------------------------------------
	// callfile to origin user
	//----------------------------------------------------------
	
	_urldial-Z. => {
		Set(callfile_from=${EXTEN:8});
		Set(origext=${callfile_from});
		Set(CALLERID(dnid)=${callfile_from});
		Verbose(1,### callfile_from ${callfile_from});
		Set(__is_call_from=internal);
		// get ringer
		AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-ringer.agi,${callfile_from},${is_call_from});
		if ("${ringer}" != "") {
			Verbose(1,### Ringer: ${ringer});
			SIPAddHeader(Alert-Info: ${ringer});
		}
		Dial(SIP/${callfile_from},30);
		&hangup-proper-status();
	}
	
	
	//----------------------------------------------------------
	// Dial mailbox directly
	//----------------------------------------------------------
	
	_**Z. => {
		Set(box=${EXTEN:2});
		Set(origext=${box});
		#exec "/opt/gemeinschaft/etc/asterisk/e-lang.ael.php"
		Verbose(1,### Direct dial to mailbox ${box} on this node);
		Set(__is_call_from=internal);
		
		if ("${from_node}" = "yes") {
			Verbose(1,### Incoming call to ${EXTEN} is from another node);
			if ("${CHANNEL(channeltype)}" = "SIP") {
				Verbose(1,# Evaluation SIP headers);
				if ("${SIP_HEADER(X-GS-user_id)}" != "")
					Set(__user_id=${SIP_HEADER(X-GS-user_id)});
				if ("${SIP_HEADER(X-GS-user_name)}" != "")
					Set(__user_name=${SIP_HEADER(X-GS-user_name)});
				if ("${SIP_HEADER(X-GS-forwards)}" != "")
					Set(__forwards=${SIP_HEADER(X-GS-forwards)});
				if ("${SIP_HEADER(X-GS-origext)}" != "")
					Set(__origext=${SIP_HEADER(X-GS-origext)});
				if ("${SIP_HEADER(X-GS-clir)}" != "")
					Set(clir=${SIP_HEADER(X-GS-clir)});  // nicht vererben
				if ("${SIP_HEADER(X-GS-src)}" != "")
					Set(__is_call_from=${SIP_HEADER(X-GS-src)});
				if ("${SIP_HEADER(X-GS-is_callcompletion)}" != "")
					Set(__is_callcompletion=${SIP_HEADER(X-GS-is_callcompletion)});
				if ("${SIP_HEADER(X-GS-is_callfile_origin)}" != "")
					Set(__is_callfile_origin=${SIP_HEADER(X-GS-is_callfile_origin)});
				if ("${SIP_HEADER(X-GS-callfile_from_user)}" != "")
					Set(__callfile_from_user=${SIP_HEADER(X-GS-callfile_from_user)});
				if ("${SIP_HEADER(X-GS-forwarded_to)}" != "")
					Set(__forwarded_to=${SIP_HEADER(X-GS-forwarded_to)});
				if ("${SIP_HEADER(X-GS-forwarded_by)}" != "")
					Set(__forwarded_by=${SIP_HEADER(X-GS-forwarded_by)});
				if ("${SIP_HEADER(X-GS-is_from_gateway)}" != "")
					Set(__is_from_gateway=${SIP_HEADER(X-GS-is_from_gateway)});
				if ("${SIP_HEADER(X-GS-is_huntgroup)}" != "")
					Set(__is_huntgroup=${SIP_HEADER(X-GS-is_huntgroup)});
				if ("${SIP_HEADER(X-GS-SIPTRANSFER)}" != "")
					Set(__SIPTRANSFER=${SIP_HEADER(X-GS-SIPTRANSFER)});
				if ("${SIP_HEADER(X-GS-BLINDTRANSFER)}" != "")
					Set(__BLINDTRANSFER=${SIP_HEADER(X-GS-BLINDTRANSFER)});
			}
		}
		
		Set(cc_possible=0);
		Set(is_callcompletion=0);
		Set(vm_real_source=internal);
		Set(vm_source=internal);
		AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-vm.agi,${box});
		goto ${box}|user_uncallable_vm_on;
		
	}
	
	
	//----------------------------------------------------------
	// Users, Queues, ...
	//----------------------------------------------------------
	
	_X. => {
		
		Verbose(1,### Incoming call to ${EXTEN} at this node);
		
		//if ("${saved_callerid}" != "") {
		//	// __saved_callerid is set by call-init.php
		//	Set(CALLERID(all)=${saved_callerid});
		//}
		
		#exec "/opt/gemeinschaft/etc/asterisk/e-lang.ael.php"
		if ("${from_node}" = "yes") {
			Verbose(1,### Incoming call to ${EXTEN} is from another node);
			if ("${CHANNEL(channeltype)}" = "SIP") {
				if ("${SIP_HEADER(X-GS-user_id)}" != "")
					Set(__user_id=${SIP_HEADER(X-GS-user_id)});
				if ("${SIP_HEADER(X-GS-user_name)}" != "")
					Set(__user_name=${SIP_HEADER(X-GS-user_name)});
				if ("${SIP_HEADER(X-GS-forwards)}" != "")
					Set(__forwards=${SIP_HEADER(X-GS-forwards)});
				if ("${SIP_HEADER(X-GS-origext)}" != "")
					Set(__origext=${SIP_HEADER(X-GS-origext)});
				if ("${SIP_HEADER(X-GS-clir)}" != "")
					Set(clir=${SIP_HEADER(X-GS-clir)});  // nicht vererben
				if ("${SIP_HEADER(X-GS-src)}" != "")
					Set(__is_call_from=${SIP_HEADER(X-GS-src)});
				if ("${SIP_HEADER(X-GS-is_callcompletion)}" != "")
					Set(__is_callcompletion=${SIP_HEADER(X-GS-is_callcompletion)});
				if ("${SIP_HEADER(X-GS-is_callfile_origin)}" != "")
					Set(__is_callfile_origin=${SIP_HEADER(X-GS-is_callfile_origin)});
				if ("${SIP_HEADER(X-GS-callfile_from_user)}" != "")
					Set(__callfile_from_user=${SIP_HEADER(X-GS-callfile_from_user)});
				if ("${SIP_HEADER(X-GS-forwarded_to)}" != "")
					Set(__forwarded_to=${SIP_HEADER(X-GS-forwarded_to)});
				if ("${SIP_HEADER(X-GS-forwarded_by)}" != "")
					Set(__forwarded_by=${SIP_HEADER(X-GS-forwarded_by)});
				if ("${SIP_HEADER(X-GS-is_from_gateway)}" != "")
					Set(__is_from_gateway=${SIP_HEADER(X-GS-is_from_gateway)});
				if ("${SIP_HEADER(X-GS-is_huntgroup)}" != "")
					Set(__is_huntgroup=${SIP_HEADER(is_huntgroup)});
				if ("${SIP_HEADER(X-GS-SIPTRANSFER)}" != "")
					Set(__SIPTRANSFER=${SIP_HEADER(X-GS-SIPTRANSFER)});
				if ("${SIP_HEADER(X-GS-BLINDTRANSFER)}" != "")
					Set(__BLINDTRANSFER=${SIP_HEADER(X-GS-BLINDTRANSFER)});
			}
			//else {
				//if ("${CHANNEL(channeltype)}" != "Local") {
					// because we need to pass variables to other nodes which can
					// only be done with SIP we support only SIP for inter-node
					// connections. (and calls from Local can also get here of
					// course.)
				//}
			//}
		}
		&pass-connid();
		
		if ("${forwards}" = "") {
			Set(__forwards=-1);
			
			if ("${user_id}" != "") {
				Set(__is_call_from=internal);
				
				// from internal user, store dial log (out)
				//&dial-log-store(${user_name},out,${EXTEN});
				// we already did this
			}
			else {
				if ("${is_callfile_origin}" != "1") {
					if ("${is_sub_system}" = "yes") {
						
						&is_dmz(${CALLERID(num)});
						if ("${is_dmz}" == "1") {
							Set(__is_call_from=internal);
						}
						else {
							Set(__is_call_from=external);
						}
	
					}
					else {
				
						if ( "${is_from_gateway}" = "" ) {
							Set(__is_call_from=internal);
						}
						else {
							Set(__is_call_from=external);
						}
					}
				}
				else {
					Set(__is_call_from=internal);
				}
			}
		}
		if ("${forwards}" = "${max_forwards}") {
			Verbose(1,### Maximum number of call forwards (${max_forwards}));
			goto user_uncallable;
		}
		Set(__forwards=${MATH(${forwards}+1,int)});
		//Set(DYNAMIC_FEATURES=);
		if ("${origext}" = "")
			Set(__origext=${EXTEN});
		
		&set-callerid-by-clir();
		
		// check the type of the called extension:
		AGI(/opt/gemeinschaft/dialplan-scripts/in-get-type.agi,${EXTEN},${is_huntgroup});
		Verbose(1,### Incoming call to ${EXTEN}\, type: ${exttype}\, forwards: ${forwards});
		
		// is it a user? is it a queue?
		if ("${exttype}" = "huntgroup")
			goto to_huntgroup;
		if ("${exttype}" = "user")
			goto to_user;
		if ("${exttype}" = "queue")
			goto to_queue;
		if ("${exttype}" = "unknown")
			goto to_unknown;
		if ("${exttype}" = "ivr")
			goto to_ivr;
		// the AGI script failed:
		Verbose(1,### The AGI script returned an empty or bad type ("${exttype}")!);
		Hangup();

		//----------------------------------------------------------
		// type is "huntgroup":
		//----------------------------------------------------------
		to_huntgroup:
			Set(is_huntgroup=1);
			AGI(/opt/gemeinschaft/dialplan-scripts/in-huntgroup-get.agi,${EXTEN},${is_call_from});
			Set(huntgroup=1);
			
			AGI(/opt/gemeinschaft/dialplan-scripts/in-huntgroup-get-fw.agi,${EXTEN});
			// forward (case=always) active?
			if ("${fw_${is_call_from}_always}" != "") {
				Verbose(1,### Called huntgroup: ${EXTEN} - always forward to: ${fw_${is_call_from}_always});
				Set(__forwarded_by=${EXTEN});
				if ( "${is_from_gateway}" = "1" )
					Set(__is_from_gateway=2);
				Set(__redirect=${fw_${is_call_from}_always});
				Dial(Local/${fw_${is_call_from}_always}/n,900);
				&hangup-proper-status();
			}
			
			if ("${huntgroup_strategy}" = "linear") {
				while ("${huntgroup_${huntgroup}_dial}" != "") {
					Verbose(1,### huntgroup member: ${huntgroup_${huntgroup}_dial});
					Dial(Local/${huntgroup_${huntgroup}_dial}@to-internal-users-huntgroup,${huntgroup_${huntgroup}_timeout},o);
					huntgroup=${huntgroup}+1;
					}
			} else {
				Verbose(1,### Dialling hunt group ${EXTEN} in parallel mode);
				Dial(${huntgroup_dial},${huntgroup_timeout},o);
			}
			Verbose(1,### finished trying huntgroup members. Last dialstatus: ${DIALSTATUS});
			if("${DIALSTATUS}" = "CHANUNAVAIL"){
				//"CHANUNAVAIL" may also be the dialstatus if nobody answers
				Set(DIALSTATUS=NOANSWER);
				Verbose(1,### Changed DIALSTATUS from CHANUNAVAIL to ${DIALSTATUS});
			}
			//write to log if nobody answered
			if("${DIALSTATUS}" = "NOANSWER"){
				Set(huntgroup=1);
				while ("${huntgroup_${huntgroup}_dial}" != "") {
					Verbose(1,### Writing missing call to DialLog: ${huntgroup_${huntgroup}_dial});
					&dial-log-store(${huntgroup_${huntgroup}_dial},missed,${CALLERID(num)},0);
					huntgroup=${huntgroup}+1;
				}
			}

			if ("${fw_${is_call_from}_timeout}" != "") {
			  Verbose(1,### forwarding call to ${fw_${is_call_from}_timeout});
			  Set(__forwarded_by=${EXTEN});
			  if ( "${is_from_gateway}" = "1" )
				  Set(__is_from_gateway=2);
			  Set(__redirect=${fw_${is_call_from}_timeout});	
			  Dial(Local/${fw_${is_call_from}_timeout}/n,900);
			}
			&hangup-proper-status();

		//----------------------------------------------------------
		// type is "user":
		//----------------------------------------------------------
		to_user:
			
			AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-fw.agi,${EXTEN});
			// forward (case=always) active?
			if ("${fw_${is_call_from}_always}" != "") {
				if ("${is_callcompletion}" = "1") {
					// no forwarding for call completion
					Verbose(1,### Call completion to ${EXTEN} - don't forward);
					Hangup();
				}
				if ("${is_callfile_origin}" != "1") {
					Verbose(1,### Called user: ${EXTEN} - always forward to: ${fw_${is_call_from}_always});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_to=${fw_${is_call_from}_always});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					if ("${is_huntgroup}" != "1") {
						Dial(Local/${fw_${is_call_from}_always}/n,200);
						&hangup-proper-status();
					}
					else {
						Verbose(1,### call forward active in hunt group - skipping member);
						Hangup();
					}
				}
				else {
					// no forwarding for callfile origin
					Verbose(1,### Callfile: Don't forward for origin side);
				}
			}
			
			// call the user
			//
			if ("${is_huntgroup}" != "1") {
				#exec "/opt/gemeinschaft/etc/asterisk/e-dialtimeout-in.ael.php"
				if ("${is_callfile_origin}" != "1") {
					if ("${fw_${is_call_from}_unavail}" != "") {
						Set(dialtimeout=${fw_${is_call_from}_unavail_timeout});
					}
				}
				else {
					Set(dialtimeout=15);
				}
			}
			
			// get ringer
			if ( "${forwards}" != "0" ) {
				
				//we will remove the Alert-Info header here
				&sip-remove-header(Alert-Info);

			}
			AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-ringer.agi,${EXTEN},${is_call_from});
			if ("${ringer}" != "") {
				Verbose(1,### Ringer: ${ringer});
				//SIPAddHeader(Alert-Info: <http://192.168.1.110:82/ringtones/${ringer}>);
				SIPAddHeader(Alert-Info: ${ringer});
			}
			
			if ("${is_callfile_origin}" != "1") {
				AGI(/opt/gemeinschaft/dialplan-scripts/in-user-pgrpdialstr.agi,${EXTEN});
			}
			else {
				Set(pgrpdialstr=);
			}
			if ("${dialtimeout}" != "") {
				Verbose(1,### Call local user ${EXTEN}\, timeout: ${dialtimeout} s);
			}
			else {
				Verbose(1,### Call local user ${EXTEN}\, timeout: none);
			}

			AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-dnd.agi,${EXTEN});
			if ("${dnd_active}" = "1") {
				Set(DIALSTATUS="BUSY");
				if ("${is_huntgroup}" = "1") {
					Verbose(1,### DND active in huntgroup - skipping member);
					Hangup();
				}
			}
			else {
				if( "${forwarded_by}" != "" ) {
					Set(CALLERID(name)=);
				} 
				AGI(/opt/gemeinschaft/dialplan-scripts/in-get-callername.agi,${EXTEN},${CALLERID(num)},${is_call_from});
				if( "${forwarded_by}" != "" ) {
                                        if( "${CALLERID(name)}" = "" ) {
						Set(CALLERID(name)=${CALLERID(num)});
					}
					Set(CALLERID(name)=${CALLERID(name)} >> ${forwarded_by});
                                }
				if ("${SIPTRANSFER}" = "yes") {

				Set(callback_user=$["${BLINDTRANSFER}" : "^SIP/([0-9]+)"]);
					if ("${callback_user}" == "${EXTEN}") {
						Set(CALLERID(name)="[RR] ${CALLERID(name)}");
					}
				}
				//UserEvent(UserCallUI|user: ${user_name}|calledparty: ${EXTEN});
				Dial(SIP/${EXTEN}${pgrpdialstr},${dialtimeout},o);
			}
			
			if ("${is_callfile_origin}" != "1") {
				if ("${is_huntgroup}" == "1") {
					Verbose(1,### No callforwarding in huntgroups);
					Hangup();
				}
				Set(is_dnd=0);
				if ("${DIALSTATUS}" = "BUSY") {         // busy or deflected
					//if ("${HANGUPCAUSE}" = "19" || "${HANGUPCAUSE}" = "21") {
					//	// 19 = AST_CAUSE_NO_ANSWER, 21 = AST_CAUSE_CALL_REJECTED
					//	// This might happen because of DND.
					//	Verbose(1,### Local user ${EXTEN} is on DND - rejected);
					//	Set(is_dnd=1);
					//}
					if ("${CHANNEL(channeltype)}" = "SIP") {
						if ("${SIPPEER(${EXTEN},limit)}" != "" && "${SIPPEER(${EXTEN},limit)}" > "0") {
							if ("${SIPPEER(${EXTEN},curcalls)}" = "0") {
								// busy with 0 calls? we don't believe them, must be DND
								Verbose(1,### Local user ${EXTEN} is on DND - busy with 0 calls);
								Set(is_dnd=1);
							}
						}
					}
					goto user_busy;
					
				}
				if ("${DIALSTATUS}" = "NOANSWER") {     // does not answer the phone
					goto user_unavail;
				}
				if ("${DIALSTATUS}" = "CHANUNAVAIL") {  // offline
					goto user_offline;
				}
				if ("${DIALSTATUS}" = "CONGESTION") {   // congestion or DND
					if ("${CDR(duration)}" = "0" || "${CDR(duration)}" = "1") {
						Verbose(1,### Local user ${EXTEN} is on DND - 0 duration);
						Set(is_dnd=1);
					}
					goto user_offline;
				}
			}
			else {
				if ("${is_huntgroup}" = "1") {
					Verbose(1,### Callfile: huntgroup user ${callfile_from_user} did not answer);
					Hangup();
				}
				else {
					Verbose(1,### Callfile: Origin user ${callfile_from_user} did not answer);
					NoCDR();
				}
			}
			Hangup();
			
			// user busy:
			//
			user_busy:
				Verbose(1,### Called user ${EXTEN} is busy);
				
				#exec "/opt/gemeinschaft/etc/asterisk/e-transfer-failed-callback.php"
				
				// forward on busy?
				if ("${fw_${is_call_from}_busy}" != "") {
					if ("${is_callcompletion}" = "1") {
						// no forwarding for call completion
						Verbose(1,### Call completion to ${EXTEN} (busy) - don't forward);
						&hangup-proper-status();
					}
					Verbose(1,### Called user: ${EXTEN}\, forward on busy to: ${fw_${is_call_from}_busy});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_to=${fw_${is_call_from}_busy});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Dial(Local/${fw_${is_call_from}_busy}/n,200);
					&hangup-proper-status();
				}
				goto user_uncallable;
			
			// user unavail (does not pick up the phone):
			//
			user_unavail:
				Verbose(1,### Called user ${EXTEN} does not answer);
				
				#exec "/opt/gemeinschaft/etc/asterisk/e-transfer-failed-callback.php"
				
				// forward on unavail?
				if ("${fw_${is_call_from}_unavail}" != "") {
					if ("${is_callcompletion}" = "1") {
						// no forwarding for call completion
						Verbose(1,### Call completion to ${EXTEN} (unavail) - don't forward);
						&hangup-proper-status();
					}
					Verbose(1,### Called user ${EXTEN} - forward on unavail to: ${fw_${is_call_from}_unavail});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_to=${fw_${is_call_from}_unavail});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Dial(Local/${fw_${is_call_from}_unavail}/n,200);
					&hangup-proper-status();
				}
				goto user_uncallable;
			
			// user offline:
			//
			user_offline:
				Verbose(1,### Called user ${EXTEN} is offline);

				#exec "/opt/gemeinschaft/etc/asterisk/e-transfer-failed-callback.php"

				// forward on offline?
				if ("${fw_${is_call_from}_offline}" != "") {
					if ("${is_callcompletion}" = "1") {
						// no forwarding for call completion
						Verbose(1,### Call completion to ${EXTEN} (offline) - don't forward);
						&hangup-proper-status();
					}
					Verbose(1,### Called user: ${EXTEN} - forward on offline to: ${fw_${is_call_from}_offline});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_to=${fw_${is_call_from}_offline});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Dial(Local/${fw_${is_call_from}_offline}/n,200);
					Congestion(3);
					&hangup-proper-status();
				}
				goto user_uncallable;
			
			//}
		
		//----------------------------------------------------------
		// type is "queue":
		//----------------------------------------------------------
		to_queue:
			
			//Verbose(1,### Called queue: ${EXTEN});
			
			AGI(/opt/gemeinschaft/dialplan-scripts/in-queue-get-fw.agi,${EXTEN});
			// sets fw_*_* and ring_instead_of_moh
			// and queue_displayname
			
			// forward (case=always) active?
			if ("${fw_${is_call_from}_always}" != "") {
				Verbose(1,### Called queue: ${EXTEN} - always forward to: ${fw_${is_call_from}_always});
				Set(__forwarded_by=${EXTEN});
				Set(__forwarded_to=${fw_${is_call_from}_always});
				if ( "${is_from_gateway}" = "1" )
					Set(__is_from_gateway=2);
				Dial(Local/${fw_${is_call_from}_always}/n,900);
				&hangup-proper-status();
			}

			AGI(/opt/gemeinschaft/dialplan-scripts/queue-get-members.agi,${EXTEN});
			Set(queuetimeout=3600);
			if ("${fw_${is_call_from}_timeout}" != "")
				Set(queuetimeout=${fw_${is_call_from}_timeout_timeout});
			
			if ("${queuetimeout}" != "") {
				Verbose(1,### Enter local queue ${EXTEN}\, timeout: ${queuetimeout} s);
			}
			else {
				Verbose(1,### Enter local queue ${EXTEN}\, timeout: none);
			}
			
			//Set(CALLERID(name)=Queue ${EXTEN});
			//Set(CALLERID(name)=Q${EXTEN} ${CALLERID(name)});
			Set(CALLERID(name)=[${queue_displayname}] ${CALLERID(name)});
			if ("${CALLERID(num)}" = "")
				Set(CALLERID(num)=${EXTEN});
			
			Set(all_busy=);
			
			// SONDERFALL HACK
			//if ("${EXTEN}" = "5000") {
			//	Answer();
			//	Wait(0.5);
			//	Set(ring_instead_of_moh=r);
			//	Set(queuetimeout=30);
			//	Verbose(1,### Sonderfall fuer Queue ${EXTEN} - klingeln statt MOH\, timeout: ${queuetimeout});
			//	AGI(/opt/gemeinschaft/dialplan-scripts/queue-num-avail-members.agi,${EXTEN});
			//	Verbose(1,### Sonderfall fuer Queue ${EXTEN} - Agenten: ${queue_num_members}\, frei: ${queue_avail_members});
			//	if ("${queue_avail_members}" = "0") {
			//		Set(all_busy=1);
			//		if ("${queue_num_members}" = "0") {
			//			// empty:
			//			Set(QUEUESTATUS=JOINEMPTY);
			//			Verbose(1,### Sonderfall fuer Queue ${EXTEN} - keine Agenten\, behandeln wie ${QUEUESTATUS});
			//		}
			//		else {
			//			// treat like full:
			//			Set(QUEUESTATUS=FULL);
			//			Verbose(1,### Sonderfall fuer Queue ${EXTEN} - alle besetzt\, behandeln wie ${QUEUESTATUS});
			//		}
			//	}
			//}
			// ENDE SONDERFALL HACK
			
			if ("${all_busy}" != "1") {
				AGI(/opt/gemeinschaft/dialplan-scripts/queue-get-sysrec,${EXTEN});
				if ("${sysrec_filename}" != "") {
					Answer();
					Wait(0.5);
					Playback(/opt/gemeinschaft/sys-rec/${sysrec_filename});
				}
				if ("${ring_instead_of_moh}" = "r") {
					//Proceeding();  // SIP: "100 Trying"
					TryExec(Proceeding());  // Proceeding() was added in Asterisk 1.6
					if ("${TRYSTATUS}"="NOAPP") {
						Verbose(1,Proceeding ...);
						Ringing();
					}
				}
				else {
					Set(ring_instead_of_moh=);
					//Progress();  // SIP: "183 Session Progress" with early media
					Answer();
					Wait(0.5);
				}
				Set(queue_entertime=${EPOCH});
				Queue(${EXTEN},${ring_instead_of_moh},${subqueue},,${queuetimeout});
				Set(queue_waittime=$[${EPOCH}-${queue_entertime}]);
				Verbose(1,### Tried to enter queue ${EXTEN}\, result: ${QUEUESTATUS}\, waittime: ${queue_waittime});
				
				if ("${QUEUESTATUS}"="JOINEMPTY" || "${QUEUESTATUS}"="JOINUNAVAIL") {
					// does not leave a trace in the queue_log so fake it:
					QueueLog(${EXTEN},${UNIQUEID},NONE,ENTERQUEUE,,${CALLERID(num)},fake);
				}
				else if ("${QUEUESTATUS}"="FULL") {
					// for some strange reason does not leave a trace in the
					// queue_log. fake it:
					QueueLog(${EXTEN},${UNIQUEID},NONE,ENTERQUEUE,,${CALLERID(num)},fake);
					QueueLog(${EXTEN},${UNIQUEID},NONE,_EXITFULL,,,${queue_waittime},fake);
				}
			}
			else {
				Verbose(1,### Don't even try to enter queue ${EXTEN} because: ${QUEUESTATUS});
				// fake ENTERQUEUE in log:
				QueueLog(${EXTEN},${UNIQUEID},NONE,ENTERQUEUE,,${CALLERID(num)},fake);
				Set(queue_waittime=0);
				if ("${QUEUESTATUS}"="JOINEMPTY" || "${QUEUESTATUS}"="JOINUNAVAIL") {
					//QueueLog(${EXTEN},${UNIQUEID},NONE,EXITEMPTY,pos,origpos,waittime,fake);
					QueueLog(${EXTEN},${UNIQUEID},NONE,EXITEMPTY,,,0,fake);
				}
				else if ("${QUEUESTATUS}"="LEAVEEMPTY" || "${QUEUESTATUS}"="LEAVEUNAVAIL") {
					QueueLog(${EXTEN},${UNIQUEID},NONE,EXITEMPTY,,,${queue_waittime},fake);
				}
				else if ("${QUEUESTATUS}"="FULL") {
					QueueLog(${EXTEN},${UNIQUEID},NONE,_EXITFULL,,,,fake);
					// custom event
				}
				// QUEUESTATUS "TIMEOUT" cannot happen here because we did not enter
				// the queue
			}
			
			if ("${QUEUESTATUS}"="TIMEOUT") {
				Verbose(1,### Queue ${EXTEN} is unavailable (no answer after timeout));
				if ("${fw_${is_call_from}_timeout}" != "") {
					Verbose(1,### Called queue: ${EXTEN}\, forward on timeout to: ${fw_${is_call_from}_timeout});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_to=${fw_${is_call_from}_timeout});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Dial(Local/${fw_${is_call_from}_timeout}/n,900);
					&hangup-proper-status();
				}
				Playback(/opt/gemeinschaft/sounds/de-DE/queue-all-busy);
				Busy(5);
				Hangup();
			}
			else if ("${QUEUESTATUS}"="FULL") {
				Verbose(1,### Queue ${EXTEN} is full);
				if ("${fw_${is_call_from}_full}" != "") {
					Verbose(1,### Called queue: ${EXTEN}\, forward on full to: ${fw_${is_call_from}_full});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_to=${fw_${is_call_from}_full});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Dial(Local/${fw_${is_call_from}_full}/n,900);
					&hangup-proper-status();
				}
				Playback(/opt/gemeinschaft/sounds/de-DE/queue-all-busy);
				Busy(5);
				Hangup();
			}
			else if ("${QUEUESTATUS}"="JOINEMPTY" || "${QUEUESTATUS}"="LEAVEEMPTY" || "${QUEUESTATUS}"="JOINUNAVAIL" || "${QUEUESTATUS}"="LEAVEUNAVAIL") {
				Verbose(1,### Queue ${EXTEN} is empty);
				if ("${fw_${is_call_from}_empty}" != "") {
					Verbose(1,### Called queue: ${EXTEN}\, forward on empty to: ${fw_${is_call_from}_empty});
					Set(__forwarded_by=${EXTEN});
					Set(__forwarded_to=${fw_${is_call_from}_empty});
					if ( "${is_from_gateway}" = "1" )
						Set(__is_from_gateway=2);
					Dial(Local/${fw_${is_call_from}_empty}/n,900);
					&hangup-proper-status();
				}
				Busy(5);
				Hangup();
			}
			Hangup();
		
		//----------------------------------------------------------
		// type is "unknown":
		//----------------------------------------------------------
		to_unknown:
			//if ("${is_sub_system}" = "yes") {
			//	Verbose(1,### We are a sub-system. Dial to the gateway for unknown extension: ${EXTEN});
				Verbose(1,### Dial to the gateway for unknown extension: ${EXTEN});
				&dial-gateway(${EXTEN});
			//} else {
			//	Verbose(1,### We are not a sub-system. Hang up.);
			//}
			// 1 = AST_CAUSE_UNALLOCATED => SIP 404 Not Found
			Set(PRI_CAUSE=1);
			Hangup(1);
		
		
		//----------------------------------------------------------
		// type is "ivr":
		//----------------------------------------------------------
		to_ivr:
			NoOP(Extension is IVR);
			goto IVR-${EXTEN}|s|1;   
		
		
		user_uncallable:
			// user uncallable (busy/offline/unavail)
			// vm box active (from internal/external)?
			//AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-vm.agi,${origext});
			AGI(/opt/gemeinschaft/dialplan-scripts/in-user-get-vm.agi,${EXTEN});
			if ("${user_id}" != "") {
				Set(vm_real_source=internal);
				Set(vm_source=internal);
			}
			else {
				Set(vm_real_source=external);

				if ("${is_sub_system}" = "yes") {
						
					&is_dmz(${CALLERID(num)});
					if ("${is_dmz}" == "1") {
						Set(vm_source=internal);
					}
				else {
					Set(vm_source=external);
					}
	
				}
				else {
				
					if ( "${is_from_gateway}" = "" ) {
						Set(vm_source=internal);
					}
					else {
						Set(vm_source=external);
					}
				}

			}
			if ("${vm_real_source}" = "internal") {
				if ("${DIALSTATUS}" = "BUSY" || "${DIALSTATUS}" = "CHANUNAVAIL" || "${DIALSTATUS}" = "CONGESTION") {
					// call completion possible?
					if ("${is_dnd}" = "1") {
						Verbose(1,### Call completion to ${EXTEN} possible?: 0 - DND);
					}
					else {
						AGI(/opt/gemeinschaft/dialplan-scripts/cc-get-possible.agi,${EXTEN});
						Verbose(1,### Call completion to ${EXTEN} possible?: ${cc_possible});
						if ("${cc_possible}" = "1" && "${EXTEN}" != "${user_name}")
							goto user_uncallable_offer_cc;
					}
				}
			}
			// If a user didn't forward to their mailbox we assume they
			// don't want it as an auto-fallthrough default either.
			//if ("${vm_${vm_source}_active}" != "1")
			goto user_uncallable_vm_off;
			
		user_uncallable_vm_on:
			Verbose(1,### Called user ${EXTEN} unreachable\, record voicemail from ${vm_source});
			if ("${is_callcompletion}" = "1") {
				// no voicemail for call completion
				Verbose(1,### Called user ${EXTEN} unreachable but don't record voicemail for call completion);
				&hangup-proper-status();
			}
			// vm
			Answer();
			Wait(0.5);
			Set(vm_announce_file=${vm_announce_${vm_source}});
			if ("${vm_announce_file}" = "") {
				Playback(vm-theperson);
				//SayDigits(${origext});
				SayDigits(${EXTEN});
				if ("${DIALSTATUS}" = "BUSY") {
					Playback(vm-isonphone);
				}
				else {
					Playback(vm-isunavail);
				}
				Playback(vm-intro);
			}
			else {
				Playback(${vm_announce_file});
			}
			
		user_vm_rec:
			//VoiceMail(${origext},s);
			VoiceMail(${EXTEN},s);
			Hangup();
		
		user_uncallable_vm_off:
			//Verbose(1,### Called user ${origext} unreachable\, mailbox not active);
			Verbose(1,### Called user ${EXTEN} unreachable\, mailbox not active);
			if ("${DIALSTATUS}" = "BUSY") {
				Hangup();
			} else {
				Hangup(19);
				// 19 = no answer from the user => 480 Temporarily unavailable
			}
		
		user_uncallable_offer_cc:
			Verbose(1,### Called user ${EXTEN} unreachable (${DIALSTATUS})\, offer call completion);
			ResetCDR(w);
			NoCDR();
			Answer();
			Wait(0.5);
			Set(vm_announce_file=${vm_announce_${vm_source}});
			if ("${vm_announce_file}" = "") {
				Playback(vm-theperson);
				SayDigits(${EXTEN});
				if ("${DIALSTATUS}" = "BUSY") {
					Playback(vm-isonphone);
				}
				else {
					Playback(vm-isunavail);
				}
			}
			else {
				Playback(${vm_announce_file});
			}
			Set(cc_to_ext=${EXTEN});
			jump offer@program-cc;
		
	}
	
	h => {
		ResetCDR(w);
		NoCDR();
 		if("${MEMBERINTERFACE}" != "" && "SIP/${CALLERID(ani)}" != "${MEMBERINTERFACE}" ) {
 			Set(exttype=queue);
 		}
		/*
 		Verbose(1,###### DIALSTATUS     : ${DIALSTATUS});
 		Verbose(1,###### exttype        : ${exttype});
 		Verbose(1,###### CALLERID(all)  : ${CALLERID(all)});
 		Verbose(1,###### CALLERID(ani)  : ${CALLERID(ani)});
 		Verbose(1,###### CALLERID(dnid) : ${CALLERID(dnid)});
 		Verbose(1,###### CALLERID(rdnis): ${CALLERID(rdnis)});
 		Verbose(1,###### CALLERID(num)  : ${CALLERID(num)});
 		Verbose(1,###### origext        : ${origext});
 		Verbose(1,###### user_name      : ${user_name});
 		Verbose(1,###### forwarded_to   : ${forwarded_to});
 		Verbose(1,###### CHANNEL        : ${CHANNEL});
		*/

		if ("${is_huntgroup}" = "1" && "${DIALSTATUS}" = "ANSWER" && "${user_extension}" != "")
			Set(exttype=huntgroup);

		if ("${confnum}" != "") {
			Verbose(1,### Participant "${CALLERID(all)}" has left conference ${confprefix}${confnum});
			MeetMeCount(${confnum},cnt);
			Verbose(1,### There are now ${cnt} people left in conference ${confprefix}${confnum});
			if (${cnt} < 1) {
				Verbose(1,### Conference ${confprefix}${confnum} is empty. Free it.);
				// remove the conference from the db so some other node can claim it:
				TrySystem(/opt/gemeinschaft/dialplan-scripts/conf-remove ${confprefix}${confnum});
				Verbose(1,### Conference ${confprefix}${confnum} freed.);
			}
		}
		else
		if ("${exttype}" = "user" && "${is_callfile_origin}" = "") {
			// to internal user, store dial log (in|missed)
			
			Set(type=missed);
			if ("${DIALSTATUS}" = "ANSWER")
				Set(type=in);

			if ("${forwarded_to}" == "" ) {
				// normal call
				if ("${CALLERID(dnid)}" == "${origext}" && "${DIALSTATUS}" != "") {
					&dial-log-store(${CALLERID(dnid)},${type},${CALLERID(num)},0);
				}
				// attended transfer
				else if ("${DIALSTATUS}" != "") {
					&dial-log-store(${origext},${type},${CALLERID(num)},0);
				}
				
			} else if ("${CHANNEL:0:5}" != "Local") {
				&dial-log-store(${forwarded_to},${type},${CALLERID(num)},0);
			}
			else if ("${forwarded_to:0:3}" == "vm*" ) {
				&dial-log-store(${forwarded_to:3},${type},${CALLERID(num)},0);
			}
			else if ("${forwarded_to:0:2}" == "vm" ) {
				&dial-log-store(${forwarded_to:2},${type},${CALLERID(num)},0);
			}
				

		}
		else if ("${exttype}" = "queue") {
			if("${MEMBERINTERFACE}" = "") {
				Verbose(1,### Queue ${CALLERID(dnid)} call ${CALLERID(num)} no answer);
				Set(member=1);
				while ("${qm_${member}}" != "") {
					&dial-log-store(${qm_${member}},missed,${CALLERID(num)},${origext});
					member=${member}+1;
				}
			}
			else {
				Verbose(1,### Queue ${CALLERID(dnid)} ${MEMBERINTERFACE} answered call ${CALLERID(num)});
				Set(member=1);
				while ("${qm_${member}}" != "") {
					if("${MEMBERINTERFACE}" = "SIP/${qm_${member}}") {
						&dial-log-store(${qm_${member}},in,${CALLERID(num)},${origext});
					}
					member=${member}+1;
				}
			}
		}
		else if ("${exttype}" = "huntgroup") {
			if ("${DIALSTATUS}" != "ANSWER") {
				Set(huntgroup=1);
				while ("${huntgroup_${huntgroup}_dial}" != "") {
					Verbose(1,### Writing missing call to DialLog: ${huntgroup_${huntgroup}_dial});
					&dial-log-store(${huntgroup_${huntgroup}_dial},missed,${CALLERID(num)},0);
					huntgroup=${huntgroup}+1;
				}
			}
			else {
				if("${user_extension}" != ""){
					&dial-log-store(${user_extension},in,${CALLERID(num)},0);
				}
			}
		}
	}
	
}

context program-cc {
	
	offer => {
		Answer();
		#exec "/opt/gemeinschaft/etc/asterisk/e-lang.ael.php"
		Wait(0.5);
		Set(TIMEOUT(digit)=5);
		Set(TIMEOUT(response)=10);
		
		for (i=0; ${i}<3; i=${i}+1) {
			//Playback(/opt/gemeinschaft/sounds/de-DE/druecken-sie-die-1-um-einen-automatischen-rueckruf-zu-programmieren);
			if ("${vm_${vm_source}_active}" = "1") {
				Background(/opt/gemeinschaft/sounds/de-DE/um-eine-nachricht-zu-hinterlassen-druecken-sie-die&digits/1,m);
			}
			Background(/opt/gemeinschaft/sounds/de-DE/fuer-einen-automatischen-rueckruf-druecken-sie-die&/opt/gemeinschaft/sounds/de-DE/stern-taste,m);
			WaitExten();
		}
		
	}
	1 => {
		Verbose(1,### Caller wants to leave voicemail for user ${cc_to_ext});
		#exec "/opt/gemeinschaft/etc/asterisk/e-lang.ael.php"
		//Playback(beep);
		if ("${vm_${vm_source}_active}" = "1") {
			if ("${is_callcompletion}" = "1") {
				// no voicemail for call completion
				Verbose(1,### Called user ${EXTEN} unreachable but don't record voicemail for call completion);
				&hangup-proper-status();
			}
			goto to-internal-users-self|${cc_to_ext}|user_vm_rec;
		}
		goto to-internal-users-self|${cc_to_ext}|user_uncallable_vm_off;
	}
	* => {
		Verbose(1,### Caller wants call completion to user ${cc_to_ext});
		#exec "/opt/gemeinschaft/etc/asterisk/e-lang.ael.php"
		AGI(/opt/gemeinschaft/dialplan-scripts/cc-program.agi,${user_name},${cc_to_ext});
		Verbose(1,### Call completion programmed?: ${cc_programmed});
		if ("${cc_programmed}" = "1") {
			Playback(/opt/gemeinschaft/sounds/de-DE/rueckruf-programmiert);
			Verbose(1,### Call completion programmed from ${user_name} to ${cc_to_ext});
		}
		else {
			Verbose(1,### Call completion from ${user_name} to ${cc_to_ext} not possible);
		}
		Hangup();
	}
	# => {
		Playback(vm-goodbye);
		Hangup();
	}
	t => goto #|1;
	i => Playback(invalid);
}


macro set-callerid-by-clir() {
	// get CLIR for a call to internal:
	if ("${clir}" = "" ) {
		AGI(/opt/gemeinschaft/dialplan-scripts/get-clir-internal.agi,${user_id});
	}
	if ("${clir}" = "1") {
		Set(CALLERID(all)=Anonymous <anonymous>);
		// RFC 2543
	}
}

